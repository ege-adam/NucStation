
NucStationBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005748  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d90  08005d90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d98  08005d98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000070  08005e10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08005e10  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eae8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002825  00000000  00000000  0002eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000313a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000320e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001663e  00000000  00000000  00032d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011391  00000000  00000000  00049376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c2c  00000000  00000000  0005a707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  000db384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080057f0 	.word	0x080057f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080057f0 	.word	0x080057f0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8d8 	bl	80004a4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8d3 	bl	80004a4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzsi2>:
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0xe>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__clzsi2+0x18>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0x22>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	; (adr r2, 8000494 <__clzsi2+0x2c>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1840      	adds	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	02020304 	.word	0x02020304
 8000498:	01010101 	.word	0x01010101
	...

080004a4 <__clzdi2>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d103      	bne.n	80004b2 <__clzdi2+0xe>
 80004aa:	f7ff ffdd 	bl	8000468 <__clzsi2>
 80004ae:	3020      	adds	r0, #32
 80004b0:	e002      	b.n	80004b8 <__clzdi2+0x14>
 80004b2:	0008      	movs	r0, r1
 80004b4:	f7ff ffd8 	bl	8000468 <__clzsi2>
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <bytestowrite>:
#include "EEPROMHelper.h"

uint8_t bytes_temp[4];

uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	801a      	strh	r2, [r3, #0]
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	1c0a      	adds	r2, r1, #0
 80004cc:	801a      	strh	r2, [r3, #0]
	if ((size+offset)<PAGE_SIZE) return size;
 80004ce:	1dbb      	adds	r3, r7, #6
 80004d0:	881a      	ldrh	r2, [r3, #0]
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	2b3f      	cmp	r3, #63	; 0x3f
 80004da:	dc02      	bgt.n	80004e2 <bytestowrite+0x26>
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	e004      	b.n	80004ec <bytestowrite+0x30>
	else return PAGE_SIZE-offset;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	2240      	movs	r2, #64	; 0x40
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	b29b      	uxth	r3, r3
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b002      	add	sp, #8
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80004f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f6:	b08f      	sub	sp, #60	; 0x3c
 80004f8:	af04      	add	r7, sp, #16
 80004fa:	0004      	movs	r4, r0
 80004fc:	0008      	movs	r0, r1
 80004fe:	60ba      	str	r2, [r7, #8]
 8000500:	0019      	movs	r1, r3
 8000502:	250e      	movs	r5, #14
 8000504:	197b      	adds	r3, r7, r5
 8000506:	1c22      	adds	r2, r4, #0
 8000508:	801a      	strh	r2, [r3, #0]
 800050a:	240c      	movs	r4, #12
 800050c:	193b      	adds	r3, r7, r4
 800050e:	1c02      	adds	r2, r0, #0
 8000510:	801a      	strh	r2, [r3, #0]
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	1c0a      	adds	r2, r1, #0
 8000516:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000518:	2306      	movs	r3, #6
 800051a:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800051c:	2326      	movs	r3, #38	; 0x26
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	197a      	adds	r2, r7, r5
 8000522:	8812      	ldrh	r2, [r2, #0]
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000526:	1dbb      	adds	r3, r7, #6
 8000528:	881a      	ldrh	r2, [r3, #0]
 800052a:	193b      	adds	r3, r7, r4
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	18d3      	adds	r3, r2, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	da00      	bge.n	8000536 <EEPROM_Read+0x42>
 8000534:	333f      	adds	r3, #63	; 0x3f
 8000536:	119b      	asrs	r3, r3, #6
 8000538:	b299      	uxth	r1, r3
 800053a:	201a      	movs	r0, #26
 800053c:	183b      	adds	r3, r7, r0
 800053e:	220e      	movs	r2, #14
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	8812      	ldrh	r2, [r2, #0]
 8000544:	188a      	adds	r2, r1, r2
 8000546:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000548:	183a      	adds	r2, r7, r0
 800054a:	2326      	movs	r3, #38	; 0x26
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	8812      	ldrh	r2, [r2, #0]
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	1ad3      	subs	r3, r2, r3
 8000554:	b29a      	uxth	r2, r3
 8000556:	2318      	movs	r3, #24
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	3201      	adds	r2, #1
 800055c:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	2200      	movs	r2, #0
 8000564:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
 800056a:	e04a      	b.n	8000602 <EEPROM_Read+0x10e>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800056c:	2626      	movs	r6, #38	; 0x26
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	881a      	ldrh	r2, [r3, #0]
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	409a      	lsls	r2, r3
 8000576:	0013      	movs	r3, r2
 8000578:	b21a      	sxth	r2, r3
 800057a:	210c      	movs	r1, #12
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2000      	movs	r0, #0
 8000580:	5e1b      	ldrsh	r3, [r3, r0]
 8000582:	4313      	orrs	r3, r2
 8000584:	b21a      	sxth	r2, r3
 8000586:	2316      	movs	r3, #22
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800058c:	2514      	movs	r5, #20
 800058e:	197c      	adds	r4, r7, r5
 8000590:	187b      	adds	r3, r7, r1
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	1dbb      	adds	r3, r7, #6
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff ff8e 	bl	80004bc <bytestowrite>
 80005a0:	0003      	movs	r3, r0
 80005a2:	8023      	strh	r3, [r4, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80005a4:	2424      	movs	r4, #36	; 0x24
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	18d3      	adds	r3, r2, r3
 80005ae:	2216      	movs	r2, #22
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	8811      	ldrh	r1, [r2, #0]
 80005b4:	4818      	ldr	r0, [pc, #96]	; (8000618 <EEPROM_Read+0x124>)
 80005b6:	22fa      	movs	r2, #250	; 0xfa
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	9202      	str	r2, [sp, #8]
 80005bc:	197a      	adds	r2, r7, r5
 80005be:	8812      	ldrh	r2, [r2, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2302      	movs	r3, #2
 80005c6:	000a      	movs	r2, r1
 80005c8:	21a0      	movs	r1, #160	; 0xa0
 80005ca:	f001 fe93 	bl	80022f4 <HAL_I2C_Mem_Read>
		startPage += 1;
 80005ce:	19bb      	adds	r3, r7, r6
 80005d0:	19ba      	adds	r2, r7, r6
 80005d2:	8812      	ldrh	r2, [r2, #0]
 80005d4:	3201      	adds	r2, #1
 80005d6:	801a      	strh	r2, [r3, #0]
		offset=0;
 80005d8:	210c      	movs	r1, #12
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 80005e0:	1dbb      	adds	r3, r7, #6
 80005e2:	1db9      	adds	r1, r7, #6
 80005e4:	197a      	adds	r2, r7, r5
 80005e6:	8809      	ldrh	r1, [r1, #0]
 80005e8:	8812      	ldrh	r2, [r2, #0]
 80005ea:	1a8a      	subs	r2, r1, r2
 80005ec:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	1939      	adds	r1, r7, r4
 80005f2:	197a      	adds	r2, r7, r5
 80005f4:	8809      	ldrh	r1, [r1, #0]
 80005f6:	8812      	ldrh	r2, [r2, #0]
 80005f8:	188a      	adds	r2, r1, r2
 80005fa:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	3301      	adds	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
 8000602:	2318      	movs	r3, #24
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	6a3a      	ldr	r2, [r7, #32]
 800060a:	429a      	cmp	r2, r3
 800060c:	dbae      	blt.n	800056c <EEPROM_Read+0x78>
	}
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b00b      	add	sp, #44	; 0x2c
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	2000008c 	.word	0x2000008c

0800061c <FlashTheGame>:
  * @param data_len data length
  * @is_first_block true - if this is first block, false - not first block
  * @retaval HAL_StatusTypeDef
  */
HAL_StatusTypeDef FlashTheGame( uint32_t *data, uint16_t data_sector, bool is_first_block)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	0008      	movs	r0, r1
 8000626:	0011      	movs	r1, r2
 8000628:	1cbb      	adds	r3, r7, #2
 800062a:	1c02      	adds	r2, r0, #0
 800062c:	801a      	strh	r2, [r3, #0]
 800062e:	1c7b      	adds	r3, r7, #1
 8000630:	1c0a      	adds	r2, r1, #0
 8000632:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef reta;
  do
  {
    reta = HAL_FLASH_Unlock();
 8000634:	2527      	movs	r5, #39	; 0x27
 8000636:	197c      	adds	r4, r7, r5
 8000638:	f001 fa2c 	bl	8001a94 <HAL_FLASH_Unlock>
 800063c:	0003      	movs	r3, r0
 800063e:	7023      	strb	r3, [r4, #0]
    if( reta != HAL_OK )
 8000640:	002c      	movs	r4, r5
 8000642:	193b      	adds	r3, r7, r4
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d153      	bne.n	80006f2 <FlashTheGame+0xd6>
    {
      break;
    }
    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 800064a:	1c7b      	adds	r3, r7, #1
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d024      	beq.n	800069c <FlashTheGame+0x80>
    {
      printf("Erasing the Flash memory...\r\n");
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <FlashTheGame+0xe8>)
 8000654:	0018      	movs	r0, r3
 8000656:	f004 f8cd 	bl	80047f4 <puts>
      //Erase the Flash
      uint32_t errory = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
      FLASH_EraseInitTypeDef EraseInitStruct;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 800065e:	210c      	movs	r1, #12
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
      EraseInitStruct.PageAddress   = 0x8008000;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <FlashTheGame+0xec>)
 800066a:	605a      	str	r2, [r3, #4]
      EraseInitStruct.NbPages     = 1280;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	22a0      	movs	r2, #160	; 0xa0
 8000670:	00d2      	lsls	r2, r2, #3
 8000672:	609a      	str	r2, [r3, #8]
      reta = HAL_FLASHEx_Erase(&EraseInitStruct, &errory);
 8000674:	0025      	movs	r5, r4
 8000676:	193c      	adds	r4, r7, r4
 8000678:	2318      	movs	r3, #24
 800067a:	18fa      	adds	r2, r7, r3
 800067c:	187b      	adds	r3, r7, r1
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fb7d 	bl	8001d80 <HAL_FLASHEx_Erase>
 8000686:	0003      	movs	r3, r0
 8000688:	7023      	strb	r3, [r4, #0]

      if( reta != HAL_OK )
 800068a:	197b      	adds	r3, r7, r5
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d004      	beq.n	800069c <FlashTheGame+0x80>
      {
    	printf("Error...\r\n");
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <FlashTheGame+0xf0>)
 8000694:	0018      	movs	r0, r3
 8000696:	f004 f8ad 	bl	80047f4 <puts>
 800069a:	e02b      	b.n	80006f4 <FlashTheGame+0xd8>
        break;
      }
    }

    printf("Flashing...\r\n");
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <FlashTheGame+0xf4>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f004 f8a8 	bl	80047f4 <puts>
    uint32_t _data = *data;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	623b      	str	r3, [r7, #32]
    uint32_t adress = (ETX_APP_FLASH_ADDR + (data_sector * 4));
 80006aa:	1cbb      	adds	r3, r7, #2
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	4a19      	ldr	r2, [pc, #100]	; (8000714 <FlashTheGame+0xf8>)
 80006b0:	4694      	mov	ip, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
    reta = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, adress, _data);
 80006b8:	2527      	movs	r5, #39	; 0x27
 80006ba:	197c      	adds	r4, r7, r5
 80006bc:	6a3a      	ldr	r2, [r7, #32]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	0019      	movs	r1, r3
 80006c2:	2002      	movs	r0, #2
 80006c4:	f001 f9aa 	bl	8001a1c <HAL_FLASH_Program>
 80006c8:	0003      	movs	r3, r0
 80006ca:	7023      	strb	r3, [r4, #0]
    HAL_Delay(5);
 80006cc:	2005      	movs	r0, #5
 80006ce:	f001 f8cd 	bl	800186c <HAL_Delay>
    if( reta == HAL_OK )
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d004      	beq.n	80006e4 <FlashTheGame+0xc8>
      //update the data count

    }
    else
    {
      printf("Flash Write Error\r\n");
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <FlashTheGame+0xfc>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f004 f889 	bl	80047f4 <puts>
      break;
 80006e2:	e007      	b.n	80006f4 <FlashTheGame+0xd8>
    }

    reta = HAL_FLASH_Lock();
 80006e4:	2327      	movs	r3, #39	; 0x27
 80006e6:	18fc      	adds	r4, r7, r3
 80006e8:	f001 fa28 	bl	8001b3c <HAL_FLASH_Lock>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]
 80006f0:	e000      	b.n	80006f4 <FlashTheGame+0xd8>
      break;
 80006f2:	46c0      	nop			; (mov r8, r8)
    if( reta != HAL_OK )
    {
      break;
    }
  }while( false );
  return reta;
 80006f4:	2327      	movs	r3, #39	; 0x27
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	781b      	ldrb	r3, [r3, #0]
}
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b00a      	add	sp, #40	; 0x28
 8000700:	bdb0      	pop	{r4, r5, r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	08005808 	.word	0x08005808
 8000708:	08008000 	.word	0x08008000
 800070c:	08005828 	.word	0x08005828
 8000710:	08005834 	.word	0x08005834
 8000714:	02002000 	.word	0x02002000
 8000718:	08005844 	.word	0x08005844

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b0e5      	sub	sp, #404	; 0x194
 8000720:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f001 f833 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f9c5 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 faa1 	bl	8000c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072e:	f000 fa6f 	bl	8000c10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000732:	f000 fa2d 	bl	8000b90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  const unsigned char nucStationLogo [] = {
 8000736:	4bcc      	ldr	r3, [pc, #816]	; (8000a68 <main+0x34c>)
 8000738:	22c4      	movs	r2, #196	; 0xc4
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	189b      	adds	r3, r3, r2
 800073e:	19da      	adds	r2, r3, r7
 8000740:	4bca      	ldr	r3, [pc, #808]	; (8000a6c <main+0x350>)
 8000742:	0010      	movs	r0, r2
 8000744:	0019      	movs	r1, r3
 8000746:	2390      	movs	r3, #144	; 0x90
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	001a      	movs	r2, r3
 800074c:	f003 ffb4 	bl	80046b8 <memcpy>
			0x14, 0x43, 0xd5, 0xb3, 0x63, 0xad, 0xb3, 0x9d, 0xd5, 0xb3, 0xfc, 0xbd, 0xb3, 0x9d, 0xd9, 0xb3,
			0xee, 0xa1, 0xb3, 0x9d, 0xd9, 0xb3, 0x6e, 0xad, 0xb3, 0x9d, 0xdd, 0x84, 0xf1, 0x80, 0x94, 0x5d
  };


  printf("Starting NucStation\r\n");
 8000750:	4bc7      	ldr	r3, [pc, #796]	; (8000a70 <main+0x354>)
 8000752:	0018      	movs	r0, r3
 8000754:	f004 f84e 	bl	80047f4 <puts>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // to show we are in bootloader mode
 8000758:	23a0      	movs	r3, #160	; 0xa0
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fd13 	bl	800218c <HAL_GPIO_WritePin>

  LCD_setRST(GPIOB, GPIO_PIN_13);
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	019b      	lsls	r3, r3, #6
 800076a:	4ac2      	ldr	r2, [pc, #776]	; (8000a74 <main+0x358>)
 800076c:	0019      	movs	r1, r3
 800076e:	0010      	movs	r0, r2
 8000770:	f000 fb94 	bl	8000e9c <LCD_setRST>
  LCD_setCE(GPIOB, GPIO_PIN_14);
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	01db      	lsls	r3, r3, #7
 8000778:	4abe      	ldr	r2, [pc, #760]	; (8000a74 <main+0x358>)
 800077a:	0019      	movs	r1, r3
 800077c:	0010      	movs	r0, r2
 800077e:	f000 fba1 	bl	8000ec4 <LCD_setCE>
  LCD_setDC(GPIOB, GPIO_PIN_15);
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	4abb      	ldr	r2, [pc, #748]	; (8000a74 <main+0x358>)
 8000788:	0019      	movs	r1, r3
 800078a:	0010      	movs	r0, r2
 800078c:	f000 fbae 	bl	8000eec <LCD_setDC>
  LCD_setDIN(GPIOB, GPIO_PIN_1);
 8000790:	4bb8      	ldr	r3, [pc, #736]	; (8000a74 <main+0x358>)
 8000792:	2102      	movs	r1, #2
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fbbd 	bl	8000f14 <LCD_setDIN>
  LCD_setCLK(GPIOB, GPIO_PIN_2);
 800079a:	4bb6      	ldr	r3, [pc, #728]	; (8000a74 <main+0x358>)
 800079c:	2104      	movs	r1, #4
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fbcc 	bl	8000f3c <LCD_setCLK>
  LCD_init();
 80007a4:	f000 fcfe 	bl	80011a4 <LCD_init>

  LCD_draw(nucStationLogo, 18, 0, 48, 48);
 80007a8:	2358      	movs	r3, #88	; 0x58
 80007aa:	18f8      	adds	r0, r7, r3
 80007ac:	2330      	movs	r3, #48	; 0x30
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2330      	movs	r3, #48	; 0x30
 80007b2:	2200      	movs	r2, #0
 80007b4:	2112      	movs	r1, #18
 80007b6:	f000 fc17 	bl	8000fe8 <LCD_draw>
  LCD_refreshScr();
 80007ba:	f000 fdd5 	bl	8001368 <LCD_refreshScr>


  HAL_Delay(500);
 80007be:	23fa      	movs	r3, #250	; 0xfa
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 f852 	bl	800186c <HAL_Delay>

  bool foundI2CFlag = false;
 80007c8:	2388      	movs	r3, #136	; 0x88
 80007ca:	33ff      	adds	r3, #255	; 0xff
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
  uint8_t ret;

  printf("Scanning \r\n");
 80007d2:	4ba9      	ldr	r3, [pc, #676]	; (8000a78 <main+0x35c>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f004 f80d 	bl	80047f4 <puts>
  for(uint8_t i = 1; i < 128; i++)
 80007da:	23c3      	movs	r3, #195	; 0xc3
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e02b      	b.n	800083e <main+0x122>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80007e6:	26c3      	movs	r6, #195	; 0xc3
 80007e8:	0076      	lsls	r6, r6, #1
 80007ea:	19bb      	adds	r3, r7, r6
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	18db      	adds	r3, r3, r3
 80007f2:	b299      	uxth	r1, r3
 80007f4:	257c      	movs	r5, #124	; 0x7c
 80007f6:	35ff      	adds	r5, #255	; 0xff
 80007f8:	197c      	adds	r4, r7, r5
 80007fa:	48a0      	ldr	r0, [pc, #640]	; (8000a7c <main+0x360>)
 80007fc:	2305      	movs	r3, #5
 80007fe:	2203      	movs	r2, #3
 8000800:	f001 feac 	bl	800255c <HAL_I2C_IsDeviceReady>
 8000804:	0003      	movs	r3, r0
 8000806:	7023      	strb	r3, [r4, #0]
      if (ret != HAL_OK) /* No ACK Received At That Address */
 8000808:	197b      	adds	r3, r7, r5
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10f      	bne.n	8000830 <main+0x114>
      {

    	 // printf("Device not found in 0x%X", i);
      }
      else if(ret == HAL_OK)
 8000810:	197b      	adds	r3, r7, r5
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10b      	bne.n	8000830 <main+0x114>
      {
          printf("Device found in 0x%X  \r\n", i);
 8000818:	19bb      	adds	r3, r7, r6
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	4b98      	ldr	r3, [pc, #608]	; (8000a80 <main+0x364>)
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f003 ff5b 	bl	80046dc <iprintf>
          foundI2CFlag = true;
 8000826:	2388      	movs	r3, #136	; 0x88
 8000828:	33ff      	adds	r3, #255	; 0xff
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 1; i < 128; i++)
 8000830:	21c3      	movs	r1, #195	; 0xc3
 8000832:	0049      	lsls	r1, r1, #1
 8000834:	187b      	adds	r3, r7, r1
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	187b      	adds	r3, r7, r1
 800083a:	3201      	adds	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	23c3      	movs	r3, #195	; 0xc3
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b25b      	sxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	dacc      	bge.n	80007e6 <main+0xca>
      }
  }
  printf("Scanning fin \r\n");
 800084c:	4b8d      	ldr	r3, [pc, #564]	; (8000a84 <main+0x368>)
 800084e:	0018      	movs	r0, r3
 8000850:	f003 ffd0 	bl	80047f4 <puts>

  if(foundI2CFlag)
 8000854:	2388      	movs	r3, #136	; 0x88
 8000856:	33ff      	adds	r3, #255	; 0xff
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <main+0x146>
 8000860:	e0f0      	b.n	8000a44 <main+0x328>
  {
	  LCD_print("L", 0, 0);
 8000862:	4b89      	ldr	r3, [pc, #548]	; (8000a88 <main+0x36c>)
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fd19 	bl	80012a0 <LCD_print>

	  char percentLoad[5] = {0};
 800086e:	4b87      	ldr	r3, [pc, #540]	; (8000a8c <main+0x370>)
 8000870:	20c4      	movs	r0, #196	; 0xc4
 8000872:	0040      	lsls	r0, r0, #1
 8000874:	181b      	adds	r3, r3, r0
 8000876:	19db      	adds	r3, r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]

	  uint8_t buffer[64] = {0};
 8000880:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <main+0x374>)
 8000882:	0004      	movs	r4, r0
 8000884:	181b      	adds	r3, r3, r0
 8000886:	19db      	adds	r3, r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	3304      	adds	r3, #4
 800088e:	223c      	movs	r2, #60	; 0x3c
 8000890:	2100      	movs	r1, #0
 8000892:	0018      	movs	r0, r3
 8000894:	f003 ff19 	bl	80046ca <memset>
	  uint8_t lastThree[3]  = {0, 0, 0};
 8000898:	4b7e      	ldr	r3, [pc, #504]	; (8000a94 <main+0x378>)
 800089a:	0020      	movs	r0, r4
 800089c:	181b      	adds	r3, r3, r0
 800089e:	19db      	adds	r3, r3, r7
 80008a0:	4a7d      	ldr	r2, [pc, #500]	; (8000a98 <main+0x37c>)
 80008a2:	8811      	ldrh	r1, [r2, #0]
 80008a4:	8019      	strh	r1, [r3, #0]
 80008a6:	7892      	ldrb	r2, [r2, #2]
 80008a8:	709a      	strb	r2, [r3, #2]
	  uint8_t endCheckArray[3] = {'E', 'G', 'E'};
 80008aa:	4b7c      	ldr	r3, [pc, #496]	; (8000a9c <main+0x380>)
 80008ac:	181b      	adds	r3, r3, r0
 80008ae:	19db      	adds	r3, r3, r7
 80008b0:	4a7b      	ldr	r2, [pc, #492]	; (8000aa0 <main+0x384>)
 80008b2:	8811      	ldrh	r1, [r2, #0]
 80008b4:	8019      	strh	r1, [r3, #0]
 80008b6:	7892      	ldrb	r2, [r2, #2]
 80008b8:	709a      	strb	r2, [r3, #2]

	  uint8_t wordCounter = 0;
 80008ba:	2386      	movs	r3, #134	; 0x86
 80008bc:	33ff      	adds	r3, #255	; 0xff
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
	  uint8_t lastFour[4] = {0};
 80008c4:	4b77      	ldr	r3, [pc, #476]	; (8000aa4 <main+0x388>)
 80008c6:	181b      	adds	r3, r3, r0
 80008c8:	19db      	adds	r3, r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
	  uint16_t sector = 0;
 80008ce:	23c1      	movs	r3, #193	; 0xc1
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	801a      	strh	r2, [r3, #0]
	  uint32_t lastFourWord[1] = {0};
 80008d8:	2300      	movs	r3, #0
 80008da:	643b      	str	r3, [r7, #64]	; 0x40

	  uint8_t j = 0;
 80008dc:	2382      	movs	r3, #130	; 0x82
 80008de:	33ff      	adds	r3, #255	; 0xff
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]

	  for(int i = 0; i < PAGE_NUM; i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	22be      	movs	r2, #190	; 0xbe
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	18ba      	adds	r2, r7, r2
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	e09e      	b.n	8000a30 <main+0x314>
	  {
		  EEPROM_Read(i, 0, buffer, 64);
 80008f2:	23be      	movs	r3, #190	; 0xbe
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	b298      	uxth	r0, r3
 80008fc:	003a      	movs	r2, r7
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	2100      	movs	r1, #0
 8000902:	f7ff fdf7 	bl	80004f4 <EEPROM_Read>

		  for(j = 0; j < 64; j++)
 8000906:	2382      	movs	r3, #130	; 0x82
 8000908:	33ff      	adds	r3, #255	; 0xff
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e06d      	b.n	80009ee <main+0x2d2>
		  {
			  lastFour[wordCounter] = buffer[j];
 8000912:	2382      	movs	r3, #130	; 0x82
 8000914:	33ff      	adds	r3, #255	; 0xff
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	2486      	movs	r4, #134	; 0x86
 800091c:	34ff      	adds	r4, #255	; 0xff
 800091e:	193b      	adds	r3, r7, r4
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	495b      	ldr	r1, [pc, #364]	; (8000a90 <main+0x374>)
 8000924:	20c4      	movs	r0, #196	; 0xc4
 8000926:	0040      	lsls	r0, r0, #1
 8000928:	1809      	adds	r1, r1, r0
 800092a:	19c9      	adds	r1, r1, r7
 800092c:	5c89      	ldrb	r1, [r1, r2]
 800092e:	4a5d      	ldr	r2, [pc, #372]	; (8000aa4 <main+0x388>)
 8000930:	1812      	adds	r2, r2, r0
 8000932:	19d2      	adds	r2, r2, r7
 8000934:	54d1      	strb	r1, [r2, r3]
			  wordCounter++;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	187b      	adds	r3, r7, r1
 800093e:	3201      	adds	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
			  if(wordCounter == 4)
 8000942:	187b      	adds	r3, r7, r1
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b04      	cmp	r3, #4
 8000948:	d14a      	bne.n	80009e0 <main+0x2c4>
			  {
				  //FLASH
				  lastFourWord[0] = lastFour[0] | (lastFour[1] << 8) | (lastFour[2] << 16) | (lastFour[3] << 24);
 800094a:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <main+0x388>)
 800094c:	181b      	adds	r3, r3, r0
 800094e:	19db      	adds	r3, r3, r7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	001a      	movs	r2, r3
 8000954:	4b53      	ldr	r3, [pc, #332]	; (8000aa4 <main+0x388>)
 8000956:	181b      	adds	r3, r3, r0
 8000958:	19db      	adds	r3, r3, r7
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	431a      	orrs	r2, r3
 8000960:	4b50      	ldr	r3, [pc, #320]	; (8000aa4 <main+0x388>)
 8000962:	181b      	adds	r3, r3, r0
 8000964:	19db      	adds	r3, r3, r7
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	041b      	lsls	r3, r3, #16
 800096a:	431a      	orrs	r2, r3
 800096c:	4b4d      	ldr	r3, [pc, #308]	; (8000aa4 <main+0x388>)
 800096e:	181b      	adds	r3, r3, r0
 8000970:	19db      	adds	r3, r3, r7
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	061b      	lsls	r3, r3, #24
 8000976:	4313      	orrs	r3, r2
 8000978:	643b      	str	r3, [r7, #64]	; 0x40
				  wordCounter = 0;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

				  if(sector == 0) FlashTheGame(lastFourWord, sector, true);
 8000980:	22c1      	movs	r2, #193	; 0xc1
 8000982:	0052      	lsls	r2, r2, #1
 8000984:	18bb      	adds	r3, r7, r2
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d108      	bne.n	800099e <main+0x282>
 800098c:	18bb      	adds	r3, r7, r2
 800098e:	8819      	ldrh	r1, [r3, #0]
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	2201      	movs	r2, #1
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff fe40 	bl	800061c <FlashTheGame>
 800099c:	e009      	b.n	80009b2 <main+0x296>
				  else FlashTheGame(lastFourWord, sector, false);
 800099e:	23c1      	movs	r3, #193	; 0xc1
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	8819      	ldrh	r1, [r3, #0]
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	2200      	movs	r2, #0
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fe35 	bl	800061c <FlashTheGame>

				  sector++;
 80009b2:	21c1      	movs	r1, #193	; 0xc1
 80009b4:	0049      	lsls	r1, r1, #1
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	3201      	adds	r2, #1
 80009be:	801a      	strh	r2, [r3, #0]
				  itoa((int) i, percentLoad, 10);
 80009c0:	2450      	movs	r4, #80	; 0x50
 80009c2:	1939      	adds	r1, r7, r4
 80009c4:	23be      	movs	r3, #190	; 0xbe
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	220a      	movs	r2, #10
 80009ce:	0018      	movs	r0, r3
 80009d0:	f003 fe6e 	bl	80046b0 <itoa>
				  LCD_print(percentLoad, 0, 0);
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fc60 	bl	80012a0 <LCD_print>
		  for(j = 0; j < 64; j++)
 80009e0:	2182      	movs	r1, #130	; 0x82
 80009e2:	31ff      	adds	r1, #255	; 0xff
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	3201      	adds	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	2382      	movs	r3, #130	; 0x82
 80009f0:	33ff      	adds	r3, #255	; 0xff
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b3f      	cmp	r3, #63	; 0x3f
 80009f8:	d98b      	bls.n	8000912 <main+0x1f6>
			  }
		  }


		  if(CheckArrayIsEnd(buffer, endCheckArray, lastThree))
 80009fa:	234c      	movs	r3, #76	; 0x4c
 80009fc:	18fa      	adds	r2, r7, r3
 80009fe:	2348      	movs	r3, #72	; 0x48
 8000a00:	18f9      	adds	r1, r7, r3
 8000a02:	003b      	movs	r3, r7
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 f9f3 	bl	8000df0 <CheckArrayIsEnd>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d009      	beq.n	8000a22 <main+0x306>
		  {
			  printf("End on page %d \r\n", i);
 8000a0e:	23be      	movs	r3, #190	; 0xbe
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <main+0x38c>)
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f003 fe5e 	bl	80046dc <iprintf>
			  break;
 8000a20:	e01f      	b.n	8000a62 <main+0x346>
	  for(int i = 0; i < PAGE_NUM; i++)
 8000a22:	22be      	movs	r2, #190	; 0xbe
 8000a24:	0052      	lsls	r2, r2, #1
 8000a26:	18bb      	adds	r3, r7, r2
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	18ba      	adds	r2, r7, r2
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	23be      	movs	r3, #190	; 0xbe
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	da00      	bge.n	8000a42 <main+0x326>
 8000a40:	e757      	b.n	80008f2 <main+0x1d6>
 8000a42:	e00e      	b.n	8000a62 <main+0x346>
		  }
	  }
  }
  else
  {
	  printf("Reloading \r\n");
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <main+0x390>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f003 fed4 	bl	80047f4 <puts>
	  LCD_print("R", 0, 0);
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <main+0x394>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fc24 	bl	80012a0 <LCD_print>
	  HAL_Delay(2000);
 8000a58:	23fa      	movs	r3, #250	; 0xfa
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 ff05 	bl	800186c <HAL_Delay>
  }

  LoadFirmware();
 8000a62:	f000 f9a3 	bl	8000dac <LoadFirmware>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <main+0x34a>
 8000a68:	fffffed0 	.word	0xfffffed0
 8000a6c:	080058d0 	.word	0x080058d0
 8000a70:	08005858 	.word	0x08005858
 8000a74:	50000400 	.word	0x50000400
 8000a78:	08005870 	.word	0x08005870
 8000a7c:	2000008c 	.word	0x2000008c
 8000a80:	0800587c 	.word	0x0800587c
 8000a84:	08005898 	.word	0x08005898
 8000a88:	080058a8 	.word	0x080058a8
 8000a8c:	fffffec8 	.word	0xfffffec8
 8000a90:	fffffe78 	.word	0xfffffe78
 8000a94:	fffffec4 	.word	0xfffffec4
 8000a98:	080059f0 	.word	0x080059f0
 8000a9c:	fffffec0 	.word	0xfffffec0
 8000aa0:	080059f4 	.word	0x080059f4
 8000aa4:	fffffebc 	.word	0xfffffebc
 8000aa8:	080058ac 	.word	0x080058ac
 8000aac:	080058c0 	.word	0x080058c0
 8000ab0:	080058cc 	.word	0x080058cc

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b09f      	sub	sp, #124	; 0x7c
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	2440      	movs	r4, #64	; 0x40
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2338      	movs	r3, #56	; 0x38
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f003 fe00 	bl	80046ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aca:	232c      	movs	r3, #44	; 0x2c
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2314      	movs	r3, #20
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f003 fdf8 	bl	80046ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	0018      	movs	r0, r3
 8000ade:	2328      	movs	r3, #40	; 0x28
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f003 fdf1 	bl	80046ca <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <SystemClock_Config+0xd4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <SystemClock_Config+0xd8>)
 8000aee:	401a      	ands	r2, r3
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <SystemClock_Config+0xd4>)
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	0109      	lsls	r1, r1, #4
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000afa:	0021      	movs	r1, r4
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2210      	movs	r2, #16
 8000b00:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2201      	movs	r2, #1
 8000b06:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	22a0      	movs	r2, #160	; 0xa0
 8000b12:	0212      	lsls	r2, r2, #8
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f002 f8bc 	bl	8002c9c <HAL_RCC_OscConfig>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b28:	f000 f9b3 	bl	8000e92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	212c      	movs	r1, #44	; 0x2c
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	220f      	movs	r2, #15
 8000b32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2100      	movs	r1, #0
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fc77 	bl	8003444 <HAL_RCC_ClockConfig>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b5a:	f000 f99a 	bl	8000e92 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	220a      	movs	r2, #10
 8000b62:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 fe8a 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b7c:	f000 f989 	bl	8000e92 <Error_Handler>
  }
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b01f      	add	sp, #124	; 0x7c
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	40007000 	.word	0x40007000
 8000b8c:	ffffe7ff 	.word	0xffffe7ff

08000b90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000b96:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <MX_I2C1_Init+0x7c>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000b9c:	22e1      	movs	r2, #225	; 0xe1
 8000b9e:	00d2      	lsls	r2, r2, #3
 8000ba0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fafa 	bl	80021c8 <HAL_I2C_Init>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd8:	f000 f95b 	bl	8000e92 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 ffc3 	bl	8002b6c <HAL_I2CEx_ConfigAnalogFilter>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bea:	f000 f952 	bl	8000e92 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_I2C1_Init+0x78>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f002 f806 	bl	8002c04 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bfc:	f000 f949 	bl	8000e92 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	2000008c 	.word	0x2000008c
 8000c0c:	40005400 	.word	0x40005400

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <MX_USART2_UART_Init+0x5c>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c1c:	22e1      	movs	r2, #225	; 0xe1
 8000c1e:	0252      	lsls	r2, r2, #9
 8000c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f002 ff8d 	bl	8003b74 <HAL_UART_Init>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f000 f918 	bl	8000e92 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000d8 	.word	0x200000d8
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b08b      	sub	sp, #44	; 0x2c
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	2414      	movs	r4, #20
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	2314      	movs	r3, #20
 8000c7e:	001a      	movs	r2, r3
 8000c80:	2100      	movs	r1, #0
 8000c82:	f003 fd22 	bl	80046ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	2204      	movs	r2, #4
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	23a0      	movs	r3, #160	; 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 fa4c 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8000cf4:	4921      	ldr	r1, [pc, #132]	; (8000d7c <MX_GPIO_Init+0x10c>)
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_GPIO_Init+0x110>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fa46 	bl	800218c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	0192      	lsls	r2, r2, #6
 8000d06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2284      	movs	r2, #132	; 0x84
 8000d0c:	0392      	lsls	r2, r2, #14
 8000d0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <MX_GPIO_Init+0x114>)
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	0010      	movs	r0, r2
 8000d1e:	f001 f8b7 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2220      	movs	r2, #32
 8000d26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	193a      	adds	r2, r7, r4
 8000d3c:	23a0      	movs	r3, #160	; 0xa0
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 f8a4 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8000d48:	0021      	movs	r1, r4
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <MX_GPIO_Init+0x10c>)
 8000d4e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2201      	movs	r2, #1
 8000d54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <MX_GPIO_Init+0x110>)
 8000d66:	0019      	movs	r1, r3
 8000d68:	0010      	movs	r0, r2
 8000d6a:	f001 f891 	bl	8001e90 <HAL_GPIO_Init>

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b00b      	add	sp, #44	; 0x2c
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	0000e006 	.word	0x0000e006
 8000d80:	50000400 	.word	0x50000400
 8000d84:	50000800 	.word	0x50000800

08000d88 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
 8000d94:	1d39      	adds	r1, r7, #4
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <__io_putchar+0x20>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f002 ff3f 	bl	8003c1c <HAL_UART_Transmit>
  return ch;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000d8 	.word	0x200000d8

08000dac <LoadFirmware>:

static void LoadFirmware ( void )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
	printf("Loading firmware... \r\n");
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoadFirmware+0x38>)
 8000db4:	0018      	movs	r0, r3
 8000db6:	f003 fd1d 	bl	80047f4 <puts>

	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08008000 + 4U)));
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <LoadFirmware+0x3c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	607b      	str	r3, [r7, #4]
	//__set_MSP(*(volatile uint32_t*) 0x08007FFF);
	// Turn OFF the Green Led to tell the user that Bootloader is not running
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET );    //Green LED OFF
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 f9df 	bl	800218c <HAL_GPIO_WritePin>
	printf("Booting game... \r\n");
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <LoadFirmware+0x40>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f003 fd0f 	bl	80047f4 <puts>
	app_reset_handler();    //call the app reset handler
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4798      	blx	r3
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	080059f8 	.word	0x080059f8
 8000de8:	08008004 	.word	0x08008004
 8000dec:	08005a10 	.word	0x08005a10

08000df0 <CheckArrayIsEnd>:

bool CheckArrayIsEnd(uint8_t *_buffer, uint8_t *compareTo, uint8_t *lastThree)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	int x = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]

	bool equalArrays = false;
 8000e04:	2317      	movs	r3, #23
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]

	for(x = 0; x < PAGE_SIZE; x++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e033      	b.n	8000e7a <CheckArrayIsEnd+0x8a>
	{
	  	lastThree[0] = lastThree[1];
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	785a      	ldrb	r2, [r3, #1]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	701a      	strb	r2, [r3, #0]
	  	lastThree[1] = lastThree[2];
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	7892      	ldrb	r2, [r2, #2]
 8000e22:	701a      	strb	r2, [r3, #0]
	  	lastThree[2] = _buffer[x];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	18d2      	adds	r2, r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	7812      	ldrb	r2, [r2, #0]
 8000e30:	701a      	strb	r2, [r3, #0]

		equalArrays = true;
 8000e32:	2317      	movs	r3, #23
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
		for (y = 0; y < 3; y++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	e011      	b.n	8000e64 <CheckArrayIsEnd+0x74>
		{
		  if( lastThree[y] != compareTo[y] )
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	18d3      	adds	r3, r2, r3
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	18cb      	adds	r3, r1, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d004      	beq.n	8000e5e <CheckArrayIsEnd+0x6e>
		  {
			  equalArrays = false;
 8000e54:	2317      	movs	r3, #23
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
				break;
 8000e5c:	e005      	b.n	8000e6a <CheckArrayIsEnd+0x7a>
		for (y = 0; y < 3; y++)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	ddea      	ble.n	8000e40 <CheckArrayIsEnd+0x50>
		  }
		}

		if(equalArrays) break;
 8000e6a:	2317      	movs	r3, #23
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d106      	bne.n	8000e82 <CheckArrayIsEnd+0x92>
	for(x = 0; x < PAGE_SIZE; x++)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3301      	adds	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e7e:	ddc8      	ble.n	8000e12 <CheckArrayIsEnd+0x22>
 8000e80:	e000      	b.n	8000e84 <CheckArrayIsEnd+0x94>
		if(equalArrays) break;
 8000e82:	46c0      	nop			; (mov r8, r8)
	}

	return equalArrays;
 8000e84:	2317      	movs	r3, #23
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	781b      	ldrb	r3, [r3, #0]
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b008      	add	sp, #32
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e96:	b672      	cpsid	i
}
 8000e98:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <Error_Handler+0x8>

08000e9c <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	1cbb      	adds	r3, r7, #2
 8000ea8:	801a      	strh	r2, [r3, #0]
	lcd_gpio.RSTPORT = PORT;
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <LCD_setRST+0x24>)
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
	lcd_gpio.RSTPIN = PIN;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <LCD_setRST+0x24>)
 8000eb2:	1cba      	adds	r2, r7, #2
 8000eb4:	8812      	ldrh	r2, [r2, #0]
 8000eb6:	809a      	strh	r2, [r3, #4]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000358 	.word	0x20000358

08000ec4 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	000a      	movs	r2, r1
 8000ece:	1cbb      	adds	r3, r7, #2
 8000ed0:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CEPORT = PORT;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <LCD_setCE+0x24>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
	lcd_gpio.CEPIN = PIN;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <LCD_setCE+0x24>)
 8000eda:	1cba      	adds	r2, r7, #2
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	819a      	strh	r2, [r3, #12]
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000358 	.word	0x20000358

08000eec <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	1cbb      	adds	r3, r7, #2
 8000ef8:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DCPORT = PORT;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <LCD_setDC+0x24>)
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	611a      	str	r2, [r3, #16]
	lcd_gpio.DCPIN = PIN;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <LCD_setDC+0x24>)
 8000f02:	1cba      	adds	r2, r7, #2
 8000f04:	8812      	ldrh	r2, [r2, #0]
 8000f06:	829a      	strh	r2, [r3, #20]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000358 	.word	0x20000358

08000f14 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	1cbb      	adds	r3, r7, #2
 8000f20:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DINPORT = PORT;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <LCD_setDIN+0x24>)
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
	lcd_gpio.DINPIN = PIN;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <LCD_setDIN+0x24>)
 8000f2a:	1cba      	adds	r2, r7, #2
 8000f2c:	8812      	ldrh	r2, [r2, #0]
 8000f2e:	839a      	strh	r2, [r3, #28]
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000358 	.word	0x20000358

08000f3c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	000a      	movs	r2, r1
 8000f46:	1cbb      	adds	r3, r7, #2
 8000f48:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CLKPORT = PORT;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <LCD_setCLK+0x24>)
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	621a      	str	r2, [r3, #32]
	lcd_gpio.CLKPIN = PIN;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <LCD_setCLK+0x24>)
 8000f52:	1cba      	adds	r2, r7, #2
 8000f54:	8812      	ldrh	r2, [r2, #0]
 8000f56:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000358 	.word	0x20000358

08000f64 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	701a      	strb	r2, [r3, #0]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e029      	b.n	8000fce <LCD_send+0x6a>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <LCD_send+0x80>)
 8000f7c:	6998      	ldr	r0, [r3, #24]
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <LCD_send+0x80>)
 8000f80:	8b99      	ldrh	r1, [r3, #28]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	250f      	movs	r5, #15
 8000f88:	197b      	adds	r3, r7, r5
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2407      	movs	r4, #7
 8000f8e:	1ae3      	subs	r3, r4, r3
 8000f90:	411a      	asrs	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	2201      	movs	r2, #1
 8000f96:	4013      	ands	r3, r2
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	4193      	sbcs	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	f001 f8f4 	bl	800218c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <LCD_send+0x80>)
 8000fa6:	6a18      	ldr	r0, [r3, #32]
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <LCD_send+0x80>)
 8000faa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fac:	2201      	movs	r2, #1
 8000fae:	0019      	movs	r1, r3
 8000fb0:	f001 f8ec 	bl	800218c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <LCD_send+0x80>)
 8000fb6:	6a18      	ldr	r0, [r3, #32]
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <LCD_send+0x80>)
 8000fba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	f001 f8e4 	bl	800218c <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000fc4:	197b      	adds	r3, r7, r5
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	197b      	adds	r3, r7, r5
 8000fca:	3201      	adds	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d9d0      	bls.n	8000f7a <LCD_send+0x16>
  }
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	20000358 	.word	0x20000358

08000fe8 <LCD_draw>:

void LCD_draw(const unsigned char bitmap[], uint8_t x, uint8_t y, const uint8_t w, const uint8_t h) {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	1cfb      	adds	r3, r7, #3
 8000ff8:	1c22      	adds	r2, r4, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	1cbb      	adds	r3, r7, #2
 8000ffe:	1c02      	adds	r2, r0, #0
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	1c7b      	adds	r3, r7, #1
 8001004:	1c0a      	adds	r2, r1, #0
 8001006:	701a      	strb	r2, [r3, #0]

	uint8_t byteWidth = (w + 7) / 8;
 8001008:	1c7b      	adds	r3, r7, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3307      	adds	r3, #7
 800100e:	2b00      	cmp	r3, #0
 8001010:	da00      	bge.n	8001014 <LCD_draw+0x2c>
 8001012:	3307      	adds	r3, #7
 8001014:	10db      	asrs	r3, r3, #3
 8001016:	001a      	movs	r2, r3
 8001018:	230c      	movs	r3, #12
 800101a:	18fb      	adds	r3, r7, r3
 800101c:	701a      	strb	r2, [r3, #0]
	uint8_t byte = 0;
 800101e:	230f      	movs	r3, #15
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

	for (uint8_t j = 0; j < h; j++, y++)
 8001026:	230e      	movs	r3, #14
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e05e      	b.n	80010ee <LCD_draw+0x106>
	{
		for (uint8_t i = 0; i < w; i++)
 8001030:	230d      	movs	r3, #13
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e047      	b.n	80010ca <LCD_draw+0xe2>
		{
		  if (i & 7) byte <<= 1;
 800103a:	230d      	movs	r3, #13
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2207      	movs	r2, #7
 8001042:	4013      	ands	r3, r2
 8001044:	d006      	beq.n	8001054 <LCD_draw+0x6c>
 8001046:	230f      	movs	r3, #15
 8001048:	18fa      	adds	r2, r7, r3
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	18db      	adds	r3, r3, r3
 8001050:	7013      	strb	r3, [r2, #0]
 8001052:	e013      	b.n	800107c <LCD_draw+0x94>
		  else byte = bitmap[j * byteWidth + i / 8];
 8001054:	230e      	movs	r3, #14
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	220c      	movs	r2, #12
 800105c:	18ba      	adds	r2, r7, r2
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	4353      	muls	r3, r2
 8001062:	220d      	movs	r2, #13
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	08d2      	lsrs	r2, r2, #3
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	189b      	adds	r3, r3, r2
 800106e:	001a      	movs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	189a      	adds	r2, r3, r2
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	701a      	strb	r2, [r3, #0]
		  if (byte & 0x80) LCD_setPixel(x + i, y, false);
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	da0d      	bge.n	80010a4 <LCD_draw+0xbc>
 8001088:	1cfa      	adds	r2, r7, #3
 800108a:	230d      	movs	r3, #13
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	1cbb      	adds	r3, r7, #2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	0019      	movs	r1, r3
 800109e:	f000 f98f 	bl	80013c0 <LCD_setPixel>
 80010a2:	e00c      	b.n	80010be <LCD_draw+0xd6>
		  else LCD_setPixel(x + i, y, true);
 80010a4:	1cfa      	adds	r2, r7, #3
 80010a6:	230d      	movs	r3, #13
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	b2d8      	uxtb	r0, r3
 80010b2:	1cbb      	adds	r3, r7, #2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2201      	movs	r2, #1
 80010b8:	0019      	movs	r1, r3
 80010ba:	f000 f981 	bl	80013c0 <LCD_setPixel>
		for (uint8_t i = 0; i < w; i++)
 80010be:	210d      	movs	r1, #13
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	3201      	adds	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	230d      	movs	r3, #13
 80010cc:	18fa      	adds	r2, r7, r3
 80010ce:	1c7b      	adds	r3, r7, #1
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3b0      	bcc.n	800103a <LCD_draw+0x52>
	for (uint8_t j = 0; j < h; j++, y++)
 80010d8:	210e      	movs	r1, #14
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	3201      	adds	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	1cbb      	adds	r3, r7, #2
 80010e6:	781a      	ldrb	r2, [r3, #0]
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	3201      	adds	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	230e      	movs	r3, #14
 80010f0:	18fa      	adds	r2, r7, r3
 80010f2:	2320      	movs	r3, #32
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	7812      	ldrb	r2, [r2, #0]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d398      	bcc.n	8001030 <LCD_draw+0x48>
		}
	}
}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b005      	add	sp, #20
 8001106:	bd90      	pop	{r4, r7, pc}

08001108 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	1c0a      	adds	r2, r1, #0
 8001118:	701a      	strb	r2, [r3, #0]
  if(mode == LCD_COMMAND){
 800111a:	1dbb      	adds	r3, r7, #6
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d11d      	bne.n	800115e <LCD_write+0x56>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <LCD_write+0x98>)
 8001124:	6918      	ldr	r0, [r3, #16]
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <LCD_write+0x98>)
 8001128:	8a9b      	ldrh	r3, [r3, #20]
 800112a:	2200      	movs	r2, #0
 800112c:	0019      	movs	r1, r3
 800112e:	f001 f82d 	bl	800218c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <LCD_write+0x98>)
 8001134:	6898      	ldr	r0, [r3, #8]
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <LCD_write+0x98>)
 8001138:	899b      	ldrh	r3, [r3, #12]
 800113a:	2200      	movs	r2, #0
 800113c:	0019      	movs	r1, r3
 800113e:	f001 f825 	bl	800218c <HAL_GPIO_WritePin>
    LCD_send(data);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff ff0c 	bl	8000f64 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <LCD_write+0x98>)
 800114e:	6898      	ldr	r0, [r3, #8]
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <LCD_write+0x98>)
 8001152:	899b      	ldrh	r3, [r3, #12]
 8001154:	2201      	movs	r2, #1
 8001156:	0019      	movs	r1, r3
 8001158:	f001 f818 	bl	800218c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 800115c:	e01c      	b.n	8001198 <LCD_write+0x90>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <LCD_write+0x98>)
 8001160:	6918      	ldr	r0, [r3, #16]
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <LCD_write+0x98>)
 8001164:	8a9b      	ldrh	r3, [r3, #20]
 8001166:	2201      	movs	r2, #1
 8001168:	0019      	movs	r1, r3
 800116a:	f001 f80f 	bl	800218c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <LCD_write+0x98>)
 8001170:	6898      	ldr	r0, [r3, #8]
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <LCD_write+0x98>)
 8001174:	899b      	ldrh	r3, [r3, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	0019      	movs	r1, r3
 800117a:	f001 f807 	bl	800218c <HAL_GPIO_WritePin>
    LCD_send(data);
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff feee 	bl	8000f64 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <LCD_write+0x98>)
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <LCD_write+0x98>)
 800118e:	899b      	ldrh	r3, [r3, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	0019      	movs	r1, r3
 8001194:	f000 fffa 	bl	800218c <HAL_GPIO_WritePin>
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000358 	.word	0x20000358

080011a4 <LCD_init>:


/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <LCD_init+0x68>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <LCD_init+0x68>)
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	0019      	movs	r1, r3
 80011b4:	f000 ffea 	bl	800218c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <LCD_init+0x68>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <LCD_init+0x68>)
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	0019      	movs	r1, r3
 80011c4:	f000 ffe2 	bl	800218c <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 80011c8:	2100      	movs	r1, #0
 80011ca:	2021      	movs	r0, #33	; 0x21
 80011cc:	f7ff ff9c 	bl	8001108 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 80011d0:	2100      	movs	r1, #0
 80011d2:	20b8      	movs	r0, #184	; 0xb8
 80011d4:	f7ff ff98 	bl	8001108 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 80011d8:	2100      	movs	r1, #0
 80011da:	2004      	movs	r0, #4
 80011dc:	f7ff ff94 	bl	8001108 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80011e0:	2100      	movs	r1, #0
 80011e2:	2014      	movs	r0, #20
 80011e4:	f7ff ff90 	bl	8001108 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80011e8:	2100      	movs	r1, #0
 80011ea:	2020      	movs	r0, #32
 80011ec:	f7ff ff8c 	bl	8001108 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 80011f0:	2100      	movs	r1, #0
 80011f2:	200c      	movs	r0, #12
 80011f4:	f7ff ff88 	bl	8001108 <LCD_write>
  LCD_clrScr();
 80011f8:	f000 f878 	bl	80012ec <LCD_clrScr>
  lcd.inverttext = false;
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <LCD_init+0x6c>)
 80011fe:	23fc      	movs	r3, #252	; 0xfc
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2100      	movs	r1, #0
 8001204:	54d1      	strb	r1, [r2, r3]
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000358 	.word	0x20000358
 8001210:	2000015c 	.word	0x2000015c

08001214 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	0002      	movs	r2, r0
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e030      	b.n	8001288 <LCD_putChar+0x74>
    if(lcd.inverttext != true)
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <LCD_putChar+0x84>)
 8001228:	23fc      	movs	r3, #252	; 0xfc
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	2201      	movs	r2, #1
 8001230:	4053      	eors	r3, r2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d011      	beq.n	800125c <LCD_putChar+0x48>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b20      	subs	r3, #32
 800123e:	001a      	movs	r2, r3
 8001240:	4916      	ldr	r1, [pc, #88]	; (800129c <LCD_putChar+0x88>)
 8001242:	0013      	movs	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	189b      	adds	r3, r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	18ca      	adds	r2, r1, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	18d3      	adds	r3, r2, r3
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2101      	movs	r1, #1
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff57 	bl	8001108 <LCD_write>
 800125a:	e012      	b.n	8001282 <LCD_putChar+0x6e>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3b20      	subs	r3, #32
 8001262:	001a      	movs	r2, r3
 8001264:	490d      	ldr	r1, [pc, #52]	; (800129c <LCD_putChar+0x88>)
 8001266:	0013      	movs	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	189b      	adds	r3, r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	18ca      	adds	r2, r1, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	18d3      	adds	r3, r2, r3
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	43db      	mvns	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2101      	movs	r1, #1
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ff43 	bl	8001108 <LCD_write>
  for(int i = 0; i < 6; i++){
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b05      	cmp	r3, #5
 800128c:	ddcb      	ble.n	8001226 <LCD_putChar+0x12>
  }
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000015c 	.word	0x2000015c
 800129c:	08005a24 	.word	0x08005a24

080012a0 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	0008      	movs	r0, r1
 80012aa:	0011      	movs	r1, r2
 80012ac:	1cfb      	adds	r3, r7, #3
 80012ae:	1c02      	adds	r2, r0, #0
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	1cbb      	adds	r3, r7, #2
 80012b4:	1c0a      	adds	r2, r1, #0
 80012b6:	701a      	strb	r2, [r3, #0]
  LCD_goXY(x, y);
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	1cfb      	adds	r3, r7, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f830 	bl	8001328 <LCD_goXY>
  while(*str){
 80012c8:	e006      	b.n	80012d8 <LCD_print+0x38>
    LCD_putChar(*str++);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ff9e 	bl	8001214 <LCD_putChar>
  while(*str){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f4      	bne.n	80012ca <LCD_print+0x2a>
  }
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	e00b      	b.n	8001310 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 80012f8:	2101      	movs	r1, #1
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff ff04 	bl	8001108 <LCD_write>
    lcd.buffer[i] = 0;
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <LCD_clrScr+0x38>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	18d3      	adds	r3, r2, r3
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3301      	adds	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	23fc      	movs	r3, #252	; 0xfc
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	429a      	cmp	r2, r3
 8001318:	dbee      	blt.n	80012f8 <LCD_clrScr+0xc>
  }
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000015c 	.word	0x2000015c

08001328 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	0002      	movs	r2, r0
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	1dbb      	adds	r3, r7, #6
 8001336:	1c0a      	adds	r2, r1, #0
 8001338:	701a      	strb	r2, [r3, #0]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	4252      	negs	r2, r2
 8001342:	4313      	orrs	r3, r2
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2100      	movs	r1, #0
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fedd 	bl	8001108 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	4313      	orrs	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2100      	movs	r1, #0
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff fed4 	bl	8001108 <LCD_write>
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr(){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	2080      	movs	r0, #128	; 0x80
 8001372:	f7ff ffd9 	bl	8001328 <LCD_goXY>
  for(int i = 0; i < 6; i++){
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	e016      	b.n	80013aa <LCD_refreshScr+0x42>
    for(int j = 0; j < LCD_WIDTH; j++){
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	e00d      	b.n	800139e <LCD_refreshScr+0x36>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2254      	movs	r2, #84	; 0x54
 8001386:	435a      	muls	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	18d3      	adds	r3, r2, r3
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LCD_refreshScr+0x54>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	2101      	movs	r1, #1
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff feb8 	bl	8001108 <LCD_write>
    for(int j = 0; j < LCD_WIDTH; j++){
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2b53      	cmp	r3, #83	; 0x53
 80013a2:	ddee      	ble.n	8001382 <LCD_refreshScr+0x1a>
  for(int i = 0; i < 6; i++){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	dde5      	ble.n	800137c <LCD_refreshScr+0x14>
    }
  }
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	2000015c 	.word	0x2000015c

080013c0 <LCD_setPixel>:
}

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	0004      	movs	r4, r0
 80013c8:	0008      	movs	r0, r1
 80013ca:	0011      	movs	r1, r2
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	1c22      	adds	r2, r4, #0
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	1dbb      	adds	r3, r7, #6
 80013d4:	1c02      	adds	r2, r0, #0
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	1d7b      	adds	r3, r7, #5
 80013da:	1c0a      	adds	r2, r1, #0
 80013dc:	701a      	strb	r2, [r3, #0]
  if(x >= LCD_WIDTH)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b53      	cmp	r3, #83	; 0x53
 80013e4:	d902      	bls.n	80013ec <LCD_setPixel+0x2c>
    x = LCD_WIDTH - 1;
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	2253      	movs	r2, #83	; 0x53
 80013ea:	701a      	strb	r2, [r3, #0]
  if(y >= LCD_HEIGHT)
 80013ec:	1dbb      	adds	r3, r7, #6
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b2f      	cmp	r3, #47	; 0x2f
 80013f2:	d902      	bls.n	80013fa <LCD_setPixel+0x3a>
    y = LCD_HEIGHT - 1;
 80013f4:	1dbb      	adds	r3, r7, #6
 80013f6:	222f      	movs	r2, #47	; 0x2f
 80013f8:	701a      	strb	r2, [r3, #0]
    
  if(pixel != false){
 80013fa:	1d7b      	adds	r3, r7, #5
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d01f      	beq.n	8001442 <LCD_setPixel+0x82>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	1dbb      	adds	r3, r7, #6
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	b2d8      	uxtb	r0, r3
 800140e:	0001      	movs	r1, r0
 8001410:	2354      	movs	r3, #84	; 0x54
 8001412:	434b      	muls	r3, r1
 8001414:	18d3      	adds	r3, r2, r3
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <LCD_setPixel+0xcc>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	b25a      	sxtb	r2, r3
 800141c:	1dbb      	adds	r3, r7, #6
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2107      	movs	r1, #7
 8001422:	400b      	ands	r3, r1
 8001424:	2101      	movs	r1, #1
 8001426:	4099      	lsls	r1, r3
 8001428:	000b      	movs	r3, r1
 800142a:	b25b      	sxtb	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b259      	sxtb	r1, r3
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	2354      	movs	r3, #84	; 0x54
 8001436:	4343      	muls	r3, r0
 8001438:	18d3      	adds	r3, r2, r3
 800143a:	b2c9      	uxtb	r1, r1
 800143c:	4a13      	ldr	r2, [pc, #76]	; (800148c <LCD_setPixel+0xcc>)
 800143e:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8001440:	e020      	b.n	8001484 <LCD_setPixel+0xc4>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	1dbb      	adds	r3, r7, #6
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	0001      	movs	r1, r0
 8001450:	2354      	movs	r3, #84	; 0x54
 8001452:	434b      	muls	r3, r1
 8001454:	18d3      	adds	r3, r2, r3
 8001456:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LCD_setPixel+0xcc>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	1dba      	adds	r2, r7, #6
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	2107      	movs	r1, #7
 8001462:	400a      	ands	r2, r1
 8001464:	2101      	movs	r1, #1
 8001466:	4091      	lsls	r1, r2
 8001468:	000a      	movs	r2, r1
 800146a:	b252      	sxtb	r2, r2
 800146c:	43d2      	mvns	r2, r2
 800146e:	b252      	sxtb	r2, r2
 8001470:	4013      	ands	r3, r2
 8001472:	b259      	sxtb	r1, r3
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	2354      	movs	r3, #84	; 0x54
 800147a:	4343      	muls	r3, r0
 800147c:	18d3      	adds	r3, r2, r3
 800147e:	b2c9      	uxtb	r1, r1
 8001480:	4a02      	ldr	r2, [pc, #8]	; (800148c <LCD_setPixel+0xcc>)
 8001482:	54d1      	strb	r1, [r2, r3]
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b003      	add	sp, #12
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	2000015c 	.word	0x2000015c

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_MspInit+0x24>)
 8001496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_MspInit+0x24>)
 800149a:	2101      	movs	r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_MspInit+0x24>)
 80014a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_MspInit+0x24>)
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0549      	lsls	r1, r1, #21
 80014aa:	430a      	orrs	r2, r1
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	240c      	movs	r4, #12
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f003 f8fd 	bl	80046ca <memset>
  if(hi2c->Instance==I2C1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_I2C_MspInit+0x80>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12a      	bne.n	8001530 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_I2C_MspInit+0x84>)
 80014dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_I2C_MspInit+0x84>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_I2C_MspInit+0x84>)
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	22c0      	movs	r2, #192	; 0xc0
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fa:	0021      	movs	r1, r4
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2212      	movs	r2, #18
 8001500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2203      	movs	r2, #3
 800150c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2206      	movs	r2, #6
 8001512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	187a      	adds	r2, r7, r1
 8001516:	23a0      	movs	r3, #160	; 0xa0
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fcb7 	bl	8001e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_I2C_MspInit+0x84>)
 8001524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_I2C_MspInit+0x84>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0389      	lsls	r1, r1, #14
 800152c:	430a      	orrs	r2, r1
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b009      	add	sp, #36	; 0x24
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	40005400 	.word	0x40005400
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	240c      	movs	r4, #12
 800154a:	193b      	adds	r3, r7, r4
 800154c:	0018      	movs	r0, r3
 800154e:	2314      	movs	r3, #20
 8001550:	001a      	movs	r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	f003 f8b9 	bl	80046ca <memset>
  if(huart->Instance==USART2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_UART_MspInit+0x80>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d129      	bne.n	80015b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_UART_MspInit+0x84>)
 8001564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x84>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0289      	lsls	r1, r1, #10
 800156c:	430a      	orrs	r2, r1
 800156e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_UART_MspInit+0x84>)
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_UART_MspInit+0x84>)
 8001576:	2101      	movs	r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_UART_MspInit+0x84>)
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2201      	movs	r2, #1
 8001582:	4013      	ands	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001588:	0021      	movs	r1, r4
 800158a:	187b      	adds	r3, r7, r1
 800158c:	220c      	movs	r2, #12
 800158e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2202      	movs	r2, #2
 8001594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2203      	movs	r2, #3
 80015a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2204      	movs	r2, #4
 80015a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	187a      	adds	r2, r7, r1
 80015aa:	23a0      	movs	r3, #160	; 0xa0
 80015ac:	05db      	lsls	r3, r3, #23
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 fc6d 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b009      	add	sp, #36	; 0x24
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40021000 	.word	0x40021000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ec:	f000 f922 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e00a      	b.n	800161e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001608:	e000      	b.n	800160c <_read+0x16>
 800160a:	bf00      	nop
 800160c:	0001      	movs	r1, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	b2ca      	uxtb	r2, r1
 8001616:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	dbf0      	blt.n	8001608 <_read+0x12>
	}

return len;
 8001626:	687b      	ldr	r3, [r7, #4]
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b006      	add	sp, #24
 800162e:	bd80      	pop	{r7, pc}

08001630 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e009      	b.n	8001656 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0018      	movs	r0, r3
 800164c:	f7ff fb9c 	bl	8000d88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf1      	blt.n	8001642 <_write+0x12>
	}
	return len;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b006      	add	sp, #24
 8001666:	bd80      	pop	{r7, pc}

08001668 <_close>:

int _close(int file)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	return -1;
 8001670:	2301      	movs	r3, #1
 8001672:	425b      	negs	r3, r3
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	0192      	lsls	r2, r2, #6
 800168c:	605a      	str	r2, [r3, #4]
	return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}

08001698 <_isatty>:

int _isatty(int file)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
	return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b004      	add	sp, #16
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	18d3      	adds	r3, r2, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f002 ff9c 	bl	800462c <__errno>
 80016f4:	0003      	movs	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	425b      	negs	r3, r3
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	18d2      	adds	r2, r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b006      	add	sp, #24
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20005000 	.word	0x20005000
 8001720:	00000400 	.word	0x00000400
 8001724:	20000380 	.word	0x20000380
 8001728:	200003b0 	.word	0x200003b0

0800172c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:     ldr   r0, =_estack
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800173a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <LoopForever+0x6>)
  ldr r1, =_edata
 800173e:	490e      	ldr	r1, [pc, #56]	; (8001778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001740:	4a0e      	ldr	r2, [pc, #56]	; (800177c <LoopForever+0xe>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001754:	4c0b      	ldr	r4, [pc, #44]	; (8001784 <LoopForever+0x16>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001762:	f7ff ffe3 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f002 ff67 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7fe ffd7 	bl	800071c <main>

0800176e <LoopForever>:

LoopForever:
    b LoopForever
 800176e:	e7fe      	b.n	800176e <LoopForever>
Reset_Handler:     ldr   r0, =_estack
 8001770:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800177c:	08005da0 	.word	0x08005da0
  ldr r2, =_sbss
 8001780:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001784:	200003b0 	.word	0x200003b0

08001788 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_COMP_IRQHandler>
	...

0800178c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_Init+0x3c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Init+0x3c>)
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f811 	bl	80017cc <HAL_InitTick>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e001      	b.n	80017ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b6:	f7ff fe6b 	bl	8001490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40022000 	.word	0x40022000

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_InitTick+0x5c>)
 80017d6:	681c      	ldr	r4, [r3, #0]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_InitTick+0x60>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	0019      	movs	r1, r3
 80017de:	23fa      	movs	r3, #250	; 0xfa
 80017e0:	0098      	lsls	r0, r3, #2
 80017e2:	f7fe fc9b 	bl	800011c <__udivsi3>
 80017e6:	0003      	movs	r3, r0
 80017e8:	0019      	movs	r1, r3
 80017ea:	0020      	movs	r0, r4
 80017ec:	f7fe fc96 	bl	800011c <__udivsi3>
 80017f0:	0003      	movs	r3, r0
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 f905 	bl	8001a02 <HAL_SYSTICK_Config>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d001      	beq.n	8001800 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e00f      	b.n	8001820 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d80b      	bhi.n	800181e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2301      	movs	r3, #1
 800180a:	425b      	negs	r3, r3
 800180c:	2200      	movs	r2, #0
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f8e2 	bl	80019d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_InitTick+0x64>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b003      	add	sp, #12
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x1c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	001a      	movs	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	18d2      	adds	r2, r2, r3
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_IncTick+0x20>)
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	20000008 	.word	0x20000008
 8001854:	20000384 	.word	0x20000384

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	20000384 	.word	0x20000384

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fff0 	bl	8001858 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	001a      	movs	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	189b      	adds	r3, r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	f7ff ffe0 	bl	8001858 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	20000008 	.word	0x20000008

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	0002      	movs	r2, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b7f      	cmp	r3, #127	; 0x7f
 80018c8:	d828      	bhi.n	800191c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ca:	4a2f      	ldr	r2, [pc, #188]	; (8001988 <__NVIC_SetPriority+0xd4>)
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	33c0      	adds	r3, #192	; 0xc0
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	589b      	ldr	r3, [r3, r2]
 80018da:	1dfa      	adds	r2, r7, #7
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	0011      	movs	r1, r2
 80018e0:	2203      	movs	r2, #3
 80018e2:	400a      	ands	r2, r1
 80018e4:	00d2      	lsls	r2, r2, #3
 80018e6:	21ff      	movs	r1, #255	; 0xff
 80018e8:	4091      	lsls	r1, r2
 80018ea:	000a      	movs	r2, r1
 80018ec:	43d2      	mvns	r2, r2
 80018ee:	401a      	ands	r2, r3
 80018f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	401a      	ands	r2, r3
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	0018      	movs	r0, r3
 8001900:	2303      	movs	r3, #3
 8001902:	4003      	ands	r3, r0
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001908:	481f      	ldr	r0, [pc, #124]	; (8001988 <__NVIC_SetPriority+0xd4>)
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b25b      	sxtb	r3, r3
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	430a      	orrs	r2, r1
 8001914:	33c0      	adds	r3, #192	; 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800191a:	e031      	b.n	8001980 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191c:	4a1b      	ldr	r2, [pc, #108]	; (800198c <__NVIC_SetPriority+0xd8>)
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	0019      	movs	r1, r3
 8001924:	230f      	movs	r3, #15
 8001926:	400b      	ands	r3, r1
 8001928:	3b08      	subs	r3, #8
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3306      	adds	r3, #6
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	18d3      	adds	r3, r2, r3
 8001932:	3304      	adds	r3, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1dfa      	adds	r2, r7, #7
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	0011      	movs	r1, r2
 800193c:	2203      	movs	r2, #3
 800193e:	400a      	ands	r2, r1
 8001940:	00d2      	lsls	r2, r2, #3
 8001942:	21ff      	movs	r1, #255	; 0xff
 8001944:	4091      	lsls	r1, r2
 8001946:	000a      	movs	r2, r1
 8001948:	43d2      	mvns	r2, r2
 800194a:	401a      	ands	r2, r3
 800194c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	22ff      	movs	r2, #255	; 0xff
 8001954:	401a      	ands	r2, r3
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	0018      	movs	r0, r3
 800195c:	2303      	movs	r3, #3
 800195e:	4003      	ands	r3, r0
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <__NVIC_SetPriority+0xd8>)
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	001c      	movs	r4, r3
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	3b08      	subs	r3, #8
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	430a      	orrs	r2, r1
 8001976:	3306      	adds	r3, #6
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	18c3      	adds	r3, r0, r3
 800197c:	3304      	adds	r3, #4
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b003      	add	sp, #12
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	045b      	lsls	r3, r3, #17
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d301      	bcc.n	80019a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a4:	2301      	movs	r3, #1
 80019a6:	e010      	b.n	80019ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <SysTick_Config+0x44>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	3a01      	subs	r2, #1
 80019ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b0:	2301      	movs	r3, #1
 80019b2:	425b      	negs	r3, r3
 80019b4:	2103      	movs	r1, #3
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff ff7c 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x44>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x44>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	210f      	movs	r1, #15
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	1c02      	adds	r2, r0, #0
 80019e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	0011      	movs	r1, r2
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ffbf 	bl	8001990 <SysTick_Config>
 8001a12:	0003      	movs	r3, r0
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a28:	2317      	movs	r3, #23
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_FLASH_Program+0x70>)
 8001a32:	7c1b      	ldrb	r3, [r3, #16]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_FLASH_Program+0x20>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e022      	b.n	8001a82 <HAL_FLASH_Program+0x66>
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_FLASH_Program+0x70>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a42:	2517      	movs	r5, #23
 8001a44:	197c      	adds	r4, r7, r5
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_FLASH_Program+0x74>)
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f88b 	bl	8001b64 <FLASH_WaitForLastOperation>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001a52:	0029      	movs	r1, r5
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10c      	bne.n	8001a76 <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_FLASH_Program+0x70>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a68:	187c      	adds	r4, r7, r1
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_FLASH_Program+0x74>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f879 	bl	8001b64 <FLASH_WaitForLastOperation>
 8001a72:	0003      	movs	r3, r0
 8001a74:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_FLASH_Program+0x70>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	741a      	strb	r2, [r3, #16]

  return status;
 8001a7c:	2317      	movs	r3, #23
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b006      	add	sp, #24
 8001a88:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	20000388 	.word	0x20000388
 8001a90:	0000c350 	.word	0x0000c350

08001a94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d11a      	bne.n	8001adc <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8001aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8001aac:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8001aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_FLASH_Unlock+0x98>)
 8001ab8:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_FLASH_Unlock+0x9c>)
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f383 8810 	msr	PRIMASK, r3
}
 8001aca:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e021      	b.n	8001b20 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d11a      	bne.n	8001b1e <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8001aec:	607b      	str	r3, [r7, #4]
  return(result);
 8001aee:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8001af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001af2:	b672      	cpsid	i
}
 8001af4:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_FLASH_Unlock+0xa0>)
 8001afa:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_FLASH_Unlock+0xa4>)
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f383 8810 	msr	PRIMASK, r3
}
 8001b0c:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_FLASH_Unlock+0x94>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d101      	bne.n	8001b1e <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b006      	add	sp, #24
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40022000 	.word	0x40022000
 8001b2c:	89abcdef 	.word	0x89abcdef
 8001b30:	02030405 	.word	0x02030405
 8001b34:	8c9daebf 	.word	0x8c9daebf
 8001b38:	13141516 	.word	0x13141516

08001b3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_FLASH_Lock+0x24>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_FLASH_Lock+0x24>)
 8001b46:	2102      	movs	r1, #2
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_FLASH_Lock+0x24>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_FLASH_Lock+0x24>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40022000 	.word	0x40022000

08001b64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff fe74 	bl	8001858 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b74:	e00f      	b.n	8001b96 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	d00c      	beq.n	8001b96 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <FLASH_WaitForLastOperation+0x2e>
 8001b82:	f7ff fe69 	bl	8001858 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d201      	bcs.n	8001b96 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e052      	b.n	8001c3c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d0e9      	beq.n	8001b76 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d102      	bne.n	8001bb4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d035      	beq.n	8001c32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d02c      	beq.n	8001c32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001bda:	699a      	ldr	r2, [r3, #24]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d023      	beq.n	8001c32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d01a      	beq.n	8001c32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	019b      	lsls	r3, r3, #6
 8001c04:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d011      	beq.n	8001c32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	029b      	lsls	r3, r3, #10
 8001c16:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	029b      	lsls	r3, r3, #10
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d008      	beq.n	8001c32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <FLASH_WaitForLastOperation+0xe0>)
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	025b      	lsls	r3, r3, #9
 8001c28:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d103      	bne.n	8001c3a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8001c32:	f000 f809 	bl	8001c48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b004      	add	sp, #16
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40022000 	.word	0x40022000

08001c48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10a      	bne.n	8001c7a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c64:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001c6e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	4313      	orrs	r3, r2
 8001c78:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	401a      	ands	r2, r3
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10a      	bne.n	8001ca2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	2201      	movs	r2, #1
 8001c92:	431a      	orrs	r2, r3
 8001c94:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001c96:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	401a      	ands	r2, r3
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10a      	bne.n	8001cca <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	2208      	movs	r2, #8
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001cbe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	00d2      	lsls	r2, r2, #3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d10a      	bne.n	8001cf2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001ce6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001cf2:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	019b      	lsls	r3, r3, #6
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10a      	bne.n	8001d1a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	2210      	movs	r2, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001d0e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	0192      	lsls	r2, r2, #6
 8001d16:	4313      	orrs	r3, r2
 8001d18:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	401a      	ands	r2, r3
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d109      	bne.n	8001d40 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	2220      	movs	r2, #32
 8001d32:	431a      	orrs	r2, r3
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001d36:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	025b      	lsls	r3, r3, #9
 8001d48:	401a      	ands	r2, r3
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d10a      	bne.n	8001d68 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <FLASH_SetErrorCode+0x134>)
 8001d5c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0252      	lsls	r2, r2, #9
 8001d64:	4313      	orrs	r3, r2
 8001d66:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <FLASH_SetErrorCode+0x130>)
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	619a      	str	r2, [r3, #24]
}  
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b002      	add	sp, #8
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	20000388 	.word	0x20000388

08001d80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_FLASHEx_Erase+0xbc>)
 8001d98:	7c1b      	ldrb	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_FLASHEx_Erase+0x22>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e048      	b.n	8001e34 <HAL_FLASHEx_Erase+0xb4>
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_FLASHEx_Erase+0xbc>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001da8:	250f      	movs	r5, #15
 8001daa:	197c      	adds	r4, r7, r5
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_FLASHEx_Erase+0xc0>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff fed8 	bl	8001b64 <FLASH_WaitForLastOperation>
 8001db4:	0003      	movs	r3, r0
 8001db6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001db8:	197b      	adds	r3, r7, r5
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d133      	bne.n	8001e28 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4252      	negs	r2, r2
 8001dc6:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	e022      	b.n	8001e16 <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f83a 	bl	8001e4c <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001dd8:	250f      	movs	r5, #15
 8001dda:	197c      	adds	r4, r7, r5
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_FLASHEx_Erase+0xc0>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7ff fec0 	bl	8001b64 <FLASH_WaitForLastOperation>
 8001de4:	0003      	movs	r3, r0
 8001de6:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_FLASHEx_Erase+0xc4>)
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_FLASHEx_Erase+0xc4>)
 8001dee:	2108      	movs	r1, #8
 8001df0:	438a      	bics	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_FLASHEx_Erase+0xc4>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_FLASHEx_Erase+0xc4>)
 8001dfa:	4913      	ldr	r1, [pc, #76]	; (8001e48 <HAL_FLASHEx_Erase+0xc8>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8001e00:	197b      	adds	r3, r7, r5
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	601a      	str	r2, [r3, #0]
        break;
 8001e0e:	e00b      	b.n	8001e28 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3380      	adds	r3, #128	; 0x80
 8001e14:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	01da      	lsls	r2, r3, #7
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3d3      	bcc.n	8001dd0 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_FLASHEx_Erase+0xbc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	741a      	strb	r2, [r3, #16]

  return status;
 8001e2e:	230f      	movs	r3, #15
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781b      	ldrb	r3, [r3, #0]
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3c:	20000388 	.word	0x20000388
 8001e40:	0000c350 	.word	0x0000c350
 8001e44:	40022000 	.word	0x40022000
 8001e48:	fffffdff 	.word	0xfffffdff

08001e4c <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <FLASH_PageErase+0x3c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <FLASH_PageErase+0x40>)
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <FLASH_PageErase+0x40>)
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0089      	lsls	r1, r1, #2
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <FLASH_PageErase+0x40>)
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <FLASH_PageErase+0x40>)
 8001e6e:	2108      	movs	r1, #8
 8001e70:	430a      	orrs	r2, r1
 8001e72:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	227f      	movs	r2, #127	; 0x7f
 8001e78:	4393      	bics	r3, r2
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	20000388 	.word	0x20000388
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ea6:	e155      	b.n	8002154 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4091      	lsls	r1, r2
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d100      	bne.n	8001ec0 <HAL_GPIO_Init+0x30>
 8001ebe:	e146      	b.n	800214e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d005      	beq.n	8001ed8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d130      	bne.n	8001f3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0e:	2201      	movs	r2, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	43da      	mvns	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	2201      	movs	r2, #1
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d017      	beq.n	8001f76 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d123      	bne.n	8001fca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	58d3      	ldr	r3, [r2, r3]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2207      	movs	r2, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2107      	movs	r1, #7
 8001fae:	400b      	ands	r3, r1
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	6939      	ldr	r1, [r7, #16]
 8001fc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	0013      	movs	r3, r2
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	401a      	ands	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	23c0      	movs	r3, #192	; 0xc0
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	4013      	ands	r3, r2
 8002008:	d100      	bne.n	800200c <HAL_GPIO_Init+0x17c>
 800200a:	e0a0      	b.n	800214e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200c:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_GPIO_Init+0x2dc>)
 800200e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002010:	4b56      	ldr	r3, [pc, #344]	; (800216c <HAL_GPIO_Init+0x2dc>)
 8002012:	2101      	movs	r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002018:	4a55      	ldr	r2, [pc, #340]	; (8002170 <HAL_GPIO_Init+0x2e0>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	589b      	ldr	r3, [r3, r2]
 8002024:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2203      	movs	r2, #3
 800202a:	4013      	ands	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	43da      	mvns	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	23a0      	movs	r3, #160	; 0xa0
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	429a      	cmp	r2, r3
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_Init+0x1f6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4a      	ldr	r2, [pc, #296]	; (8002174 <HAL_GPIO_Init+0x2e4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x1f2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a49      	ldr	r2, [pc, #292]	; (8002178 <HAL_GPIO_Init+0x2e8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x1ee>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a48      	ldr	r2, [pc, #288]	; (800217c <HAL_GPIO_Init+0x2ec>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x1ea>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a47      	ldr	r2, [pc, #284]	; (8002180 <HAL_GPIO_Init+0x2f0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x1e6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a46      	ldr	r2, [pc, #280]	; (8002184 <HAL_GPIO_Init+0x2f4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x1e2>
 800206e:	2305      	movs	r3, #5
 8002070:	e00a      	b.n	8002088 <HAL_GPIO_Init+0x1f8>
 8002072:	2306      	movs	r3, #6
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x1f8>
 8002076:	2304      	movs	r3, #4
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x1f8>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x1f8>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x1f8>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x1f8>
 8002086:	2300      	movs	r3, #0
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	2103      	movs	r1, #3
 800208c:	400a      	ands	r2, r1
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4935      	ldr	r1, [pc, #212]	; (8002170 <HAL_GPIO_Init+0x2e0>)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	025b      	lsls	r3, r3, #9
 80020be:	4013      	ands	r3, r2
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020ca:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43da      	mvns	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	029b      	lsls	r3, r3, #10
 80020e8:	4013      	ands	r3, r2
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43da      	mvns	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	035b      	lsls	r3, r3, #13
 8002112:	4013      	ands	r3, r2
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43da      	mvns	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	039b      	lsls	r3, r3, #14
 800213c:	4013      	ands	r3, r2
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	40da      	lsrs	r2, r3
 800215c:	1e13      	subs	r3, r2, #0
 800215e:	d000      	beq.n	8002162 <HAL_GPIO_Init+0x2d2>
 8002160:	e6a2      	b.n	8001ea8 <HAL_GPIO_Init+0x18>
  }
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b006      	add	sp, #24
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	50000400 	.word	0x50000400
 8002178:	50000800 	.word	0x50000800
 800217c:	50000c00 	.word	0x50000c00
 8002180:	50001000 	.word	0x50001000
 8002184:	50001c00 	.word	0x50001c00
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	0008      	movs	r0, r1
 8002196:	0011      	movs	r1, r2
 8002198:	1cbb      	adds	r3, r7, #2
 800219a:	1c02      	adds	r2, r0, #0
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	1c7b      	adds	r3, r7, #1
 80021a0:	1c0a      	adds	r2, r1, #0
 80021a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a4:	1c7b      	adds	r3, r7, #1
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ac:	1cbb      	adds	r3, r7, #2
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80021b4:	e003      	b.n	80021be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80021b6:	1cbb      	adds	r3, r7, #2
 80021b8:	881a      	ldrh	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e082      	b.n	80022e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2241      	movs	r2, #65	; 0x41
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff f961 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2241      	movs	r2, #65	; 0x41
 80021fa:	2124      	movs	r1, #36	; 0x24
 80021fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	438a      	bics	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4934      	ldr	r1, [pc, #208]	; (80022e8 <HAL_I2C_Init+0x120>)
 8002218:	400a      	ands	r2, r1
 800221a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4931      	ldr	r1, [pc, #196]	; (80022ec <HAL_I2C_Init+0x124>)
 8002228:	400a      	ands	r2, r1
 800222a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0209      	lsls	r1, r1, #8
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e007      	b.n	8002256 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2184      	movs	r1, #132	; 0x84
 8002250:	0209      	lsls	r1, r1, #8
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d104      	bne.n	8002268 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	491f      	ldr	r1, [pc, #124]	; (80022f0 <HAL_I2C_Init+0x128>)
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	491a      	ldr	r1, [pc, #104]	; (80022ec <HAL_I2C_Init+0x124>)
 8002284:	400a      	ands	r2, r1
 8002286:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	431a      	orrs	r2, r3
 8002292:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69d9      	ldr	r1, [r3, #28]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2241      	movs	r2, #65	; 0x41
 80022cc:	2120      	movs	r1, #32
 80022ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2242      	movs	r2, #66	; 0x42
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	f0ffffff 	.word	0xf0ffffff
 80022ec:	ffff7fff 	.word	0xffff7fff
 80022f0:	02008000 	.word	0x02008000

080022f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	000c      	movs	r4, r1
 80022fe:	0010      	movs	r0, r2
 8002300:	0019      	movs	r1, r3
 8002302:	230a      	movs	r3, #10
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	1c22      	adds	r2, r4, #0
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	2308      	movs	r3, #8
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	1c02      	adds	r2, r0, #0
 8002310:	801a      	strh	r2, [r3, #0]
 8002312:	1dbb      	adds	r3, r7, #6
 8002314:	1c0a      	adds	r2, r1, #0
 8002316:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2241      	movs	r2, #65	; 0x41
 800231c:	5c9b      	ldrb	r3, [r3, r2]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d000      	beq.n	8002326 <HAL_I2C_Mem_Read+0x32>
 8002324:	e110      	b.n	8002548 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_I2C_Mem_Read+0x42>
 800232c:	232c      	movs	r3, #44	; 0x2c
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e103      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2C_Mem_Read+0x5c>
 800234c:	2302      	movs	r3, #2
 800234e:	e0fc      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	2101      	movs	r1, #1
 8002356:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002358:	f7ff fa7e 	bl	8001858 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	0219      	lsls	r1, r3, #8
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2319      	movs	r3, #25
 800236c:	2201      	movs	r2, #1
 800236e:	f000 fa93 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002372:	1e03      	subs	r3, r0, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0e7      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	2122      	movs	r1, #34	; 0x22
 8002380:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2242      	movs	r2, #66	; 0x42
 8002386:	2140      	movs	r1, #64	; 0x40
 8002388:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	222c      	movs	r2, #44	; 0x2c
 800239a:	18ba      	adds	r2, r7, r2
 800239c:	8812      	ldrh	r2, [r2, #0]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a6:	1dbb      	adds	r3, r7, #6
 80023a8:	881c      	ldrh	r4, [r3, #0]
 80023aa:	2308      	movs	r3, #8
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	881a      	ldrh	r2, [r3, #0]
 80023b0:	230a      	movs	r3, #10
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	8819      	ldrh	r1, [r3, #0]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0023      	movs	r3, r4
 80023c2:	f000 f9e5 	bl	8002790 <I2C_RequestMemoryRead>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0b9      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2bff      	cmp	r3, #255	; 0xff
 80023de:	d911      	bls.n	8002404 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	045c      	lsls	r4, r3, #17
 80023f0:	230a      	movs	r3, #10
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	8819      	ldrh	r1, [r3, #0]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	4b56      	ldr	r3, [pc, #344]	; (8002554 <HAL_I2C_Mem_Read+0x260>)
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	0023      	movs	r3, r4
 80023fe:	f000 fb7f 	bl	8002b00 <I2C_TransferConfig>
 8002402:	e012      	b.n	800242a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	b2da      	uxtb	r2, r3
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	049c      	lsls	r4, r3, #18
 8002418:	230a      	movs	r3, #10
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	8819      	ldrh	r1, [r3, #0]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_I2C_Mem_Read+0x260>)
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	0023      	movs	r3, r4
 8002426:	f000 fb6b 	bl	8002b00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	0013      	movs	r3, r2
 8002434:	2200      	movs	r2, #0
 8002436:	2104      	movs	r1, #4
 8002438:	f000 fa2e 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 800243c:	1e03      	subs	r3, r0, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e082      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03a      	beq.n	80024f6 <HAL_I2C_Mem_Read+0x202>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d136      	bne.n	80024f6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	0013      	movs	r3, r2
 8002492:	2200      	movs	r2, #0
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	f000 f9ff 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e053      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2bff      	cmp	r3, #255	; 0xff
 80024aa:	d911      	bls.n	80024d0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	22ff      	movs	r2, #255	; 0xff
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	045c      	lsls	r4, r3, #17
 80024bc:	230a      	movs	r3, #10
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	8819      	ldrh	r1, [r3, #0]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	0023      	movs	r3, r4
 80024ca:	f000 fb19 	bl	8002b00 <I2C_TransferConfig>
 80024ce:	e012      	b.n	80024f6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	049c      	lsls	r4, r3, #18
 80024e4:	230a      	movs	r3, #10
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	8819      	ldrh	r1, [r3, #0]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	0023      	movs	r3, r4
 80024f2:	f000 fb05 	bl	8002b00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d194      	bne.n	800242a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fa44 	bl	8002994 <I2C_WaitOnSTOPFlagUntilTimeout>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e01a      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2220      	movs	r2, #32
 800251a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	490c      	ldr	r1, [pc, #48]	; (8002558 <HAL_I2C_Mem_Read+0x264>)
 8002528:	400a      	ands	r2, r1
 800252a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2241      	movs	r2, #65	; 0x41
 8002530:	2120      	movs	r1, #32
 8002532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2242      	movs	r2, #66	; 0x42
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	2100      	movs	r1, #0
 8002542:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b007      	add	sp, #28
 8002550:	bd90      	pop	{r4, r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	80002400 	.word	0x80002400
 8002558:	fe00e800 	.word	0xfe00e800

0800255c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	230a      	movs	r3, #10
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	1c0a      	adds	r2, r1, #0
 800256e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2241      	movs	r2, #65	; 0x41
 8002578:	5c9b      	ldrb	r3, [r3, r2]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d000      	beq.n	8002582 <HAL_I2C_IsDeviceReady+0x26>
 8002580:	e0fe      	b.n	8002780 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	401a      	ands	r2, r3
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	429a      	cmp	r2, r3
 8002594:	d101      	bne.n	800259a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	e0f3      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2C_IsDeviceReady+0x4c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0ec      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2241      	movs	r2, #65	; 0x41
 80025b4:	2124      	movs	r1, #36	; 0x24
 80025b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_I2C_IsDeviceReady+0x7a>
 80025c6:	230a      	movs	r3, #10
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	059b      	lsls	r3, r3, #22
 80025ce:	0d9b      	lsrs	r3, r3, #22
 80025d0:	4a6e      	ldr	r2, [pc, #440]	; (800278c <HAL_I2C_IsDeviceReady+0x230>)
 80025d2:	431a      	orrs	r2, r3
 80025d4:	e007      	b.n	80025e6 <HAL_I2C_IsDeviceReady+0x8a>
 80025d6:	230a      	movs	r3, #10
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	059b      	lsls	r3, r3, #22
 80025de:	0d9b      	lsrs	r3, r3, #22
 80025e0:	22a0      	movs	r2, #160	; 0xa0
 80025e2:	0192      	lsls	r2, r2, #6
 80025e4:	431a      	orrs	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80025ec:	f7ff f934 	bl	8001858 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2220      	movs	r2, #32
 80025fc:	4013      	ands	r3, r2
 80025fe:	3b20      	subs	r3, #32
 8002600:	425a      	negs	r2, r3
 8002602:	4153      	adcs	r3, r2
 8002604:	b2da      	uxtb	r2, r3
 8002606:	231f      	movs	r3, #31
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2210      	movs	r2, #16
 8002614:	4013      	ands	r3, r2
 8002616:	3b10      	subs	r3, #16
 8002618:	425a      	negs	r2, r3
 800261a:	4153      	adcs	r3, r2
 800261c:	b2da      	uxtb	r2, r3
 800261e:	231e      	movs	r3, #30
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002624:	e035      	b.n	8002692 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	d01a      	beq.n	8002662 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800262c:	f7ff f914 	bl	8001858 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d302      	bcc.n	8002642 <HAL_I2C_IsDeviceReady+0xe6>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2241      	movs	r2, #65	; 0x41
 8002646:	2120      	movs	r1, #32
 8002648:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	2220      	movs	r2, #32
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e08f      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2220      	movs	r2, #32
 800266a:	4013      	ands	r3, r2
 800266c:	3b20      	subs	r3, #32
 800266e:	425a      	negs	r2, r3
 8002670:	4153      	adcs	r3, r2
 8002672:	b2da      	uxtb	r2, r3
 8002674:	231f      	movs	r3, #31
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2210      	movs	r2, #16
 8002682:	4013      	ands	r3, r2
 8002684:	3b10      	subs	r3, #16
 8002686:	425a      	negs	r2, r3
 8002688:	4153      	adcs	r3, r2
 800268a:	b2da      	uxtb	r2, r3
 800268c:	231e      	movs	r3, #30
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002692:	231f      	movs	r3, #31
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_I2C_IsDeviceReady+0x14a>
 800269c:	231e      	movs	r3, #30
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0bf      	beq.n	8002626 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2210      	movs	r2, #16
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d01a      	beq.n	80026ea <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	0013      	movs	r3, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	2120      	movs	r1, #32
 80026c2:	f000 f8e9 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e059      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2220      	movs	r2, #32
 80026d4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2241      	movs	r2, #65	; 0x41
 80026da:	2120      	movs	r1, #32
 80026dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2240      	movs	r2, #64	; 0x40
 80026e2:	2100      	movs	r1, #0
 80026e4:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e04b      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	0013      	movs	r3, r2
 80026f4:	2200      	movs	r2, #0
 80026f6:	2120      	movs	r1, #32
 80026f8:	f000 f8ce 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e03e      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2220      	movs	r2, #32
 8002712:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d119      	bne.n	8002750 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	01c9      	lsls	r1, r1, #7
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	0013      	movs	r3, r2
 8002738:	2200      	movs	r2, #0
 800273a:	2120      	movs	r1, #32
 800273c:	f000 f8ac 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01c      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2220      	movs	r2, #32
 800274e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	d900      	bls.n	8002760 <HAL_I2C_IsDeviceReady+0x204>
 800275e:	e72e      	b.n	80025be <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2241      	movs	r2, #65	; 0x41
 8002764:	2120      	movs	r1, #32
 8002766:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	2220      	movs	r2, #32
 800276e:	431a      	orrs	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	2100      	movs	r1, #0
 800277a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b008      	add	sp, #32
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	02002000 	.word	0x02002000

08002790 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	000c      	movs	r4, r1
 800279a:	0010      	movs	r0, r2
 800279c:	0019      	movs	r1, r3
 800279e:	250a      	movs	r5, #10
 80027a0:	197b      	adds	r3, r7, r5
 80027a2:	1c22      	adds	r2, r4, #0
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	2308      	movs	r3, #8
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	1dbb      	adds	r3, r7, #6
 80027b0:	1c0a      	adds	r2, r1, #0
 80027b2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	197b      	adds	r3, r7, r5
 80027bc:	8819      	ldrh	r1, [r3, #0]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <I2C_RequestMemoryRead+0xc0>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	f000 f99b 	bl	8002b00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6a39      	ldr	r1, [r7, #32]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 f8a0 	bl	8002916 <I2C_WaitOnTXISFlagUntilTimeout>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e033      	b.n	8002846 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027de:	1dbb      	adds	r3, r7, #6
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e6:	2308      	movs	r3, #8
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
 80027f4:	e019      	b.n	800282a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027f6:	2308      	movs	r3, #8
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	6a39      	ldr	r1, [r7, #32]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f881 	bl	8002916 <I2C_WaitOnTXISFlagUntilTimeout>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d001      	beq.n	800281c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e014      	b.n	8002846 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800281c:	2308      	movs	r3, #8
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800282a:	6a3a      	ldr	r2, [r7, #32]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	0013      	movs	r3, r2
 8002834:	2200      	movs	r2, #0
 8002836:	2140      	movs	r1, #64	; 0x40
 8002838:	f000 f82e 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bdb0      	pop	{r4, r5, r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	80002000 	.word	0x80002000

08002854 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d103      	bne.n	8002872 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2201      	movs	r2, #1
 800287a:	4013      	ands	r3, r2
 800287c:	2b01      	cmp	r3, #1
 800287e:	d007      	beq.n	8002890 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	430a      	orrs	r2, r1
 800288e:	619a      	str	r2, [r3, #24]
  }
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a8:	e021      	b.n	80028ee <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	d01e      	beq.n	80028ee <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b0:	f7fe ffd2 	bl	8001858 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d113      	bne.n	80028ee <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	2220      	movs	r2, #32
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2241      	movs	r2, #65	; 0x41
 80028d6:	2120      	movs	r1, #32
 80028d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2242      	movs	r2, #66	; 0x42
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	425a      	negs	r2, r3
 80028fe:	4153      	adcs	r3, r2
 8002900:	b2db      	uxtb	r3, r3
 8002902:	001a      	movs	r2, r3
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d0ce      	beq.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}

08002916 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002922:	e02b      	b.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f86e 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 8002930:	1e03      	subs	r3, r0, #0
 8002932:	d001      	beq.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e029      	b.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3301      	adds	r3, #1
 800293c:	d01e      	beq.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7fe ff8b 	bl	8001858 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d113      	bne.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	2220      	movs	r2, #32
 800295a:	431a      	orrs	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2241      	movs	r2, #65	; 0x41
 8002964:	2120      	movs	r1, #32
 8002966:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2242      	movs	r2, #66	; 0x42
 800296c:	2100      	movs	r1, #0
 800296e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2240      	movs	r2, #64	; 0x40
 8002974:	2100      	movs	r1, #0
 8002976:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d1cc      	bne.n	8002924 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a0:	e028      	b.n	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 f82f 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 80029ae:	1e03      	subs	r3, r0, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e026      	b.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7fe ff4f 	bl	8001858 <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d113      	bne.n	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	2220      	movs	r2, #32
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2241      	movs	r2, #65	; 0x41
 80029dc:	2120      	movs	r1, #32
 80029de:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2242      	movs	r2, #66	; 0x42
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2220      	movs	r2, #32
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d1cf      	bne.n	80029a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b004      	add	sp, #16
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d164      	bne.n	8002af0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	049b      	lsls	r3, r3, #18
 8002a30:	401a      	ands	r2, r3
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	049b      	lsls	r3, r3, #18
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d02b      	beq.n	8002a92 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	01c9      	lsls	r1, r1, #7
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a4c:	e021      	b.n	8002a92 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3301      	adds	r3, #1
 8002a52:	d01e      	beq.n	8002a92 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a54:	f7fe ff00 	bl	8001858 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d302      	bcc.n	8002a6a <I2C_IsAcknowledgeFailed+0x5e>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d113      	bne.n	8002a92 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	2220      	movs	r2, #32
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2241      	movs	r2, #65	; 0x41
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2242      	movs	r2, #66	; 0x42
 8002a82:	2100      	movs	r1, #0
 8002a84:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2240      	movs	r2, #64	; 0x40
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e02f      	b.n	8002af2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d1d6      	bne.n	8002a4e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2220      	movs	r2, #32
 8002aae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7ff fece 	bl	8002854 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	490e      	ldr	r1, [pc, #56]	; (8002afc <I2C_IsAcknowledgeFailed+0xf0>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	2204      	movs	r2, #4
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2241      	movs	r2, #65	; 0x41
 8002ad8:	2120      	movs	r1, #32
 8002ada:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2242      	movs	r2, #66	; 0x42
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2240      	movs	r2, #64	; 0x40
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	0008      	movs	r0, r1
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	240a      	movs	r4, #10
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	1c02      	adds	r2, r0, #0
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	2009      	movs	r0, #9
 8002b18:	183b      	adds	r3, r7, r0
 8002b1a:	1c0a      	adds	r2, r1, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	6a3a      	ldr	r2, [r7, #32]
 8002b26:	0d51      	lsrs	r1, r2, #21
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	00d2      	lsls	r2, r2, #3
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	490e      	ldr	r1, [pc, #56]	; (8002b68 <I2C_TransferConfig+0x68>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	43d2      	mvns	r2, r2
 8002b34:	401a      	ands	r2, r3
 8002b36:	0011      	movs	r1, r2
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	059b      	lsls	r3, r3, #22
 8002b3e:	0d9a      	lsrs	r2, r3, #22
 8002b40:	183b      	adds	r3, r7, r0
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	0418      	lsls	r0, r3, #16
 8002b46:	23ff      	movs	r3, #255	; 0xff
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	4003      	ands	r3, r0
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b005      	add	sp, #20
 8002b64:	bd90      	pop	{r4, r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	03ff63ff 	.word	0x03ff63ff

08002b6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2241      	movs	r2, #65	; 0x41
 8002b7a:	5c9b      	ldrb	r3, [r3, r2]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d138      	bne.n	8002bf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2240      	movs	r2, #64	; 0x40
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e032      	b.n	8002bf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2241      	movs	r2, #65	; 0x41
 8002b9c:	2124      	movs	r1, #36	; 0x24
 8002b9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	438a      	bics	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4911      	ldr	r1, [pc, #68]	; (8002c00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2241      	movs	r2, #65	; 0x41
 8002be4:	2120      	movs	r1, #32
 8002be6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	2100      	movs	r1, #0
 8002bee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	ffffefff 	.word	0xffffefff

08002c04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2241      	movs	r2, #65	; 0x41
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d139      	bne.n	8002c8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	5c9b      	ldrb	r3, [r3, r2]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e033      	b.n	8002c90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2241      	movs	r2, #65	; 0x41
 8002c34:	2124      	movs	r1, #36	; 0x24
 8002c36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2241      	movs	r2, #65	; 0x41
 8002c7e:	2120      	movs	r1, #32
 8002c80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2240      	movs	r2, #64	; 0x40
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fffff0ff 	.word	0xfffff0ff

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f000 fbbf 	bl	800342e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4bc9      	ldr	r3, [pc, #804]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	220c      	movs	r2, #12
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cba:	4bc7      	ldr	r3, [pc, #796]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	025b      	lsls	r3, r3, #9
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x36>
 8002cd0:	e07e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x68>
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	025b      	lsls	r3, r3, #9
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4bbb      	ldr	r3, [pc, #748]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x5a>
 8002cf4:	e06b      	b.n	8002dce <HAL_RCC_OscConfig+0x132>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d167      	bne.n	8002dce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f000 fb95 	bl	800342e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_OscConfig+0x84>
 8002d10:	4bb1      	ldr	r3, [pc, #708]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4bb0      	ldr	r3, [pc, #704]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	0249      	lsls	r1, r1, #9
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e027      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	23a0      	movs	r3, #160	; 0xa0
 8002d26:	02db      	lsls	r3, r3, #11
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d10e      	bne.n	8002d4a <HAL_RCC_OscConfig+0xae>
 8002d2c:	4baa      	ldr	r3, [pc, #680]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4ba9      	ldr	r3, [pc, #676]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	02c9      	lsls	r1, r1, #11
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	4ba7      	ldr	r3, [pc, #668]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4ba6      	ldr	r3, [pc, #664]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	0249      	lsls	r1, r1, #9
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e012      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	4ba3      	ldr	r3, [pc, #652]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4ba2      	ldr	r3, [pc, #648]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d50:	49a2      	ldr	r1, [pc, #648]	; (8002fdc <HAL_RCC_OscConfig+0x340>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	4ba0      	ldr	r3, [pc, #640]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4b9c      	ldr	r3, [pc, #624]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b9b      	ldr	r3, [pc, #620]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d6a:	499d      	ldr	r1, [pc, #628]	; (8002fe0 <HAL_RCC_OscConfig+0x344>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fd6e 	bl	8001858 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d82:	f7fe fd69 	bl	8001858 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d902      	bls.n	8002d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f000 fb4c 	bl	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d96:	4b90      	ldr	r3, [pc, #576]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d0ef      	beq.n	8002d82 <HAL_RCC_OscConfig+0xe6>
 8002da2:	e015      	b.n	8002dd0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fd58 	bl	8001858 <HAL_GetTick>
 8002da8:	0003      	movs	r3, r0
 8002daa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dae:	f7fe fd53 	bl	8001858 <HAL_GetTick>
 8002db2:	0002      	movs	r2, r0
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e336      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dc0:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x112>
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d100      	bne.n	8002ddc <HAL_RCC_OscConfig+0x140>
 8002dda:	e099      	b.n	8002f10 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	2220      	movs	r2, #32
 8002de6:	4013      	ands	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002dea:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002df0:	2120      	movs	r1, #32
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d13e      	bne.n	8002e88 <HAL_RCC_OscConfig+0x1ec>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d13b      	bne.n	8002e88 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e10:	4b71      	ldr	r3, [pc, #452]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2204      	movs	r2, #4
 8002e16:	4013      	ands	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_RCC_OscConfig+0x188>
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e304      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a6e      	ldr	r2, [pc, #440]	; (8002fe4 <HAL_RCC_OscConfig+0x348>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e3a:	4b67      	ldr	r3, [pc, #412]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2209      	movs	r2, #9
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4c:	f000 fc42 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8002e50:	0001      	movs	r1, r0
 8002e52:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	220f      	movs	r2, #15
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	4a62      	ldr	r2, [pc, #392]	; (8002fe8 <HAL_RCC_OscConfig+0x34c>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	000a      	movs	r2, r1
 8002e62:	40da      	lsrs	r2, r3
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_OscConfig+0x350>)
 8002e66:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_RCC_OscConfig+0x354>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2513      	movs	r5, #19
 8002e6e:	197c      	adds	r4, r7, r5
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7fe fcab 	bl	80017cc <HAL_InitTick>
 8002e76:	0003      	movs	r3, r0
 8002e78:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e7a:	197b      	adds	r3, r7, r5
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d046      	beq.n	8002f10 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002e82:	197b      	adds	r3, r7, r5
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	e2d2      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d027      	beq.n	8002ede <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e8e:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2209      	movs	r2, #9
 8002e94:	4393      	bics	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fcda 	bl	8001858 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eaa:	f7fe fcd5 	bl	8001858 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e2b8      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ebc:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d0f1      	beq.n	8002eaa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a46      	ldr	r2, [pc, #280]	; (8002fe4 <HAL_RCC_OscConfig+0x348>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	e018      	b.n	8002f10 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ede:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe fcb5 	bl	8001858 <HAL_GetTick>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fcb0 	bl	8001858 <HAL_GetTick>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e293      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d1f1      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	d100      	bne.n	8002f1c <HAL_RCC_OscConfig+0x280>
 8002f1a:	e0a2      	b.n	8003062 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d140      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x29e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e279      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f3a:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a2d      	ldr	r2, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x358>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	0a19      	lsrs	r1, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	061a      	lsls	r2, r3, #24
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	0b5b      	lsrs	r3, r3, #13
 8002f68:	3301      	adds	r3, #1
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	0212      	lsls	r2, r2, #8
 8002f6e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	210f      	movs	r1, #15
 8002f78:	400b      	ands	r3, r1
 8002f7a:	491b      	ldr	r1, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x34c>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_RCC_OscConfig+0x350>)
 8002f82:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_OscConfig+0x354>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2513      	movs	r5, #19
 8002f8a:	197c      	adds	r4, r7, r5
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7fe fc1d 	bl	80017cc <HAL_InitTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f96:	197b      	adds	r3, r7, r5
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d061      	beq.n	8003062 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002f9e:	197b      	adds	r3, r7, r5
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	e244      	b.n	800342e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d040      	beq.n	800302e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	0049      	lsls	r1, r1, #1
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fe fc4d 	bl	8001858 <HAL_GetTick>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc2:	e019      	b.n	8002ff8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc4:	f7fe fc48 	bl	8001858 <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d912      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e22b      	b.n	800342e <HAL_RCC_OscConfig+0x792>
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	fffeffff 	.word	0xfffeffff
 8002fe0:	fffbffff 	.word	0xfffbffff
 8002fe4:	ffffe0ff 	.word	0xffffe0ff
 8002fe8:	08005c64 	.word	0x08005c64
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004
 8002ff4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ff8:	4bca      	ldr	r3, [pc, #808]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d0df      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003004:	4bc7      	ldr	r3, [pc, #796]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4ac7      	ldr	r2, [pc, #796]	; (8003328 <HAL_RCC_OscConfig+0x68c>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	4bc4      	ldr	r3, [pc, #784]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003018:	4bc2      	ldr	r3, [pc, #776]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	0a19      	lsrs	r1, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	061a      	lsls	r2, r3, #24
 8003026:	4bbf      	ldr	r3, [pc, #764]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e019      	b.n	8003062 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800302e:	4bbd      	ldr	r3, [pc, #756]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4bbc      	ldr	r3, [pc, #752]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003034:	49bd      	ldr	r1, [pc, #756]	; (800332c <HAL_RCC_OscConfig+0x690>)
 8003036:	400a      	ands	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe fc0d 	bl	8001858 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003044:	f7fe fc08 	bl	8001858 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1eb      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003056:	4bb3      	ldr	r3, [pc, #716]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2208      	movs	r2, #8
 8003068:	4013      	ands	r3, r2
 800306a:	d036      	beq.n	80030da <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003074:	4bab      	ldr	r3, [pc, #684]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003078:	4baa      	ldr	r3, [pc, #680]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800307a:	2101      	movs	r1, #1
 800307c:	430a      	orrs	r2, r1
 800307e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003080:	f7fe fbea 	bl	8001858 <HAL_GetTick>
 8003084:	0003      	movs	r3, r0
 8003086:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe fbe5 	bl	8001858 <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e1c8      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309c:	4ba1      	ldr	r3, [pc, #644]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d0f1      	beq.n	800308a <HAL_RCC_OscConfig+0x3ee>
 80030a6:	e018      	b.n	80030da <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b9e      	ldr	r3, [pc, #632]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80030aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ac:	4b9d      	ldr	r3, [pc, #628]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fbd0 	bl	8001858 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030be:	f7fe fbcb 	bl	8001858 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1ae      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030d0:	4b94      	ldr	r3, [pc, #592]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80030d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d1f1      	bne.n	80030be <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2204      	movs	r2, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d100      	bne.n	80030e6 <HAL_RCC_OscConfig+0x44a>
 80030e4:	e0ae      	b.n	8003244 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2023      	movs	r0, #35	; 0x23
 80030e8:	183b      	adds	r3, r7, r0
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80030f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	055b      	lsls	r3, r3, #21
 80030f6:	4013      	ands	r3, r2
 80030f8:	d109      	bne.n	800310e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b8a      	ldr	r3, [pc, #552]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80030fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fe:	4b89      	ldr	r3, [pc, #548]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	0549      	lsls	r1, r1, #21
 8003104:	430a      	orrs	r2, r1
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003108:	183b      	adds	r3, r7, r0
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCC_OscConfig+0x694>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4013      	ands	r3, r2
 8003118:	d11a      	bne.n	8003150 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b85      	ldr	r3, [pc, #532]	; (8003330 <HAL_RCC_OscConfig+0x694>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b84      	ldr	r3, [pc, #528]	; (8003330 <HAL_RCC_OscConfig+0x694>)
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	0049      	lsls	r1, r1, #1
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003128:	f7fe fb96 	bl	8001858 <HAL_GetTick>
 800312c:	0003      	movs	r3, r0
 800312e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe fb91 	bl	8001858 <HAL_GetTick>
 8003136:	0002      	movs	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b64      	cmp	r3, #100	; 0x64
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e174      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b7a      	ldr	r3, [pc, #488]	; (8003330 <HAL_RCC_OscConfig+0x694>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4013      	ands	r3, r2
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	429a      	cmp	r2, r3
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x4d0>
 800315c:	4b71      	ldr	r3, [pc, #452]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800315e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003160:	4b70      	ldr	r3, [pc, #448]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0049      	lsls	r1, r1, #1
 8003166:	430a      	orrs	r2, r1
 8003168:	651a      	str	r2, [r3, #80]	; 0x50
 800316a:	e031      	b.n	80031d0 <HAL_RCC_OscConfig+0x534>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10c      	bne.n	800318e <HAL_RCC_OscConfig+0x4f2>
 8003174:	4b6b      	ldr	r3, [pc, #428]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800317a:	496c      	ldr	r1, [pc, #432]	; (800332c <HAL_RCC_OscConfig+0x690>)
 800317c:	400a      	ands	r2, r1
 800317e:	651a      	str	r2, [r3, #80]	; 0x50
 8003180:	4b68      	ldr	r3, [pc, #416]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003184:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003186:	496b      	ldr	r1, [pc, #428]	; (8003334 <HAL_RCC_OscConfig+0x698>)
 8003188:	400a      	ands	r2, r1
 800318a:	651a      	str	r2, [r3, #80]	; 0x50
 800318c:	e020      	b.n	80031d0 <HAL_RCC_OscConfig+0x534>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	23a0      	movs	r3, #160	; 0xa0
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	429a      	cmp	r2, r3
 8003198:	d10e      	bne.n	80031b8 <HAL_RCC_OscConfig+0x51c>
 800319a:	4b62      	ldr	r3, [pc, #392]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800319c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	00c9      	lsls	r1, r1, #3
 80031a4:	430a      	orrs	r2, r1
 80031a6:	651a      	str	r2, [r3, #80]	; 0x50
 80031a8:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	0049      	lsls	r1, r1, #1
 80031b2:	430a      	orrs	r2, r1
 80031b4:	651a      	str	r2, [r3, #80]	; 0x50
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x534>
 80031b8:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031bc:	4b59      	ldr	r3, [pc, #356]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031be:	495b      	ldr	r1, [pc, #364]	; (800332c <HAL_RCC_OscConfig+0x690>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	651a      	str	r2, [r3, #80]	; 0x50
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c8:	4b56      	ldr	r3, [pc, #344]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031ca:	495a      	ldr	r1, [pc, #360]	; (8003334 <HAL_RCC_OscConfig+0x698>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7fe fb3e 	bl	8001858 <HAL_GetTick>
 80031dc:	0003      	movs	r3, r0
 80031de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e0:	e009      	b.n	80031f6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe fb39 	bl	8001858 <HAL_GetTick>
 80031e6:	0002      	movs	r2, r0
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_OscConfig+0x69c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e11b      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f6:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4013      	ands	r3, r2
 8003200:	d0ef      	beq.n	80031e2 <HAL_RCC_OscConfig+0x546>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7fe fb28 	bl	8001858 <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800320c:	e009      	b.n	8003222 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fb23 	bl	8001858 <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	4a47      	ldr	r2, [pc, #284]	; (8003338 <HAL_RCC_OscConfig+0x69c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e105      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4013      	ands	r3, r2
 800322c:	d1ef      	bne.n	800320e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800322e:	2323      	movs	r3, #35	; 0x23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800323a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800323e:	493f      	ldr	r1, [pc, #252]	; (800333c <HAL_RCC_OscConfig+0x6a0>)
 8003240:	400a      	ands	r2, r1
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2220      	movs	r2, #32
 800324a:	4013      	ands	r3, r2
 800324c:	d049      	beq.n	80032e2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d026      	beq.n	80032a4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003256:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800325c:	2101      	movs	r1, #1
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x6a4>)
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_RCC_OscConfig+0x6a4>)
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	0189      	lsls	r1, r1, #6
 8003278:	430a      	orrs	r2, r1
 800327a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe faec 	bl	8001858 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003286:	f7fe fae7 	bl	8001858 <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0ca      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d0f1      	beq.n	8003286 <HAL_RCC_OscConfig+0x5ea>
 80032a2:	e01e      	b.n	80032e2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	438a      	bics	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <HAL_RCC_OscConfig+0x6a4>)
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_OscConfig+0x6a4>)
 80032b6:	4923      	ldr	r1, [pc, #140]	; (8003344 <HAL_RCC_OscConfig+0x6a8>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe facc 	bl	8001858 <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fe fac7 	bl	8001858 <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0aa      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2202      	movs	r2, #2
 80032de:	4013      	ands	r3, r2
 80032e0:	d1f1      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d100      	bne.n	80032ec <HAL_RCC_OscConfig+0x650>
 80032ea:	e09f      	b.n	800342c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d100      	bne.n	80032f4 <HAL_RCC_OscConfig+0x658>
 80032f2:	e078      	b.n	80033e6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d159      	bne.n	80033b0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003302:	4911      	ldr	r1, [pc, #68]	; (8003348 <HAL_RCC_OscConfig+0x6ac>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe faa6 	bl	8001858 <HAL_GetTick>
 800330c:	0003      	movs	r3, r0
 800330e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003310:	e01c      	b.n	800334c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe faa1 	bl	8001858 <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d915      	bls.n	800334c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e084      	b.n	800342e <HAL_RCC_OscConfig+0x792>
 8003324:	40021000 	.word	0x40021000
 8003328:	ffff1fff 	.word	0xffff1fff
 800332c:	fffffeff 	.word	0xfffffeff
 8003330:	40007000 	.word	0x40007000
 8003334:	fffffbff 	.word	0xfffffbff
 8003338:	00001388 	.word	0x00001388
 800333c:	efffffff 	.word	0xefffffff
 8003340:	40010000 	.word	0x40010000
 8003344:	ffffdfff 	.word	0xffffdfff
 8003348:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800334c:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	049b      	lsls	r3, r3, #18
 8003354:	4013      	ands	r3, r2
 8003356:	d1dc      	bne.n	8003312 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003358:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a37      	ldr	r2, [pc, #220]	; (800343c <HAL_RCC_OscConfig+0x7a0>)
 800335e:	4013      	ands	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003370:	431a      	orrs	r2, r3
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 8003374:	430a      	orrs	r2, r1
 8003376:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b2e      	ldr	r3, [pc, #184]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	0449      	lsls	r1, r1, #17
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe fa67 	bl	8001858 <HAL_GetTick>
 800338a:	0003      	movs	r3, r0
 800338c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe fa62 	bl	8001858 <HAL_GetTick>
 8003394:	0002      	movs	r2, r0
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e045      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033a2:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	049b      	lsls	r3, r3, #18
 80033aa:	4013      	ands	r3, r2
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x6f4>
 80033ae:	e03d      	b.n	800342c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 80033b6:	4922      	ldr	r1, [pc, #136]	; (8003440 <HAL_RCC_OscConfig+0x7a4>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fa4c 	bl	8001858 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fe fa47 	bl	8001858 <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e02a      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	049b      	lsls	r3, r3, #18
 80033e0:	4013      	ands	r3, r2
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x72a>
 80033e4:	e022      	b.n	800342c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e01d      	b.n	800342e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCC_OscConfig+0x79c>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	025b      	lsls	r3, r3, #9
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	429a      	cmp	r2, r3
 8003406:	d10f      	bne.n	8003428 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	23f0      	movs	r3, #240	; 0xf0
 800340c:	039b      	lsls	r3, r3, #14
 800340e:	401a      	ands	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	23c0      	movs	r3, #192	; 0xc0
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	401a      	ands	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b00a      	add	sp, #40	; 0x28
 8003434:	bdb0      	pop	{r4, r5, r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	40021000 	.word	0x40021000
 800343c:	ff02ffff 	.word	0xff02ffff
 8003440:	feffffff 	.word	0xfeffffff

08003444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003444:	b5b0      	push	{r4, r5, r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e128      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003458:	4b96      	ldr	r3, [pc, #600]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2201      	movs	r2, #1
 800345e:	4013      	ands	r3, r2
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d91e      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b93      	ldr	r3, [pc, #588]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2201      	movs	r2, #1
 800346c:	4393      	bics	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	4b90      	ldr	r3, [pc, #576]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003478:	f7fe f9ee 	bl	8001858 <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	e009      	b.n	8003496 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003482:	f7fe f9e9 	bl	8001858 <HAL_GetTick>
 8003486:	0002      	movs	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	4a8a      	ldr	r2, [pc, #552]	; (80036b8 <HAL_RCC_ClockConfig+0x274>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e109      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b87      	ldr	r3, [pc, #540]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2202      	movs	r2, #2
 80034aa:	4013      	ands	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ae:	4b83      	ldr	r3, [pc, #524]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	22f0      	movs	r2, #240	; 0xf0
 80034b4:	4393      	bics	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	4b7f      	ldr	r3, [pc, #508]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 80034be:	430a      	orrs	r2, r1
 80034c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	4013      	ands	r3, r2
 80034ca:	d100      	bne.n	80034ce <HAL_RCC_ClockConfig+0x8a>
 80034cc:	e089      	b.n	80035e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034d6:	4b79      	ldr	r3, [pc, #484]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	4013      	ands	r3, r2
 80034e0:	d120      	bne.n	8003524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0e1      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034ee:	4b73      	ldr	r3, [pc, #460]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	049b      	lsls	r3, r3, #18
 80034f6:	4013      	ands	r3, r2
 80034f8:	d114      	bne.n	8003524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0d5      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d106      	bne.n	8003514 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003506:	4b6d      	ldr	r3, [pc, #436]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2204      	movs	r2, #4
 800350c:	4013      	ands	r3, r2
 800350e:	d109      	bne.n	8003524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0ca      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003514:	4b69      	ldr	r3, [pc, #420]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4013      	ands	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0c2      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003524:	4b65      	ldr	r3, [pc, #404]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2203      	movs	r2, #3
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	4b62      	ldr	r3, [pc, #392]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003534:	430a      	orrs	r2, r1
 8003536:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7fe f98e 	bl	8001858 <HAL_GetTick>
 800353c:	0003      	movs	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d111      	bne.n	800356c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003548:	e009      	b.n	800355e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354a:	f7fe f985 	bl	8001858 <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x274>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0a5      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800355e:	4b57      	ldr	r3, [pc, #348]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	220c      	movs	r2, #12
 8003564:	4013      	ands	r3, r2
 8003566:	2b08      	cmp	r3, #8
 8003568:	d1ef      	bne.n	800354a <HAL_RCC_ClockConfig+0x106>
 800356a:	e03a      	b.n	80035e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d111      	bne.n	8003598 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	e009      	b.n	800358a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003576:	f7fe f96f 	bl	8001858 <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x274>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e08f      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358a:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	220c      	movs	r2, #12
 8003590:	4013      	ands	r3, r2
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d1ef      	bne.n	8003576 <HAL_RCC_ClockConfig+0x132>
 8003596:	e024      	b.n	80035e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11b      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a0:	e009      	b.n	80035b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a2:	f7fe f959 	bl	8001858 <HAL_GetTick>
 80035a6:	0002      	movs	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	4a42      	ldr	r2, [pc, #264]	; (80036b8 <HAL_RCC_ClockConfig+0x274>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e079      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	220c      	movs	r2, #12
 80035bc:	4013      	ands	r3, r2
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d1ef      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x15e>
 80035c2:	e00e      	b.n	80035e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7fe f948 	bl	8001858 <HAL_GetTick>
 80035c8:	0002      	movs	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	4a3a      	ldr	r2, [pc, #232]	; (80036b8 <HAL_RCC_ClockConfig+0x274>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e068      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035d8:	4b38      	ldr	r3, [pc, #224]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	220c      	movs	r2, #12
 80035de:	4013      	ands	r3, r2
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e2:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2201      	movs	r2, #1
 80035e8:	4013      	ands	r3, r2
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d21e      	bcs.n	800362e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f0:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4393      	bics	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003602:	f7fe f929 	bl	8001858 <HAL_GetTick>
 8003606:	0003      	movs	r3, r0
 8003608:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	e009      	b.n	8003620 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7fe f924 	bl	8001858 <HAL_GetTick>
 8003610:	0002      	movs	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_RCC_ClockConfig+0x274>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e044      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_ClockConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2201      	movs	r2, #1
 8003626:	4013      	ands	r3, r2
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2204      	movs	r2, #4
 8003634:	4013      	ands	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x27c>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2208      	movs	r2, #8
 8003652:	4013      	ands	r3, r2
 8003654:	d00a      	beq.n	800366c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <HAL_RCC_ClockConfig+0x280>)
 800365c:	4013      	ands	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	00da      	lsls	r2, r3, #3
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003668:	430a      	orrs	r2, r1
 800366a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800366c:	f000 f832 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003670:	0001      	movs	r1, r0
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_ClockConfig+0x278>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	220f      	movs	r2, #15
 800367a:	4013      	ands	r3, r2
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_RCC_ClockConfig+0x284>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	000a      	movs	r2, r1
 8003682:	40da      	lsrs	r2, r3
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_ClockConfig+0x288>)
 8003686:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003688:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <HAL_RCC_ClockConfig+0x28c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	250b      	movs	r5, #11
 800368e:	197c      	adds	r4, r7, r5
 8003690:	0018      	movs	r0, r3
 8003692:	f7fe f89b 	bl	80017cc <HAL_InitTick>
 8003696:	0003      	movs	r3, r0
 8003698:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800369a:	197b      	adds	r3, r7, r5
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80036a2:	197b      	adds	r3, r7, r5
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	e000      	b.n	80036aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bdb0      	pop	{r4, r5, r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	40022000 	.word	0x40022000
 80036b8:	00001388 	.word	0x00001388
 80036bc:	40021000 	.word	0x40021000
 80036c0:	fffff8ff 	.word	0xfffff8ff
 80036c4:	ffffc7ff 	.word	0xffffc7ff
 80036c8:	08005c64 	.word	0x08005c64
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b5b0      	push	{r4, r5, r7, lr}
 80036d6:	b08e      	sub	sp, #56	; 0x38
 80036d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80036da:	4b4c      	ldr	r3, [pc, #304]	; (800380c <HAL_RCC_GetSysClockFreq+0x138>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e2:	230c      	movs	r3, #12
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d014      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036ea:	d900      	bls.n	80036ee <HAL_RCC_GetSysClockFreq+0x1a>
 80036ec:	e07b      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x112>
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x24>
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d00b      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 80036f6:	e076      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036f8:	4b44      	ldr	r3, [pc, #272]	; (800380c <HAL_RCC_GetSysClockFreq+0x138>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2210      	movs	r2, #16
 80036fe:	4013      	ands	r3, r2
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003702:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003706:	e07c      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003708:	4b42      	ldr	r3, [pc, #264]	; (8003814 <HAL_RCC_GetSysClockFreq+0x140>)
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800370c:	e079      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b42      	ldr	r3, [pc, #264]	; (8003818 <HAL_RCC_GetSysClockFreq+0x144>)
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003712:	e076      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	0c9a      	lsrs	r2, r3, #18
 8003718:	230f      	movs	r3, #15
 800371a:	401a      	ands	r2, r3
 800371c:	4b3f      	ldr	r3, [pc, #252]	; (800381c <HAL_RCC_GetSysClockFreq+0x148>)
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	0d9a      	lsrs	r2, r3, #22
 8003726:	2303      	movs	r3, #3
 8003728:	4013      	ands	r3, r2
 800372a:	3301      	adds	r3, #1
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_RCC_GetSysClockFreq+0x138>)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	4013      	ands	r3, r2
 8003738:	d01a      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	4a35      	ldr	r2, [pc, #212]	; (8003818 <HAL_RCC_GetSysClockFreq+0x144>)
 8003744:	2300      	movs	r3, #0
 8003746:	69b8      	ldr	r0, [r7, #24]
 8003748:	69f9      	ldr	r1, [r7, #28]
 800374a:	f7fc fd93 	bl	8000274 <__aeabi_lmul>
 800374e:	0002      	movs	r2, r0
 8003750:	000b      	movs	r3, r1
 8003752:	0010      	movs	r0, r2
 8003754:	0019      	movs	r1, r3
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f7fc fd67 	bl	8000234 <__aeabi_uldivmod>
 8003766:	0002      	movs	r2, r0
 8003768:	000b      	movs	r3, r1
 800376a:	0013      	movs	r3, r2
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
 800376e:	e037      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003770:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_RCC_GetSysClockFreq+0x138>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2210      	movs	r2, #16
 8003776:	4013      	ands	r3, r2
 8003778:	d01a      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	4a23      	ldr	r2, [pc, #140]	; (8003810 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003784:	2300      	movs	r3, #0
 8003786:	68b8      	ldr	r0, [r7, #8]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	f7fc fd73 	bl	8000274 <__aeabi_lmul>
 800378e:	0002      	movs	r2, r0
 8003790:	000b      	movs	r3, r1
 8003792:	0010      	movs	r0, r2
 8003794:	0019      	movs	r1, r3
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f7fc fd47 	bl	8000234 <__aeabi_uldivmod>
 80037a6:	0002      	movs	r2, r0
 80037a8:	000b      	movs	r3, r1
 80037aa:	0013      	movs	r3, r2
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
 80037ae:	e017      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	0018      	movs	r0, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	0019      	movs	r1, r3
 80037b8:	4a16      	ldr	r2, [pc, #88]	; (8003814 <HAL_RCC_GetSysClockFreq+0x140>)
 80037ba:	2300      	movs	r3, #0
 80037bc:	f7fc fd5a 	bl	8000274 <__aeabi_lmul>
 80037c0:	0002      	movs	r2, r0
 80037c2:	000b      	movs	r3, r1
 80037c4:	0010      	movs	r0, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	001c      	movs	r4, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	001d      	movs	r5, r3
 80037d0:	0022      	movs	r2, r4
 80037d2:	002b      	movs	r3, r5
 80037d4:	f7fc fd2e 	bl	8000234 <__aeabi_uldivmod>
 80037d8:	0002      	movs	r2, r0
 80037da:	000b      	movs	r3, r1
 80037dc:	0013      	movs	r3, r2
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037e4:	e00d      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_GetSysClockFreq+0x138>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	0b5b      	lsrs	r3, r3, #13
 80037ec:	2207      	movs	r2, #7
 80037ee:	4013      	ands	r3, r2
 80037f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	3301      	adds	r3, #1
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	0212      	lsls	r2, r2, #8
 80037fa:	409a      	lsls	r2, r3
 80037fc:	0013      	movs	r3, r2
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003800:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b00e      	add	sp, #56	; 0x38
 800380a:	bdb0      	pop	{r4, r5, r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	003d0900 	.word	0x003d0900
 8003814:	00f42400 	.word	0x00f42400
 8003818:	007a1200 	.word	0x007a1200
 800381c:	08005c7c 	.word	0x08005c7c

08003820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <HAL_RCC_GetHCLKFreq+0x10>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20000000 	.word	0x20000000

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003838:	f7ff fff2 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 800383c:	0001      	movs	r1, r0
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	2207      	movs	r2, #7
 8003846:	4013      	ands	r3, r2
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_RCC_GetPCLK1Freq+0x28>)
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	40d9      	lsrs	r1, r3
 800384e:	000b      	movs	r3, r1
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	40021000 	.word	0x40021000
 800385c:	08005c74 	.word	0x08005c74

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003864:	f7ff ffdc 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003868:	0001      	movs	r1, r0
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	0adb      	lsrs	r3, r3, #11
 8003870:	2207      	movs	r2, #7
 8003872:	4013      	ands	r3, r2
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	40d9      	lsrs	r1, r3
 800387a:	000b      	movs	r3, r1
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	40021000 	.word	0x40021000
 8003888:	08005c74 	.word	0x08005c74

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003894:	2317      	movs	r3, #23
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2220      	movs	r2, #32
 80038a2:	4013      	ands	r3, r2
 80038a4:	d106      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	d100      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80038b2:	e0d9      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b4:	4ba4      	ldr	r3, [pc, #656]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	055b      	lsls	r3, r3, #21
 80038bc:	4013      	ands	r3, r2
 80038be:	d10a      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4ba1      	ldr	r3, [pc, #644]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c4:	4ba0      	ldr	r3, [pc, #640]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	0549      	lsls	r1, r1, #21
 80038ca:	430a      	orrs	r2, r1
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80038ce:	2317      	movs	r3, #23
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d6:	4b9d      	ldr	r3, [pc, #628]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4013      	ands	r3, r2
 80038e0:	d11a      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e2:	4b9a      	ldr	r3, [pc, #616]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b99      	ldr	r3, [pc, #612]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	0049      	lsls	r1, r1, #1
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f0:	f7fd ffb2 	bl	8001858 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fd ffad 	bl	8001858 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e118      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b8f      	ldr	r3, [pc, #572]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4013      	ands	r3, r2
 8003916:	d0f0      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003918:	4b8b      	ldr	r3, [pc, #556]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	23c0      	movs	r3, #192	; 0xc0
 800391e:	039b      	lsls	r3, r3, #14
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	23c0      	movs	r3, #192	; 0xc0
 800392a:	039b      	lsls	r3, r3, #14
 800392c:	4013      	ands	r3, r2
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	429a      	cmp	r2, r3
 8003932:	d107      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	23c0      	movs	r3, #192	; 0xc0
 800393a:	039b      	lsls	r3, r3, #14
 800393c:	4013      	ands	r3, r2
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d013      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	23c0      	movs	r3, #192	; 0xc0
 800394a:	029b      	lsls	r3, r3, #10
 800394c:	401a      	ands	r2, r3
 800394e:	23c0      	movs	r3, #192	; 0xc0
 8003950:	029b      	lsls	r3, r3, #10
 8003952:	429a      	cmp	r2, r3
 8003954:	d10a      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003956:	4b7c      	ldr	r3, [pc, #496]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	029b      	lsls	r3, r3, #10
 800395e:	401a      	ands	r2, r3
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	429a      	cmp	r2, r3
 8003966:	d101      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0e8      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800396c:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800396e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003970:	23c0      	movs	r3, #192	; 0xc0
 8003972:	029b      	lsls	r3, r3, #10
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d049      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	23c0      	movs	r3, #192	; 0xc0
 8003984:	029b      	lsls	r3, r3, #10
 8003986:	4013      	ands	r3, r2
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	429a      	cmp	r2, r3
 800398c:	d004      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2220      	movs	r2, #32
 8003994:	4013      	ands	r3, r2
 8003996:	d10d      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	23c0      	movs	r3, #192	; 0xc0
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	4013      	ands	r3, r2
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d034      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d02e      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039b4:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	4b62      	ldr	r3, [pc, #392]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039c2:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	0309      	lsls	r1, r1, #12
 80039c8:	430a      	orrs	r2, r1
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039cc:	4b5e      	ldr	r3, [pc, #376]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d0:	4b5d      	ldr	r3, [pc, #372]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039d2:	4960      	ldr	r1, [pc, #384]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80039d8:	4b5b      	ldr	r3, [pc, #364]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4013      	ands	r3, r2
 80039e6:	d014      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd ff36 	bl	8001858 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f0:	e009      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fd ff31 	bl	8001858 <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e09b      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a06:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d0ef      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	23c0      	movs	r3, #192	; 0xc0
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	23c0      	movs	r3, #192	; 0xc0
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003a24:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a4c      	ldr	r2, [pc, #304]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	23c0      	movs	r3, #192	; 0xc0
 8003a34:	039b      	lsls	r3, r3, #14
 8003a36:	401a      	ands	r2, r3
 8003a38:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	23c0      	movs	r3, #192	; 0xc0
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a52:	2317      	movs	r3, #23
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a60:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a62:	493f      	ldr	r1, [pc, #252]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a72:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	2203      	movs	r2, #3
 8003a78:	4393      	bics	r3, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a82:	430a      	orrs	r2, r1
 8003a84:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	220c      	movs	r2, #12
 8003a96:	4393      	bics	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	4a2c      	ldr	r2, [pc, #176]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003acc:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003afc:	430a      	orrs	r2, r1
 8003afe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	4013      	ands	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2c:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b006      	add	sp, #24
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	fffcffff 	.word	0xfffcffff
 8003b54:	fff7ffff 	.word	0xfff7ffff
 8003b58:	00001388 	.word	0x00001388
 8003b5c:	ffcfffff 	.word	0xffcfffff
 8003b60:	efffffff 	.word	0xefffffff
 8003b64:	fffff3ff 	.word	0xfffff3ff
 8003b68:	ffffcfff 	.word	0xffffcfff
 8003b6c:	fbffffff 	.word	0xfbffffff
 8003b70:	fff3ffff 	.word	0xfff3ffff

08003b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e044      	b.n	8003c10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2274      	movs	r2, #116	; 0x74
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fd fcd1 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2224      	movs	r2, #36	; 0x24
 8003ba2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2101      	movs	r1, #1
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 f8d8 	bl	8003d6c <UART_SetConfig>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e024      	b.n	8003c10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 fb6b 	bl	80042ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	490d      	ldr	r1, [pc, #52]	; (8003c18 <HAL_UART_Init+0xa4>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	212a      	movs	r1, #42	; 0x2a
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f000 fc03 	bl	8004414 <UART_CheckIdleState>
 8003c0e:	0003      	movs	r3, r0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	ffffb7ff 	.word	0xffffb7ff

08003c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	1dbb      	adds	r3, r7, #6
 8003c2a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d000      	beq.n	8003c36 <HAL_UART_Transmit+0x1a>
 8003c34:	e095      	b.n	8003d62 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_UART_Transmit+0x28>
 8003c3c:	1dbb      	adds	r3, r7, #6
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e08d      	b.n	8003d64 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	015b      	lsls	r3, r3, #5
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d109      	bne.n	8003c68 <HAL_UART_Transmit+0x4c>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4013      	ands	r3, r2
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e07d      	b.n	8003d64 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2274      	movs	r2, #116	; 0x74
 8003c6c:	5c9b      	ldrb	r3, [r3, r2]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Transmit+0x5a>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e076      	b.n	8003d64 <HAL_UART_Transmit+0x148>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2274      	movs	r2, #116	; 0x74
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	2100      	movs	r1, #0
 8003c84:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2221      	movs	r2, #33	; 0x21
 8003c8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd fde4 	bl	8001858 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1dba      	adds	r2, r7, #6
 8003c98:	2150      	movs	r1, #80	; 0x50
 8003c9a:	8812      	ldrh	r2, [r2, #0]
 8003c9c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1dba      	adds	r2, r7, #6
 8003ca2:	2152      	movs	r1, #82	; 0x52
 8003ca4:	8812      	ldrh	r2, [r2, #0]
 8003ca6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	015b      	lsls	r3, r3, #5
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d108      	bne.n	8003cc6 <HAL_UART_Transmit+0xaa>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e003      	b.n	8003cce <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2274      	movs	r2, #116	; 0x74
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003cd6:	e02c      	b.n	8003d32 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	f000 fbdd 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e038      	b.n	8003d64 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	05d2      	lsls	r2, r2, #23
 8003d04:	0dd2      	lsrs	r2, r2, #23
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e007      	b.n	8003d20 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2252      	movs	r2, #82	; 0x52
 8003d24:	5a9b      	ldrh	r3, [r3, r2]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b299      	uxth	r1, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2252      	movs	r2, #82	; 0x52
 8003d30:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2252      	movs	r2, #82	; 0x52
 8003d36:	5a9b      	ldrh	r3, [r3, r2]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cc      	bne.n	8003cd8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	0013      	movs	r3, r2
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	f000 fbaa 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 8003d50:	1e03      	subs	r3, r0, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e005      	b.n	8003d64 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b008      	add	sp, #32
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b08e      	sub	sp, #56	; 0x38
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d74:	231a      	movs	r3, #26
 8003d76:	2218      	movs	r2, #24
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4ac3      	ldr	r2, [pc, #780]	; (80040ac <UART_SetConfig+0x340>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003daa:	430a      	orrs	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4abe      	ldr	r2, [pc, #760]	; (80040b0 <UART_SetConfig+0x344>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4ab8      	ldr	r2, [pc, #736]	; (80040b4 <UART_SetConfig+0x348>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	4ab4      	ldr	r2, [pc, #720]	; (80040b8 <UART_SetConfig+0x34c>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	0019      	movs	r1, r3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4ab0      	ldr	r2, [pc, #704]	; (80040bc <UART_SetConfig+0x350>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d131      	bne.n	8003e64 <UART_SetConfig+0xf8>
 8003e00:	4baf      	ldr	r3, [pc, #700]	; (80040c0 <UART_SetConfig+0x354>)
 8003e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e04:	2203      	movs	r2, #3
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d01d      	beq.n	8003e48 <UART_SetConfig+0xdc>
 8003e0c:	d823      	bhi.n	8003e56 <UART_SetConfig+0xea>
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d00c      	beq.n	8003e2c <UART_SetConfig+0xc0>
 8003e12:	d820      	bhi.n	8003e56 <UART_SetConfig+0xea>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <UART_SetConfig+0xb2>
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d00e      	beq.n	8003e3a <UART_SetConfig+0xce>
 8003e1c:	e01b      	b.n	8003e56 <UART_SetConfig+0xea>
 8003e1e:	231b      	movs	r3, #27
 8003e20:	2218      	movs	r2, #24
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	19db      	adds	r3, r3, r7
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	e0b4      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	2218      	movs	r2, #24
 8003e30:	189b      	adds	r3, r3, r2
 8003e32:	19db      	adds	r3, r3, r7
 8003e34:	2202      	movs	r2, #2
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e0ad      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003e3a:	231b      	movs	r3, #27
 8003e3c:	2218      	movs	r2, #24
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	19db      	adds	r3, r3, r7
 8003e42:	2204      	movs	r2, #4
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	e0a6      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003e48:	231b      	movs	r3, #27
 8003e4a:	2218      	movs	r2, #24
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	19db      	adds	r3, r3, r7
 8003e50:	2208      	movs	r2, #8
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e09f      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003e56:	231b      	movs	r3, #27
 8003e58:	2218      	movs	r2, #24
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	2210      	movs	r2, #16
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	e098      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a96      	ldr	r2, [pc, #600]	; (80040c4 <UART_SetConfig+0x358>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d131      	bne.n	8003ed2 <UART_SetConfig+0x166>
 8003e6e:	4b94      	ldr	r3, [pc, #592]	; (80040c0 <UART_SetConfig+0x354>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	220c      	movs	r2, #12
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d01d      	beq.n	8003eb6 <UART_SetConfig+0x14a>
 8003e7a:	d823      	bhi.n	8003ec4 <UART_SetConfig+0x158>
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d00c      	beq.n	8003e9a <UART_SetConfig+0x12e>
 8003e80:	d820      	bhi.n	8003ec4 <UART_SetConfig+0x158>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <UART_SetConfig+0x120>
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d00e      	beq.n	8003ea8 <UART_SetConfig+0x13c>
 8003e8a:	e01b      	b.n	8003ec4 <UART_SetConfig+0x158>
 8003e8c:	231b      	movs	r3, #27
 8003e8e:	2218      	movs	r2, #24
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	19db      	adds	r3, r3, r7
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e07d      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003e9a:	231b      	movs	r3, #27
 8003e9c:	2218      	movs	r2, #24
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	19db      	adds	r3, r3, r7
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e076      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003ea8:	231b      	movs	r3, #27
 8003eaa:	2218      	movs	r2, #24
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	19db      	adds	r3, r3, r7
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e06f      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003eb6:	231b      	movs	r3, #27
 8003eb8:	2218      	movs	r2, #24
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e068      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003ec4:	231b      	movs	r3, #27
 8003ec6:	2218      	movs	r2, #24
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	2210      	movs	r2, #16
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	e061      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7c      	ldr	r2, [pc, #496]	; (80040c8 <UART_SetConfig+0x35c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d106      	bne.n	8003eea <UART_SetConfig+0x17e>
 8003edc:	231b      	movs	r3, #27
 8003ede:	2218      	movs	r2, #24
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e055      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a77      	ldr	r2, [pc, #476]	; (80040cc <UART_SetConfig+0x360>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d106      	bne.n	8003f02 <UART_SetConfig+0x196>
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2218      	movs	r2, #24
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e049      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <UART_SetConfig+0x348>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d13e      	bne.n	8003f8a <UART_SetConfig+0x21e>
 8003f0c:	4b6c      	ldr	r3, [pc, #432]	; (80040c0 <UART_SetConfig+0x354>)
 8003f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f10:	23c0      	movs	r3, #192	; 0xc0
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	4013      	ands	r3, r2
 8003f16:	22c0      	movs	r2, #192	; 0xc0
 8003f18:	0112      	lsls	r2, r2, #4
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d027      	beq.n	8003f6e <UART_SetConfig+0x202>
 8003f1e:	22c0      	movs	r2, #192	; 0xc0
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d82a      	bhi.n	8003f7c <UART_SetConfig+0x210>
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d011      	beq.n	8003f52 <UART_SetConfig+0x1e6>
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	0112      	lsls	r2, r2, #4
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d822      	bhi.n	8003f7c <UART_SetConfig+0x210>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <UART_SetConfig+0x1d8>
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	00d2      	lsls	r2, r2, #3
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00e      	beq.n	8003f60 <UART_SetConfig+0x1f4>
 8003f42:	e01b      	b.n	8003f7c <UART_SetConfig+0x210>
 8003f44:	231b      	movs	r3, #27
 8003f46:	2218      	movs	r2, #24
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	19db      	adds	r3, r3, r7
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e021      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003f52:	231b      	movs	r3, #27
 8003f54:	2218      	movs	r2, #24
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e01a      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003f60:	231b      	movs	r3, #27
 8003f62:	2218      	movs	r2, #24
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	2204      	movs	r2, #4
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e013      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003f6e:	231b      	movs	r3, #27
 8003f70:	2218      	movs	r2, #24
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	19db      	adds	r3, r3, r7
 8003f76:	2208      	movs	r2, #8
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e00c      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003f7c:	231b      	movs	r3, #27
 8003f7e:	2218      	movs	r2, #24
 8003f80:	189b      	adds	r3, r3, r2
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	2210      	movs	r2, #16
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e005      	b.n	8003f96 <UART_SetConfig+0x22a>
 8003f8a:	231b      	movs	r3, #27
 8003f8c:	2218      	movs	r2, #24
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	19db      	adds	r3, r3, r7
 8003f92:	2210      	movs	r2, #16
 8003f94:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a46      	ldr	r2, [pc, #280]	; (80040b4 <UART_SetConfig+0x348>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d000      	beq.n	8003fa2 <UART_SetConfig+0x236>
 8003fa0:	e09a      	b.n	80040d8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fa2:	231b      	movs	r3, #27
 8003fa4:	2218      	movs	r2, #24
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d01d      	beq.n	8003fec <UART_SetConfig+0x280>
 8003fb0:	dc20      	bgt.n	8003ff4 <UART_SetConfig+0x288>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d015      	beq.n	8003fe2 <UART_SetConfig+0x276>
 8003fb6:	dc1d      	bgt.n	8003ff4 <UART_SetConfig+0x288>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <UART_SetConfig+0x256>
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d005      	beq.n	8003fcc <UART_SetConfig+0x260>
 8003fc0:	e018      	b.n	8003ff4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc2:	f7ff fc37 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fca:	e01c      	b.n	8004006 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fcc:	4b3c      	ldr	r3, [pc, #240]	; (80040c0 <UART_SetConfig+0x354>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d002      	beq.n	8003fdc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003fd6:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <UART_SetConfig+0x364>)
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003fda:	e014      	b.n	8004006 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <UART_SetConfig+0x368>)
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fe0:	e011      	b.n	8004006 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe2:	f7ff fb77 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fea:	e00c      	b.n	8004006 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ff2:	e008      	b.n	8004006 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003ff8:	231a      	movs	r3, #26
 8003ffa:	2218      	movs	r2, #24
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
        break;
 8004004:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d100      	bne.n	800400e <UART_SetConfig+0x2a2>
 800400c:	e134      	b.n	8004278 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	0013      	movs	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	189b      	adds	r3, r3, r2
 8004018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401a:	429a      	cmp	r2, r3
 800401c:	d305      	bcc.n	800402a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004026:	429a      	cmp	r2, r3
 8004028:	d906      	bls.n	8004038 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800402a:	231a      	movs	r3, #26
 800402c:	2218      	movs	r2, #24
 800402e:	189b      	adds	r3, r3, r2
 8004030:	19db      	adds	r3, r3, r7
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e11f      	b.n	8004278 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	6939      	ldr	r1, [r7, #16]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	000b      	movs	r3, r1
 8004046:	0e1b      	lsrs	r3, r3, #24
 8004048:	0010      	movs	r0, r2
 800404a:	0205      	lsls	r5, r0, #8
 800404c:	431d      	orrs	r5, r3
 800404e:	000b      	movs	r3, r1
 8004050:	021c      	lsls	r4, r3, #8
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68b8      	ldr	r0, [r7, #8]
 8004060:	68f9      	ldr	r1, [r7, #12]
 8004062:	1900      	adds	r0, r0, r4
 8004064:	4169      	adcs	r1, r5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f7fc f8de 	bl	8000234 <__aeabi_uldivmod>
 8004078:	0002      	movs	r2, r0
 800407a:	000b      	movs	r3, r1
 800407c:	0013      	movs	r3, r2
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004082:	23c0      	movs	r3, #192	; 0xc0
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	429a      	cmp	r2, r3
 8004088:	d309      	bcc.n	800409e <UART_SetConfig+0x332>
 800408a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	035b      	lsls	r3, r3, #13
 8004090:	429a      	cmp	r2, r3
 8004092:	d204      	bcs.n	800409e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e0ec      	b.n	8004278 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800409e:	231a      	movs	r3, #26
 80040a0:	2218      	movs	r2, #24
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	19db      	adds	r3, r3, r7
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e0e5      	b.n	8004278 <UART_SetConfig+0x50c>
 80040ac:	efff69f3 	.word	0xefff69f3
 80040b0:	ffffcfff 	.word	0xffffcfff
 80040b4:	40004800 	.word	0x40004800
 80040b8:	fffff4ff 	.word	0xfffff4ff
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40004400 	.word	0x40004400
 80040c8:	40004c00 	.word	0x40004c00
 80040cc:	40005000 	.word	0x40005000
 80040d0:	003d0900 	.word	0x003d0900
 80040d4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d000      	beq.n	80040e6 <UART_SetConfig+0x37a>
 80040e4:	e071      	b.n	80041ca <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80040e6:	231b      	movs	r3, #27
 80040e8:	2218      	movs	r2, #24
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	19db      	adds	r3, r3, r7
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d822      	bhi.n	800413a <UART_SetConfig+0x3ce>
 80040f4:	009a      	lsls	r2, r3, #2
 80040f6:	4b68      	ldr	r3, [pc, #416]	; (8004298 <UART_SetConfig+0x52c>)
 80040f8:	18d3      	adds	r3, r2, r3
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fe:	f7ff fb99 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8004102:	0003      	movs	r3, r0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004106:	e021      	b.n	800414c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004108:	f7ff fbaa 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 800410c:	0003      	movs	r3, r0
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004110:	e01c      	b.n	800414c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004112:	4b62      	ldr	r3, [pc, #392]	; (800429c <UART_SetConfig+0x530>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2210      	movs	r2, #16
 8004118:	4013      	ands	r3, r2
 800411a:	d002      	beq.n	8004122 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800411c:	4b60      	ldr	r3, [pc, #384]	; (80042a0 <UART_SetConfig+0x534>)
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004120:	e014      	b.n	800414c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004122:	4b60      	ldr	r3, [pc, #384]	; (80042a4 <UART_SetConfig+0x538>)
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004126:	e011      	b.n	800414c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004128:	f7ff fad4 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 800412c:	0003      	movs	r3, r0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004130:	e00c      	b.n	800414c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004138:	e008      	b.n	800414c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800413e:	231a      	movs	r3, #26
 8004140:	2218      	movs	r2, #24
 8004142:	189b      	adds	r3, r3, r2
 8004144:	19db      	adds	r3, r3, r7
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
        break;
 800414a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d100      	bne.n	8004154 <UART_SetConfig+0x3e8>
 8004152:	e091      	b.n	8004278 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	005a      	lsls	r2, r3, #1
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	18d2      	adds	r2, r2, r3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	0019      	movs	r1, r3
 8004166:	0010      	movs	r0, r2
 8004168:	f7fb ffd8 	bl	800011c <__udivsi3>
 800416c:	0003      	movs	r3, r0
 800416e:	b29b      	uxth	r3, r3
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	2b0f      	cmp	r3, #15
 8004176:	d921      	bls.n	80041bc <UART_SetConfig+0x450>
 8004178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	025b      	lsls	r3, r3, #9
 800417e:	429a      	cmp	r2, r3
 8004180:	d21c      	bcs.n	80041bc <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	b29a      	uxth	r2, r3
 8004186:	200e      	movs	r0, #14
 8004188:	2418      	movs	r4, #24
 800418a:	1903      	adds	r3, r0, r4
 800418c:	19db      	adds	r3, r3, r7
 800418e:	210f      	movs	r1, #15
 8004190:	438a      	bics	r2, r1
 8004192:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	b29b      	uxth	r3, r3
 800419a:	2207      	movs	r2, #7
 800419c:	4013      	ands	r3, r2
 800419e:	b299      	uxth	r1, r3
 80041a0:	1903      	adds	r3, r0, r4
 80041a2:	19db      	adds	r3, r3, r7
 80041a4:	1902      	adds	r2, r0, r4
 80041a6:	19d2      	adds	r2, r2, r7
 80041a8:	8812      	ldrh	r2, [r2, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	1902      	adds	r2, r0, r4
 80041b4:	19d2      	adds	r2, r2, r7
 80041b6:	8812      	ldrh	r2, [r2, #0]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	e05d      	b.n	8004278 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80041bc:	231a      	movs	r3, #26
 80041be:	2218      	movs	r2, #24
 80041c0:	189b      	adds	r3, r3, r2
 80041c2:	19db      	adds	r3, r3, r7
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	e056      	b.n	8004278 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ca:	231b      	movs	r3, #27
 80041cc:	2218      	movs	r2, #24
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	19db      	adds	r3, r3, r7
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d822      	bhi.n	800421e <UART_SetConfig+0x4b2>
 80041d8:	009a      	lsls	r2, r3, #2
 80041da:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <UART_SetConfig+0x53c>)
 80041dc:	18d3      	adds	r3, r2, r3
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7ff fb27 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 80041e6:	0003      	movs	r3, r0
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041ea:	e021      	b.n	8004230 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ec:	f7ff fb38 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 80041f0:	0003      	movs	r3, r0
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041f4:	e01c      	b.n	8004230 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f6:	4b29      	ldr	r3, [pc, #164]	; (800429c <UART_SetConfig+0x530>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2210      	movs	r2, #16
 80041fc:	4013      	ands	r3, r2
 80041fe:	d002      	beq.n	8004206 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <UART_SetConfig+0x534>)
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004204:	e014      	b.n	8004230 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8004206:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <UART_SetConfig+0x538>)
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800420a:	e011      	b.n	8004230 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420c:	f7ff fa62 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8004210:	0003      	movs	r3, r0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004214:	e00c      	b.n	8004230 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800421c:	e008      	b.n	8004230 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004222:	231a      	movs	r3, #26
 8004224:	2218      	movs	r2, #24
 8004226:	189b      	adds	r3, r3, r2
 8004228:	19db      	adds	r3, r3, r7
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
        break;
 800422e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d020      	beq.n	8004278 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	085a      	lsrs	r2, r3, #1
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	18d2      	adds	r2, r2, r3
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0019      	movs	r1, r3
 8004246:	0010      	movs	r0, r2
 8004248:	f7fb ff68 	bl	800011c <__udivsi3>
 800424c:	0003      	movs	r3, r0
 800424e:	b29b      	uxth	r3, r3
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d909      	bls.n	800426c <UART_SetConfig+0x500>
 8004258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	429a      	cmp	r2, r3
 8004260:	d204      	bcs.n	800426c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	60da      	str	r2, [r3, #12]
 800426a:	e005      	b.n	8004278 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800426c:	231a      	movs	r3, #26
 800426e:	2218      	movs	r2, #24
 8004270:	189b      	adds	r3, r3, r2
 8004272:	19db      	adds	r3, r3, r7
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2200      	movs	r2, #0
 800427c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2200      	movs	r2, #0
 8004282:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004284:	231a      	movs	r3, #26
 8004286:	2218      	movs	r2, #24
 8004288:	189b      	adds	r3, r3, r2
 800428a:	19db      	adds	r3, r3, r7
 800428c:	781b      	ldrb	r3, [r3, #0]
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b00e      	add	sp, #56	; 0x38
 8004294:	bdb0      	pop	{r4, r5, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	08005c88 	.word	0x08005c88
 800429c:	40021000 	.word	0x40021000
 80042a0:	003d0900 	.word	0x003d0900
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	08005cac 	.word	0x08005cac

080042ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2201      	movs	r2, #1
 80042ba:	4013      	ands	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a4a      	ldr	r2, [pc, #296]	; (80043f0 <UART_AdvFeatureConfig+0x144>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2202      	movs	r2, #2
 80042dc:	4013      	ands	r3, r2
 80042de:	d00b      	beq.n	80042f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4a43      	ldr	r2, [pc, #268]	; (80043f4 <UART_AdvFeatureConfig+0x148>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	2204      	movs	r2, #4
 80042fe:	4013      	ands	r3, r2
 8004300:	d00b      	beq.n	800431a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a3b      	ldr	r2, [pc, #236]	; (80043f8 <UART_AdvFeatureConfig+0x14c>)
 800430a:	4013      	ands	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2208      	movs	r2, #8
 8004320:	4013      	ands	r3, r2
 8004322:	d00b      	beq.n	800433c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a34      	ldr	r2, [pc, #208]	; (80043fc <UART_AdvFeatureConfig+0x150>)
 800432c:	4013      	ands	r3, r2
 800432e:	0019      	movs	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2210      	movs	r2, #16
 8004342:	4013      	ands	r3, r2
 8004344:	d00b      	beq.n	800435e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4a2c      	ldr	r2, [pc, #176]	; (8004400 <UART_AdvFeatureConfig+0x154>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2220      	movs	r2, #32
 8004364:	4013      	ands	r3, r2
 8004366:	d00b      	beq.n	8004380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a25      	ldr	r2, [pc, #148]	; (8004404 <UART_AdvFeatureConfig+0x158>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	2240      	movs	r2, #64	; 0x40
 8004386:	4013      	ands	r3, r2
 8004388:	d01d      	beq.n	80043c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <UART_AdvFeatureConfig+0x15c>)
 8004392:	4013      	ands	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	035b      	lsls	r3, r3, #13
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d10b      	bne.n	80043c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <UART_AdvFeatureConfig+0x160>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	4013      	ands	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <UART_AdvFeatureConfig+0x164>)
 80043d8:	4013      	ands	r3, r2
 80043da:	0019      	movs	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	fffdffff 	.word	0xfffdffff
 80043f4:	fffeffff 	.word	0xfffeffff
 80043f8:	fffbffff 	.word	0xfffbffff
 80043fc:	ffff7fff 	.word	0xffff7fff
 8004400:	ffffefff 	.word	0xffffefff
 8004404:	ffffdfff 	.word	0xffffdfff
 8004408:	ffefffff 	.word	0xffefffff
 800440c:	ff9fffff 	.word	0xff9fffff
 8004410:	fff7ffff 	.word	0xfff7ffff

08004414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	2100      	movs	r1, #0
 8004422:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004424:	f7fd fa18 	bl	8001858 <HAL_GetTick>
 8004428:	0003      	movs	r3, r0
 800442a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2208      	movs	r2, #8
 8004434:	4013      	ands	r3, r2
 8004436:	2b08      	cmp	r3, #8
 8004438:	d10c      	bne.n	8004454 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	0391      	lsls	r1, r2, #14
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <UART_CheckIdleState+0x8c>)
 8004444:	9200      	str	r2, [sp, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	f000 f82c 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 800444c:	1e03      	subs	r3, r0, #0
 800444e:	d001      	beq.n	8004454 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e021      	b.n	8004498 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2204      	movs	r2, #4
 800445c:	4013      	ands	r3, r2
 800445e:	2b04      	cmp	r3, #4
 8004460:	d10c      	bne.n	800447c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	03d1      	lsls	r1, r2, #15
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4a0d      	ldr	r2, [pc, #52]	; (80044a0 <UART_CheckIdleState+0x8c>)
 800446c:	9200      	str	r2, [sp, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	f000 f818 	bl	80044a4 <UART_WaitOnFlagUntilTimeout>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d001      	beq.n	800447c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e00d      	b.n	8004498 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2274      	movs	r2, #116	; 0x74
 8004492:	2100      	movs	r1, #0
 8004494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b004      	add	sp, #16
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	01ffffff 	.word	0x01ffffff

080044a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b094      	sub	sp, #80	; 0x50
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	1dfb      	adds	r3, r7, #7
 80044b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b4:	e0a3      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b8:	3301      	adds	r3, #1
 80044ba:	d100      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x1a>
 80044bc:	e09f      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fd f9cb 	bl	8001858 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d13d      	bne.n	8004550 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d4:	f3ef 8310 	mrs	r3, PRIMASK
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
 80044de:	2301      	movs	r3, #1
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	f383 8810 	msr	PRIMASK, r3
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	494c      	ldr	r1, [pc, #304]	; (8004628 <UART_WaitOnFlagUntilTimeout+0x184>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	f383 8810 	msr	PRIMASK, r3
}
 8004504:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004506:	f3ef 8310 	mrs	r3, PRIMASK
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800450c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	643b      	str	r3, [r7, #64]	; 0x40
 8004510:	2301      	movs	r3, #1
 8004512:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	f383 8810 	msr	PRIMASK, r3
}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2101      	movs	r1, #1
 8004528:	438a      	bics	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	f383 8810 	msr	PRIMASK, r3
}
 8004536:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2274      	movs	r2, #116	; 0x74
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e067      	b.n	8004620 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2204      	movs	r2, #4
 8004558:	4013      	ands	r3, r2
 800455a:	d050      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	401a      	ands	r2, r3
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	429a      	cmp	r2, r3
 800456e:	d146      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457a:	f3ef 8310 	mrs	r3, PRIMASK
 800457e:	613b      	str	r3, [r7, #16]
  return(result);
 8004580:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004584:	2301      	movs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4923      	ldr	r1, [pc, #140]	; (8004628 <UART_WaitOnFlagUntilTimeout+0x184>)
 800459c:	400a      	ands	r2, r1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ac:	f3ef 8310 	mrs	r3, PRIMASK
 80045b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80045b2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b6:	2301      	movs	r3, #1
 80045b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	438a      	bics	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2280      	movs	r2, #128	; 0x80
 80045ee:	2120      	movs	r1, #32
 80045f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2274      	movs	r2, #116	; 0x74
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e010      	b.n	8004620 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	4013      	ands	r3, r2
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	425a      	negs	r2, r3
 800460e:	4153      	adcs	r3, r2
 8004610:	b2db      	uxtb	r3, r3
 8004612:	001a      	movs	r2, r3
 8004614:	1dfb      	adds	r3, r7, #7
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d100      	bne.n	800461e <UART_WaitOnFlagUntilTimeout+0x17a>
 800461c:	e74b      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b014      	add	sp, #80	; 0x50
 8004626:	bd80      	pop	{r7, pc}
 8004628:	fffffe5f 	.word	0xfffffe5f

0800462c <__errno>:
 800462c:	4b01      	ldr	r3, [pc, #4]	; (8004634 <__errno+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	4770      	bx	lr
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	2000000c 	.word	0x2000000c

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	2600      	movs	r6, #0
 800463c:	4d0c      	ldr	r5, [pc, #48]	; (8004670 <__libc_init_array+0x38>)
 800463e:	4c0d      	ldr	r4, [pc, #52]	; (8004674 <__libc_init_array+0x3c>)
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	2600      	movs	r6, #0
 800464a:	f001 f8d1 	bl	80057f0 <_init>
 800464e:	4d0a      	ldr	r5, [pc, #40]	; (8004678 <__libc_init_array+0x40>)
 8004650:	4c0a      	ldr	r4, [pc, #40]	; (800467c <__libc_init_array+0x44>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	00b3      	lsls	r3, r6, #2
 800465e:	58eb      	ldr	r3, [r5, r3]
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	00b3      	lsls	r3, r6, #2
 8004668:	58eb      	ldr	r3, [r5, r3]
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	08005d98 	.word	0x08005d98
 8004674:	08005d98 	.word	0x08005d98
 8004678:	08005d98 	.word	0x08005d98
 800467c:	08005d9c 	.word	0x08005d9c

08004680 <__itoa>:
 8004680:	1e93      	subs	r3, r2, #2
 8004682:	b510      	push	{r4, lr}
 8004684:	000c      	movs	r4, r1
 8004686:	2b22      	cmp	r3, #34	; 0x22
 8004688:	d904      	bls.n	8004694 <__itoa+0x14>
 800468a:	2300      	movs	r3, #0
 800468c:	001c      	movs	r4, r3
 800468e:	700b      	strb	r3, [r1, #0]
 8004690:	0020      	movs	r0, r4
 8004692:	bd10      	pop	{r4, pc}
 8004694:	2a0a      	cmp	r2, #10
 8004696:	d109      	bne.n	80046ac <__itoa+0x2c>
 8004698:	2800      	cmp	r0, #0
 800469a:	da07      	bge.n	80046ac <__itoa+0x2c>
 800469c:	232d      	movs	r3, #45	; 0x2d
 800469e:	700b      	strb	r3, [r1, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	4240      	negs	r0, r0
 80046a4:	1861      	adds	r1, r4, r1
 80046a6:	f000 f8af 	bl	8004808 <__utoa>
 80046aa:	e7f1      	b.n	8004690 <__itoa+0x10>
 80046ac:	2100      	movs	r1, #0
 80046ae:	e7f9      	b.n	80046a4 <__itoa+0x24>

080046b0 <itoa>:
 80046b0:	b510      	push	{r4, lr}
 80046b2:	f7ff ffe5 	bl	8004680 <__itoa>
 80046b6:	bd10      	pop	{r4, pc}

080046b8 <memcpy>:
 80046b8:	2300      	movs	r3, #0
 80046ba:	b510      	push	{r4, lr}
 80046bc:	429a      	cmp	r2, r3
 80046be:	d100      	bne.n	80046c2 <memcpy+0xa>
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	5ccc      	ldrb	r4, [r1, r3]
 80046c4:	54c4      	strb	r4, [r0, r3]
 80046c6:	3301      	adds	r3, #1
 80046c8:	e7f8      	b.n	80046bc <memcpy+0x4>

080046ca <memset>:
 80046ca:	0003      	movs	r3, r0
 80046cc:	1882      	adds	r2, r0, r2
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d100      	bne.n	80046d4 <memset+0xa>
 80046d2:	4770      	bx	lr
 80046d4:	7019      	strb	r1, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	e7f9      	b.n	80046ce <memset+0x4>
	...

080046dc <iprintf>:
 80046dc:	b40f      	push	{r0, r1, r2, r3}
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <iprintf+0x30>)
 80046e0:	b513      	push	{r0, r1, r4, lr}
 80046e2:	681c      	ldr	r4, [r3, #0]
 80046e4:	2c00      	cmp	r4, #0
 80046e6:	d005      	beq.n	80046f4 <iprintf+0x18>
 80046e8:	69a3      	ldr	r3, [r4, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <iprintf+0x18>
 80046ee:	0020      	movs	r0, r4
 80046f0:	f000 fabc 	bl	8004c6c <__sinit>
 80046f4:	ab05      	add	r3, sp, #20
 80046f6:	0020      	movs	r0, r4
 80046f8:	9a04      	ldr	r2, [sp, #16]
 80046fa:	68a1      	ldr	r1, [r4, #8]
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	f000 fccf 	bl	80050a0 <_vfiprintf_r>
 8004702:	bc16      	pop	{r1, r2, r4}
 8004704:	bc08      	pop	{r3}
 8004706:	b004      	add	sp, #16
 8004708:	4718      	bx	r3
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	2000000c 	.word	0x2000000c

08004710 <_puts_r>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	0005      	movs	r5, r0
 8004714:	000e      	movs	r6, r1
 8004716:	2800      	cmp	r0, #0
 8004718:	d004      	beq.n	8004724 <_puts_r+0x14>
 800471a:	6983      	ldr	r3, [r0, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <_puts_r+0x14>
 8004720:	f000 faa4 	bl	8004c6c <__sinit>
 8004724:	69ab      	ldr	r3, [r5, #24]
 8004726:	68ac      	ldr	r4, [r5, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <_puts_r+0x22>
 800472c:	0028      	movs	r0, r5
 800472e:	f000 fa9d 	bl	8004c6c <__sinit>
 8004732:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <_puts_r+0xd8>)
 8004734:	429c      	cmp	r4, r3
 8004736:	d122      	bne.n	800477e <_puts_r+0x6e>
 8004738:	686c      	ldr	r4, [r5, #4]
 800473a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800473c:	07db      	lsls	r3, r3, #31
 800473e:	d405      	bmi.n	800474c <_puts_r+0x3c>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	059b      	lsls	r3, r3, #22
 8004744:	d402      	bmi.n	800474c <_puts_r+0x3c>
 8004746:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004748:	f000 fb31 	bl	8004dae <__retarget_lock_acquire_recursive>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	071b      	lsls	r3, r3, #28
 8004750:	d502      	bpl.n	8004758 <_puts_r+0x48>
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d129      	bne.n	80047ac <_puts_r+0x9c>
 8004758:	0021      	movs	r1, r4
 800475a:	0028      	movs	r0, r5
 800475c:	f000 f8e0 	bl	8004920 <__swsetup_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	d023      	beq.n	80047ac <_puts_r+0x9c>
 8004764:	2501      	movs	r5, #1
 8004766:	426d      	negs	r5, r5
 8004768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800476a:	07db      	lsls	r3, r3, #31
 800476c:	d405      	bmi.n	800477a <_puts_r+0x6a>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	059b      	lsls	r3, r3, #22
 8004772:	d402      	bmi.n	800477a <_puts_r+0x6a>
 8004774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004776:	f000 fb1b 	bl	8004db0 <__retarget_lock_release_recursive>
 800477a:	0028      	movs	r0, r5
 800477c:	bd70      	pop	{r4, r5, r6, pc}
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <_puts_r+0xdc>)
 8004780:	429c      	cmp	r4, r3
 8004782:	d101      	bne.n	8004788 <_puts_r+0x78>
 8004784:	68ac      	ldr	r4, [r5, #8]
 8004786:	e7d8      	b.n	800473a <_puts_r+0x2a>
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <_puts_r+0xe0>)
 800478a:	429c      	cmp	r4, r3
 800478c:	d1d5      	bne.n	800473a <_puts_r+0x2a>
 800478e:	68ec      	ldr	r4, [r5, #12]
 8004790:	e7d3      	b.n	800473a <_puts_r+0x2a>
 8004792:	3601      	adds	r6, #1
 8004794:	60a3      	str	r3, [r4, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	da04      	bge.n	80047a4 <_puts_r+0x94>
 800479a:	69a2      	ldr	r2, [r4, #24]
 800479c:	429a      	cmp	r2, r3
 800479e:	dc16      	bgt.n	80047ce <_puts_r+0xbe>
 80047a0:	290a      	cmp	r1, #10
 80047a2:	d014      	beq.n	80047ce <_puts_r+0xbe>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	7019      	strb	r1, [r3, #0]
 80047ac:	68a3      	ldr	r3, [r4, #8]
 80047ae:	7831      	ldrb	r1, [r6, #0]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	2900      	cmp	r1, #0
 80047b4:	d1ed      	bne.n	8004792 <_puts_r+0x82>
 80047b6:	60a3      	str	r3, [r4, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da0f      	bge.n	80047dc <_puts_r+0xcc>
 80047bc:	0028      	movs	r0, r5
 80047be:	0022      	movs	r2, r4
 80047c0:	310a      	adds	r1, #10
 80047c2:	f000 f857 	bl	8004874 <__swbuf_r>
 80047c6:	250a      	movs	r5, #10
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d1cd      	bne.n	8004768 <_puts_r+0x58>
 80047cc:	e7ca      	b.n	8004764 <_puts_r+0x54>
 80047ce:	0022      	movs	r2, r4
 80047d0:	0028      	movs	r0, r5
 80047d2:	f000 f84f 	bl	8004874 <__swbuf_r>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d1e8      	bne.n	80047ac <_puts_r+0x9c>
 80047da:	e7c3      	b.n	8004764 <_puts_r+0x54>
 80047dc:	250a      	movs	r5, #10
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	6022      	str	r2, [r4, #0]
 80047e4:	701d      	strb	r5, [r3, #0]
 80047e6:	e7bf      	b.n	8004768 <_puts_r+0x58>
 80047e8:	08005d1c 	.word	0x08005d1c
 80047ec:	08005d3c 	.word	0x08005d3c
 80047f0:	08005cfc 	.word	0x08005cfc

080047f4 <puts>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4b03      	ldr	r3, [pc, #12]	; (8004804 <puts+0x10>)
 80047f8:	0001      	movs	r1, r0
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	f7ff ff88 	bl	8004710 <_puts_r>
 8004800:	bd10      	pop	{r4, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	2000000c 	.word	0x2000000c

08004808 <__utoa>:
 8004808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480a:	000c      	movs	r4, r1
 800480c:	0016      	movs	r6, r2
 800480e:	b08d      	sub	sp, #52	; 0x34
 8004810:	2225      	movs	r2, #37	; 0x25
 8004812:	0007      	movs	r7, r0
 8004814:	4916      	ldr	r1, [pc, #88]	; (8004870 <__utoa+0x68>)
 8004816:	a802      	add	r0, sp, #8
 8004818:	f7ff ff4e 	bl	80046b8 <memcpy>
 800481c:	1e62      	subs	r2, r4, #1
 800481e:	9200      	str	r2, [sp, #0]
 8004820:	1eb3      	subs	r3, r6, #2
 8004822:	aa02      	add	r2, sp, #8
 8004824:	2500      	movs	r5, #0
 8004826:	9201      	str	r2, [sp, #4]
 8004828:	2b22      	cmp	r3, #34	; 0x22
 800482a:	d904      	bls.n	8004836 <__utoa+0x2e>
 800482c:	7025      	strb	r5, [r4, #0]
 800482e:	002c      	movs	r4, r5
 8004830:	0020      	movs	r0, r4
 8004832:	b00d      	add	sp, #52	; 0x34
 8004834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004836:	0038      	movs	r0, r7
 8004838:	0031      	movs	r1, r6
 800483a:	f7fb fcf5 	bl	8000228 <__aeabi_uidivmod>
 800483e:	000b      	movs	r3, r1
 8004840:	9a01      	ldr	r2, [sp, #4]
 8004842:	0029      	movs	r1, r5
 8004844:	5cd3      	ldrb	r3, [r2, r3]
 8004846:	9a00      	ldr	r2, [sp, #0]
 8004848:	3501      	adds	r5, #1
 800484a:	5553      	strb	r3, [r2, r5]
 800484c:	003b      	movs	r3, r7
 800484e:	0007      	movs	r7, r0
 8004850:	429e      	cmp	r6, r3
 8004852:	d9f0      	bls.n	8004836 <__utoa+0x2e>
 8004854:	2300      	movs	r3, #0
 8004856:	0022      	movs	r2, r4
 8004858:	5563      	strb	r3, [r4, r5]
 800485a:	000b      	movs	r3, r1
 800485c:	1ac8      	subs	r0, r1, r3
 800485e:	4283      	cmp	r3, r0
 8004860:	dde6      	ble.n	8004830 <__utoa+0x28>
 8004862:	7810      	ldrb	r0, [r2, #0]
 8004864:	5ce5      	ldrb	r5, [r4, r3]
 8004866:	7015      	strb	r5, [r2, #0]
 8004868:	54e0      	strb	r0, [r4, r3]
 800486a:	3201      	adds	r2, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	e7f5      	b.n	800485c <__utoa+0x54>
 8004870:	08005cd4 	.word	0x08005cd4

08004874 <__swbuf_r>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	0005      	movs	r5, r0
 8004878:	000e      	movs	r6, r1
 800487a:	0014      	movs	r4, r2
 800487c:	2800      	cmp	r0, #0
 800487e:	d004      	beq.n	800488a <__swbuf_r+0x16>
 8004880:	6983      	ldr	r3, [r0, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <__swbuf_r+0x16>
 8004886:	f000 f9f1 	bl	8004c6c <__sinit>
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <__swbuf_r+0xa0>)
 800488c:	429c      	cmp	r4, r3
 800488e:	d12e      	bne.n	80048ee <__swbuf_r+0x7a>
 8004890:	686c      	ldr	r4, [r5, #4]
 8004892:	69a3      	ldr	r3, [r4, #24]
 8004894:	60a3      	str	r3, [r4, #8]
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	071b      	lsls	r3, r3, #28
 800489a:	d532      	bpl.n	8004902 <__swbuf_r+0x8e>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02f      	beq.n	8004902 <__swbuf_r+0x8e>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	6922      	ldr	r2, [r4, #16]
 80048a6:	b2f7      	uxtb	r7, r6
 80048a8:	1a98      	subs	r0, r3, r2
 80048aa:	6963      	ldr	r3, [r4, #20]
 80048ac:	b2f6      	uxtb	r6, r6
 80048ae:	4283      	cmp	r3, r0
 80048b0:	dc05      	bgt.n	80048be <__swbuf_r+0x4a>
 80048b2:	0021      	movs	r1, r4
 80048b4:	0028      	movs	r0, r5
 80048b6:	f000 f937 	bl	8004b28 <_fflush_r>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d127      	bne.n	800490e <__swbuf_r+0x9a>
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	3001      	adds	r0, #1
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60a3      	str	r3, [r4, #8]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	6022      	str	r2, [r4, #0]
 80048cc:	701f      	strb	r7, [r3, #0]
 80048ce:	6963      	ldr	r3, [r4, #20]
 80048d0:	4283      	cmp	r3, r0
 80048d2:	d004      	beq.n	80048de <__swbuf_r+0x6a>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	07db      	lsls	r3, r3, #31
 80048d8:	d507      	bpl.n	80048ea <__swbuf_r+0x76>
 80048da:	2e0a      	cmp	r6, #10
 80048dc:	d105      	bne.n	80048ea <__swbuf_r+0x76>
 80048de:	0021      	movs	r1, r4
 80048e0:	0028      	movs	r0, r5
 80048e2:	f000 f921 	bl	8004b28 <_fflush_r>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d111      	bne.n	800490e <__swbuf_r+0x9a>
 80048ea:	0030      	movs	r0, r6
 80048ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <__swbuf_r+0xa4>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	d101      	bne.n	80048f8 <__swbuf_r+0x84>
 80048f4:	68ac      	ldr	r4, [r5, #8]
 80048f6:	e7cc      	b.n	8004892 <__swbuf_r+0x1e>
 80048f8:	4b08      	ldr	r3, [pc, #32]	; (800491c <__swbuf_r+0xa8>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d1c9      	bne.n	8004892 <__swbuf_r+0x1e>
 80048fe:	68ec      	ldr	r4, [r5, #12]
 8004900:	e7c7      	b.n	8004892 <__swbuf_r+0x1e>
 8004902:	0021      	movs	r1, r4
 8004904:	0028      	movs	r0, r5
 8004906:	f000 f80b 	bl	8004920 <__swsetup_r>
 800490a:	2800      	cmp	r0, #0
 800490c:	d0c9      	beq.n	80048a2 <__swbuf_r+0x2e>
 800490e:	2601      	movs	r6, #1
 8004910:	4276      	negs	r6, r6
 8004912:	e7ea      	b.n	80048ea <__swbuf_r+0x76>
 8004914:	08005d1c 	.word	0x08005d1c
 8004918:	08005d3c 	.word	0x08005d3c
 800491c:	08005cfc 	.word	0x08005cfc

08004920 <__swsetup_r>:
 8004920:	4b37      	ldr	r3, [pc, #220]	; (8004a00 <__swsetup_r+0xe0>)
 8004922:	b570      	push	{r4, r5, r6, lr}
 8004924:	681d      	ldr	r5, [r3, #0]
 8004926:	0006      	movs	r6, r0
 8004928:	000c      	movs	r4, r1
 800492a:	2d00      	cmp	r5, #0
 800492c:	d005      	beq.n	800493a <__swsetup_r+0x1a>
 800492e:	69ab      	ldr	r3, [r5, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <__swsetup_r+0x1a>
 8004934:	0028      	movs	r0, r5
 8004936:	f000 f999 	bl	8004c6c <__sinit>
 800493a:	4b32      	ldr	r3, [pc, #200]	; (8004a04 <__swsetup_r+0xe4>)
 800493c:	429c      	cmp	r4, r3
 800493e:	d10f      	bne.n	8004960 <__swsetup_r+0x40>
 8004940:	686c      	ldr	r4, [r5, #4]
 8004942:	230c      	movs	r3, #12
 8004944:	5ee2      	ldrsh	r2, [r4, r3]
 8004946:	b293      	uxth	r3, r2
 8004948:	0711      	lsls	r1, r2, #28
 800494a:	d42d      	bmi.n	80049a8 <__swsetup_r+0x88>
 800494c:	06d9      	lsls	r1, r3, #27
 800494e:	d411      	bmi.n	8004974 <__swsetup_r+0x54>
 8004950:	2309      	movs	r3, #9
 8004952:	2001      	movs	r0, #1
 8004954:	6033      	str	r3, [r6, #0]
 8004956:	3337      	adds	r3, #55	; 0x37
 8004958:	4313      	orrs	r3, r2
 800495a:	81a3      	strh	r3, [r4, #12]
 800495c:	4240      	negs	r0, r0
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <__swsetup_r+0xe8>)
 8004962:	429c      	cmp	r4, r3
 8004964:	d101      	bne.n	800496a <__swsetup_r+0x4a>
 8004966:	68ac      	ldr	r4, [r5, #8]
 8004968:	e7eb      	b.n	8004942 <__swsetup_r+0x22>
 800496a:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <__swsetup_r+0xec>)
 800496c:	429c      	cmp	r4, r3
 800496e:	d1e8      	bne.n	8004942 <__swsetup_r+0x22>
 8004970:	68ec      	ldr	r4, [r5, #12]
 8004972:	e7e6      	b.n	8004942 <__swsetup_r+0x22>
 8004974:	075b      	lsls	r3, r3, #29
 8004976:	d513      	bpl.n	80049a0 <__swsetup_r+0x80>
 8004978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800497a:	2900      	cmp	r1, #0
 800497c:	d008      	beq.n	8004990 <__swsetup_r+0x70>
 800497e:	0023      	movs	r3, r4
 8004980:	3344      	adds	r3, #68	; 0x44
 8004982:	4299      	cmp	r1, r3
 8004984:	d002      	beq.n	800498c <__swsetup_r+0x6c>
 8004986:	0030      	movs	r0, r6
 8004988:	f000 fa80 	bl	8004e8c <_free_r>
 800498c:	2300      	movs	r3, #0
 800498e:	6363      	str	r3, [r4, #52]	; 0x34
 8004990:	2224      	movs	r2, #36	; 0x24
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	4393      	bics	r3, r2
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	2300      	movs	r3, #0
 800499a:	6063      	str	r3, [r4, #4]
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	6023      	str	r3, [r4, #0]
 80049a0:	2308      	movs	r3, #8
 80049a2:	89a2      	ldrh	r2, [r4, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	6923      	ldr	r3, [r4, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <__swsetup_r+0xa6>
 80049ae:	21a0      	movs	r1, #160	; 0xa0
 80049b0:	2280      	movs	r2, #128	; 0x80
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	0089      	lsls	r1, r1, #2
 80049b6:	0092      	lsls	r2, r2, #2
 80049b8:	400b      	ands	r3, r1
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <__swsetup_r+0xa6>
 80049be:	0021      	movs	r1, r4
 80049c0:	0030      	movs	r0, r6
 80049c2:	f000 fa1f 	bl	8004e04 <__smakebuf_r>
 80049c6:	220c      	movs	r2, #12
 80049c8:	5ea3      	ldrsh	r3, [r4, r2]
 80049ca:	2001      	movs	r0, #1
 80049cc:	001a      	movs	r2, r3
 80049ce:	b299      	uxth	r1, r3
 80049d0:	4002      	ands	r2, r0
 80049d2:	4203      	tst	r3, r0
 80049d4:	d00f      	beq.n	80049f6 <__swsetup_r+0xd6>
 80049d6:	2200      	movs	r2, #0
 80049d8:	60a2      	str	r2, [r4, #8]
 80049da:	6962      	ldr	r2, [r4, #20]
 80049dc:	4252      	negs	r2, r2
 80049de:	61a2      	str	r2, [r4, #24]
 80049e0:	2000      	movs	r0, #0
 80049e2:	6922      	ldr	r2, [r4, #16]
 80049e4:	4282      	cmp	r2, r0
 80049e6:	d1ba      	bne.n	800495e <__swsetup_r+0x3e>
 80049e8:	060a      	lsls	r2, r1, #24
 80049ea:	d5b8      	bpl.n	800495e <__swsetup_r+0x3e>
 80049ec:	2240      	movs	r2, #64	; 0x40
 80049ee:	4313      	orrs	r3, r2
 80049f0:	81a3      	strh	r3, [r4, #12]
 80049f2:	3801      	subs	r0, #1
 80049f4:	e7b3      	b.n	800495e <__swsetup_r+0x3e>
 80049f6:	0788      	lsls	r0, r1, #30
 80049f8:	d400      	bmi.n	80049fc <__swsetup_r+0xdc>
 80049fa:	6962      	ldr	r2, [r4, #20]
 80049fc:	60a2      	str	r2, [r4, #8]
 80049fe:	e7ef      	b.n	80049e0 <__swsetup_r+0xc0>
 8004a00:	2000000c 	.word	0x2000000c
 8004a04:	08005d1c 	.word	0x08005d1c
 8004a08:	08005d3c 	.word	0x08005d3c
 8004a0c:	08005cfc 	.word	0x08005cfc

08004a10 <__sflush_r>:
 8004a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a12:	898b      	ldrh	r3, [r1, #12]
 8004a14:	0005      	movs	r5, r0
 8004a16:	000c      	movs	r4, r1
 8004a18:	071a      	lsls	r2, r3, #28
 8004a1a:	d45f      	bmi.n	8004adc <__sflush_r+0xcc>
 8004a1c:	684a      	ldr	r2, [r1, #4]
 8004a1e:	2a00      	cmp	r2, #0
 8004a20:	dc04      	bgt.n	8004a2c <__sflush_r+0x1c>
 8004a22:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004a24:	2a00      	cmp	r2, #0
 8004a26:	dc01      	bgt.n	8004a2c <__sflush_r+0x1c>
 8004a28:	2000      	movs	r0, #0
 8004a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a2e:	2f00      	cmp	r7, #0
 8004a30:	d0fa      	beq.n	8004a28 <__sflush_r+0x18>
 8004a32:	2200      	movs	r2, #0
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	682e      	ldr	r6, [r5, #0]
 8004a38:	602a      	str	r2, [r5, #0]
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	0149      	lsls	r1, r1, #5
 8004a3e:	400a      	ands	r2, r1
 8004a40:	420b      	tst	r3, r1
 8004a42:	d034      	beq.n	8004aae <__sflush_r+0x9e>
 8004a44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	075b      	lsls	r3, r3, #29
 8004a4a:	d506      	bpl.n	8004a5a <__sflush_r+0x4a>
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	1ac0      	subs	r0, r0, r3
 8004a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <__sflush_r+0x4a>
 8004a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a58:	1ac0      	subs	r0, r0, r3
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	6a21      	ldr	r1, [r4, #32]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	0028      	movs	r0, r5
 8004a62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a64:	47b8      	blx	r7
 8004a66:	89a1      	ldrh	r1, [r4, #12]
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d106      	bne.n	8004a7a <__sflush_r+0x6a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	2b1d      	cmp	r3, #29
 8004a70:	d831      	bhi.n	8004ad6 <__sflush_r+0xc6>
 8004a72:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <__sflush_r+0x114>)
 8004a74:	40da      	lsrs	r2, r3
 8004a76:	07d3      	lsls	r3, r2, #31
 8004a78:	d52d      	bpl.n	8004ad6 <__sflush_r+0xc6>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	04cb      	lsls	r3, r1, #19
 8004a84:	d505      	bpl.n	8004a92 <__sflush_r+0x82>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d102      	bne.n	8004a90 <__sflush_r+0x80>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d100      	bne.n	8004a92 <__sflush_r+0x82>
 8004a90:	6560      	str	r0, [r4, #84]	; 0x54
 8004a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a94:	602e      	str	r6, [r5, #0]
 8004a96:	2900      	cmp	r1, #0
 8004a98:	d0c6      	beq.n	8004a28 <__sflush_r+0x18>
 8004a9a:	0023      	movs	r3, r4
 8004a9c:	3344      	adds	r3, #68	; 0x44
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	d002      	beq.n	8004aa8 <__sflush_r+0x98>
 8004aa2:	0028      	movs	r0, r5
 8004aa4:	f000 f9f2 	bl	8004e8c <_free_r>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	6360      	str	r0, [r4, #52]	; 0x34
 8004aac:	e7bd      	b.n	8004a2a <__sflush_r+0x1a>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	0028      	movs	r0, r5
 8004ab2:	6a21      	ldr	r1, [r4, #32]
 8004ab4:	47b8      	blx	r7
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	d1c5      	bne.n	8004a46 <__sflush_r+0x36>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0c2      	beq.n	8004a46 <__sflush_r+0x36>
 8004ac0:	2b1d      	cmp	r3, #29
 8004ac2:	d001      	beq.n	8004ac8 <__sflush_r+0xb8>
 8004ac4:	2b16      	cmp	r3, #22
 8004ac6:	d101      	bne.n	8004acc <__sflush_r+0xbc>
 8004ac8:	602e      	str	r6, [r5, #0]
 8004aca:	e7ad      	b.n	8004a28 <__sflush_r+0x18>
 8004acc:	2340      	movs	r3, #64	; 0x40
 8004ace:	89a2      	ldrh	r2, [r4, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	e7a9      	b.n	8004a2a <__sflush_r+0x1a>
 8004ad6:	2340      	movs	r3, #64	; 0x40
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	e7fa      	b.n	8004ad2 <__sflush_r+0xc2>
 8004adc:	690f      	ldr	r7, [r1, #16]
 8004ade:	2f00      	cmp	r7, #0
 8004ae0:	d0a2      	beq.n	8004a28 <__sflush_r+0x18>
 8004ae2:	680a      	ldr	r2, [r1, #0]
 8004ae4:	600f      	str	r7, [r1, #0]
 8004ae6:	1bd2      	subs	r2, r2, r7
 8004ae8:	9201      	str	r2, [sp, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	079b      	lsls	r3, r3, #30
 8004aee:	d100      	bne.n	8004af2 <__sflush_r+0xe2>
 8004af0:	694a      	ldr	r2, [r1, #20]
 8004af2:	60a2      	str	r2, [r4, #8]
 8004af4:	9b01      	ldr	r3, [sp, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	dc00      	bgt.n	8004afc <__sflush_r+0xec>
 8004afa:	e795      	b.n	8004a28 <__sflush_r+0x18>
 8004afc:	003a      	movs	r2, r7
 8004afe:	0028      	movs	r0, r5
 8004b00:	9b01      	ldr	r3, [sp, #4]
 8004b02:	6a21      	ldr	r1, [r4, #32]
 8004b04:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b06:	47b0      	blx	r6
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	dc06      	bgt.n	8004b1a <__sflush_r+0x10a>
 8004b0c:	2340      	movs	r3, #64	; 0x40
 8004b0e:	2001      	movs	r0, #1
 8004b10:	89a2      	ldrh	r2, [r4, #12]
 8004b12:	4240      	negs	r0, r0
 8004b14:	4313      	orrs	r3, r2
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	e787      	b.n	8004a2a <__sflush_r+0x1a>
 8004b1a:	9b01      	ldr	r3, [sp, #4]
 8004b1c:	183f      	adds	r7, r7, r0
 8004b1e:	1a1b      	subs	r3, r3, r0
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	e7e7      	b.n	8004af4 <__sflush_r+0xe4>
 8004b24:	20400001 	.word	0x20400001

08004b28 <_fflush_r>:
 8004b28:	690b      	ldr	r3, [r1, #16]
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	0005      	movs	r5, r0
 8004b2e:	000c      	movs	r4, r1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <_fflush_r+0x12>
 8004b34:	2500      	movs	r5, #0
 8004b36:	0028      	movs	r0, r5
 8004b38:	bd70      	pop	{r4, r5, r6, pc}
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d004      	beq.n	8004b48 <_fflush_r+0x20>
 8004b3e:	6983      	ldr	r3, [r0, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <_fflush_r+0x20>
 8004b44:	f000 f892 	bl	8004c6c <__sinit>
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <_fflush_r+0x74>)
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	d11b      	bne.n	8004b86 <_fflush_r+0x5e>
 8004b4e:	686c      	ldr	r4, [r5, #4]
 8004b50:	220c      	movs	r2, #12
 8004b52:	5ea3      	ldrsh	r3, [r4, r2]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ed      	beq.n	8004b34 <_fflush_r+0xc>
 8004b58:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b5a:	07d2      	lsls	r2, r2, #31
 8004b5c:	d404      	bmi.n	8004b68 <_fflush_r+0x40>
 8004b5e:	059b      	lsls	r3, r3, #22
 8004b60:	d402      	bmi.n	8004b68 <_fflush_r+0x40>
 8004b62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b64:	f000 f923 	bl	8004dae <__retarget_lock_acquire_recursive>
 8004b68:	0028      	movs	r0, r5
 8004b6a:	0021      	movs	r1, r4
 8004b6c:	f7ff ff50 	bl	8004a10 <__sflush_r>
 8004b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b72:	0005      	movs	r5, r0
 8004b74:	07db      	lsls	r3, r3, #31
 8004b76:	d4de      	bmi.n	8004b36 <_fflush_r+0xe>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	059b      	lsls	r3, r3, #22
 8004b7c:	d4db      	bmi.n	8004b36 <_fflush_r+0xe>
 8004b7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b80:	f000 f916 	bl	8004db0 <__retarget_lock_release_recursive>
 8004b84:	e7d7      	b.n	8004b36 <_fflush_r+0xe>
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <_fflush_r+0x78>)
 8004b88:	429c      	cmp	r4, r3
 8004b8a:	d101      	bne.n	8004b90 <_fflush_r+0x68>
 8004b8c:	68ac      	ldr	r4, [r5, #8]
 8004b8e:	e7df      	b.n	8004b50 <_fflush_r+0x28>
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <_fflush_r+0x7c>)
 8004b92:	429c      	cmp	r4, r3
 8004b94:	d1dc      	bne.n	8004b50 <_fflush_r+0x28>
 8004b96:	68ec      	ldr	r4, [r5, #12]
 8004b98:	e7da      	b.n	8004b50 <_fflush_r+0x28>
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	08005d1c 	.word	0x08005d1c
 8004ba0:	08005d3c 	.word	0x08005d3c
 8004ba4:	08005cfc 	.word	0x08005cfc

08004ba8 <std>:
 8004ba8:	2300      	movs	r3, #0
 8004baa:	b510      	push	{r4, lr}
 8004bac:	0004      	movs	r4, r0
 8004bae:	6003      	str	r3, [r0, #0]
 8004bb0:	6043      	str	r3, [r0, #4]
 8004bb2:	6083      	str	r3, [r0, #8]
 8004bb4:	8181      	strh	r1, [r0, #12]
 8004bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8004bb8:	0019      	movs	r1, r3
 8004bba:	81c2      	strh	r2, [r0, #14]
 8004bbc:	6103      	str	r3, [r0, #16]
 8004bbe:	6143      	str	r3, [r0, #20]
 8004bc0:	6183      	str	r3, [r0, #24]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	305c      	adds	r0, #92	; 0x5c
 8004bc6:	f7ff fd80 	bl	80046ca <memset>
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <std+0x38>)
 8004bcc:	6224      	str	r4, [r4, #32]
 8004bce:	6263      	str	r3, [r4, #36]	; 0x24
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <std+0x3c>)
 8004bd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <std+0x40>)
 8004bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <std+0x44>)
 8004bda:	6323      	str	r3, [r4, #48]	; 0x30
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	0800563d 	.word	0x0800563d
 8004be4:	08005665 	.word	0x08005665
 8004be8:	0800569d 	.word	0x0800569d
 8004bec:	080056c9 	.word	0x080056c9

08004bf0 <_cleanup_r>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	4902      	ldr	r1, [pc, #8]	; (8004bfc <_cleanup_r+0xc>)
 8004bf4:	f000 f8ba 	bl	8004d6c <_fwalk_reent>
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	08004b29 	.word	0x08004b29

08004c00 <__sfmoreglue>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	2568      	movs	r5, #104	; 0x68
 8004c04:	1e4a      	subs	r2, r1, #1
 8004c06:	4355      	muls	r5, r2
 8004c08:	000e      	movs	r6, r1
 8004c0a:	0029      	movs	r1, r5
 8004c0c:	3174      	adds	r1, #116	; 0x74
 8004c0e:	f000 f9a9 	bl	8004f64 <_malloc_r>
 8004c12:	1e04      	subs	r4, r0, #0
 8004c14:	d008      	beq.n	8004c28 <__sfmoreglue+0x28>
 8004c16:	2100      	movs	r1, #0
 8004c18:	002a      	movs	r2, r5
 8004c1a:	6001      	str	r1, [r0, #0]
 8004c1c:	6046      	str	r6, [r0, #4]
 8004c1e:	300c      	adds	r0, #12
 8004c20:	60a0      	str	r0, [r4, #8]
 8004c22:	3268      	adds	r2, #104	; 0x68
 8004c24:	f7ff fd51 	bl	80046ca <memset>
 8004c28:	0020      	movs	r0, r4
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}

08004c2c <__sfp_lock_acquire>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4802      	ldr	r0, [pc, #8]	; (8004c38 <__sfp_lock_acquire+0xc>)
 8004c30:	f000 f8bd 	bl	8004dae <__retarget_lock_acquire_recursive>
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	200003a1 	.word	0x200003a1

08004c3c <__sfp_lock_release>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	4802      	ldr	r0, [pc, #8]	; (8004c48 <__sfp_lock_release+0xc>)
 8004c40:	f000 f8b6 	bl	8004db0 <__retarget_lock_release_recursive>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	200003a1 	.word	0x200003a1

08004c4c <__sinit_lock_acquire>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	4802      	ldr	r0, [pc, #8]	; (8004c58 <__sinit_lock_acquire+0xc>)
 8004c50:	f000 f8ad 	bl	8004dae <__retarget_lock_acquire_recursive>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	200003a2 	.word	0x200003a2

08004c5c <__sinit_lock_release>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	4802      	ldr	r0, [pc, #8]	; (8004c68 <__sinit_lock_release+0xc>)
 8004c60:	f000 f8a6 	bl	8004db0 <__retarget_lock_release_recursive>
 8004c64:	bd10      	pop	{r4, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	200003a2 	.word	0x200003a2

08004c6c <__sinit>:
 8004c6c:	b513      	push	{r0, r1, r4, lr}
 8004c6e:	0004      	movs	r4, r0
 8004c70:	f7ff ffec 	bl	8004c4c <__sinit_lock_acquire>
 8004c74:	69a3      	ldr	r3, [r4, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <__sinit+0x14>
 8004c7a:	f7ff ffef 	bl	8004c5c <__sinit_lock_release>
 8004c7e:	bd13      	pop	{r0, r1, r4, pc}
 8004c80:	64a3      	str	r3, [r4, #72]	; 0x48
 8004c82:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004c84:	6523      	str	r3, [r4, #80]	; 0x50
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <__sinit+0x68>)
 8004c88:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <__sinit+0x6c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d101      	bne.n	8004c98 <__sinit+0x2c>
 8004c94:	2301      	movs	r3, #1
 8004c96:	61a3      	str	r3, [r4, #24]
 8004c98:	0020      	movs	r0, r4
 8004c9a:	f000 f81f 	bl	8004cdc <__sfp>
 8004c9e:	6060      	str	r0, [r4, #4]
 8004ca0:	0020      	movs	r0, r4
 8004ca2:	f000 f81b 	bl	8004cdc <__sfp>
 8004ca6:	60a0      	str	r0, [r4, #8]
 8004ca8:	0020      	movs	r0, r4
 8004caa:	f000 f817 	bl	8004cdc <__sfp>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2104      	movs	r1, #4
 8004cb2:	60e0      	str	r0, [r4, #12]
 8004cb4:	6860      	ldr	r0, [r4, #4]
 8004cb6:	f7ff ff77 	bl	8004ba8 <std>
 8004cba:	2201      	movs	r2, #1
 8004cbc:	2109      	movs	r1, #9
 8004cbe:	68a0      	ldr	r0, [r4, #8]
 8004cc0:	f7ff ff72 	bl	8004ba8 <std>
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	2112      	movs	r1, #18
 8004cc8:	68e0      	ldr	r0, [r4, #12]
 8004cca:	f7ff ff6d 	bl	8004ba8 <std>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61a3      	str	r3, [r4, #24]
 8004cd2:	e7d2      	b.n	8004c7a <__sinit+0xe>
 8004cd4:	08005cd0 	.word	0x08005cd0
 8004cd8:	08004bf1 	.word	0x08004bf1

08004cdc <__sfp>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	0007      	movs	r7, r0
 8004ce0:	f7ff ffa4 	bl	8004c2c <__sfp_lock_acquire>
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <__sfp+0x88>)
 8004ce6:	681e      	ldr	r6, [r3, #0]
 8004ce8:	69b3      	ldr	r3, [r6, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <__sfp+0x18>
 8004cee:	0030      	movs	r0, r6
 8004cf0:	f7ff ffbc 	bl	8004c6c <__sinit>
 8004cf4:	3648      	adds	r6, #72	; 0x48
 8004cf6:	68b4      	ldr	r4, [r6, #8]
 8004cf8:	6873      	ldr	r3, [r6, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	d504      	bpl.n	8004d08 <__sfp+0x2c>
 8004cfe:	6833      	ldr	r3, [r6, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d022      	beq.n	8004d4a <__sfp+0x6e>
 8004d04:	6836      	ldr	r6, [r6, #0]
 8004d06:	e7f6      	b.n	8004cf6 <__sfp+0x1a>
 8004d08:	220c      	movs	r2, #12
 8004d0a:	5ea5      	ldrsh	r5, [r4, r2]
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	d11a      	bne.n	8004d46 <__sfp+0x6a>
 8004d10:	0020      	movs	r0, r4
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <__sfp+0x8c>)
 8004d14:	3058      	adds	r0, #88	; 0x58
 8004d16:	60e3      	str	r3, [r4, #12]
 8004d18:	6665      	str	r5, [r4, #100]	; 0x64
 8004d1a:	f000 f847 	bl	8004dac <__retarget_lock_init_recursive>
 8004d1e:	f7ff ff8d 	bl	8004c3c <__sfp_lock_release>
 8004d22:	0020      	movs	r0, r4
 8004d24:	2208      	movs	r2, #8
 8004d26:	0029      	movs	r1, r5
 8004d28:	6025      	str	r5, [r4, #0]
 8004d2a:	60a5      	str	r5, [r4, #8]
 8004d2c:	6065      	str	r5, [r4, #4]
 8004d2e:	6125      	str	r5, [r4, #16]
 8004d30:	6165      	str	r5, [r4, #20]
 8004d32:	61a5      	str	r5, [r4, #24]
 8004d34:	305c      	adds	r0, #92	; 0x5c
 8004d36:	f7ff fcc8 	bl	80046ca <memset>
 8004d3a:	6365      	str	r5, [r4, #52]	; 0x34
 8004d3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8004d3e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004d40:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004d42:	0020      	movs	r0, r4
 8004d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d46:	3468      	adds	r4, #104	; 0x68
 8004d48:	e7d7      	b.n	8004cfa <__sfp+0x1e>
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	0038      	movs	r0, r7
 8004d4e:	f7ff ff57 	bl	8004c00 <__sfmoreglue>
 8004d52:	1e04      	subs	r4, r0, #0
 8004d54:	6030      	str	r0, [r6, #0]
 8004d56:	d1d5      	bne.n	8004d04 <__sfp+0x28>
 8004d58:	f7ff ff70 	bl	8004c3c <__sfp_lock_release>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	e7ef      	b.n	8004d42 <__sfp+0x66>
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	08005cd0 	.word	0x08005cd0
 8004d68:	ffff0001 	.word	0xffff0001

08004d6c <_fwalk_reent>:
 8004d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d6e:	0004      	movs	r4, r0
 8004d70:	0006      	movs	r6, r0
 8004d72:	2700      	movs	r7, #0
 8004d74:	9101      	str	r1, [sp, #4]
 8004d76:	3448      	adds	r4, #72	; 0x48
 8004d78:	6863      	ldr	r3, [r4, #4]
 8004d7a:	68a5      	ldr	r5, [r4, #8]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	9b00      	ldr	r3, [sp, #0]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	d504      	bpl.n	8004d90 <_fwalk_reent+0x24>
 8004d86:	6824      	ldr	r4, [r4, #0]
 8004d88:	2c00      	cmp	r4, #0
 8004d8a:	d1f5      	bne.n	8004d78 <_fwalk_reent+0xc>
 8004d8c:	0038      	movs	r0, r7
 8004d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d90:	89ab      	ldrh	r3, [r5, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d908      	bls.n	8004da8 <_fwalk_reent+0x3c>
 8004d96:	220e      	movs	r2, #14
 8004d98:	5eab      	ldrsh	r3, [r5, r2]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	d004      	beq.n	8004da8 <_fwalk_reent+0x3c>
 8004d9e:	0029      	movs	r1, r5
 8004da0:	0030      	movs	r0, r6
 8004da2:	9b01      	ldr	r3, [sp, #4]
 8004da4:	4798      	blx	r3
 8004da6:	4307      	orrs	r7, r0
 8004da8:	3568      	adds	r5, #104	; 0x68
 8004daa:	e7e8      	b.n	8004d7e <_fwalk_reent+0x12>

08004dac <__retarget_lock_init_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_acquire_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <__retarget_lock_release_recursive>:
 8004db0:	4770      	bx	lr
	...

08004db4 <__swhatbuf_r>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	000e      	movs	r6, r1
 8004db8:	001d      	movs	r5, r3
 8004dba:	230e      	movs	r3, #14
 8004dbc:	5ec9      	ldrsh	r1, [r1, r3]
 8004dbe:	0014      	movs	r4, r2
 8004dc0:	b096      	sub	sp, #88	; 0x58
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	da08      	bge.n	8004dd8 <__swhatbuf_r+0x24>
 8004dc6:	220c      	movs	r2, #12
 8004dc8:	5eb3      	ldrsh	r3, [r6, r2]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	602a      	str	r2, [r5, #0]
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	d411      	bmi.n	8004df6 <__swhatbuf_r+0x42>
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	e00f      	b.n	8004df8 <__swhatbuf_r+0x44>
 8004dd8:	466a      	mov	r2, sp
 8004dda:	f000 fca1 	bl	8005720 <_fstat_r>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	dbf1      	blt.n	8004dc6 <__swhatbuf_r+0x12>
 8004de2:	23f0      	movs	r3, #240	; 0xf0
 8004de4:	9901      	ldr	r1, [sp, #4]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	4019      	ands	r1, r3
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <__swhatbuf_r+0x4c>)
 8004dec:	18c9      	adds	r1, r1, r3
 8004dee:	424b      	negs	r3, r1
 8004df0:	4159      	adcs	r1, r3
 8004df2:	6029      	str	r1, [r5, #0]
 8004df4:	e7ed      	b.n	8004dd2 <__swhatbuf_r+0x1e>
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	2000      	movs	r0, #0
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	b016      	add	sp, #88	; 0x58
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	ffffe000 	.word	0xffffe000

08004e04 <__smakebuf_r>:
 8004e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e06:	2602      	movs	r6, #2
 8004e08:	898b      	ldrh	r3, [r1, #12]
 8004e0a:	0005      	movs	r5, r0
 8004e0c:	000c      	movs	r4, r1
 8004e0e:	4233      	tst	r3, r6
 8004e10:	d006      	beq.n	8004e20 <__smakebuf_r+0x1c>
 8004e12:	0023      	movs	r3, r4
 8004e14:	3347      	adds	r3, #71	; 0x47
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	6163      	str	r3, [r4, #20]
 8004e1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004e20:	466a      	mov	r2, sp
 8004e22:	ab01      	add	r3, sp, #4
 8004e24:	f7ff ffc6 	bl	8004db4 <__swhatbuf_r>
 8004e28:	9900      	ldr	r1, [sp, #0]
 8004e2a:	0007      	movs	r7, r0
 8004e2c:	0028      	movs	r0, r5
 8004e2e:	f000 f899 	bl	8004f64 <_malloc_r>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d108      	bne.n	8004e48 <__smakebuf_r+0x44>
 8004e36:	220c      	movs	r2, #12
 8004e38:	5ea3      	ldrsh	r3, [r4, r2]
 8004e3a:	059a      	lsls	r2, r3, #22
 8004e3c:	d4ef      	bmi.n	8004e1e <__smakebuf_r+0x1a>
 8004e3e:	2203      	movs	r2, #3
 8004e40:	4393      	bics	r3, r2
 8004e42:	431e      	orrs	r6, r3
 8004e44:	81a6      	strh	r6, [r4, #12]
 8004e46:	e7e4      	b.n	8004e12 <__smakebuf_r+0xe>
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <__smakebuf_r+0x84>)
 8004e4a:	62ab      	str	r3, [r5, #40]	; 0x28
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	89a2      	ldrh	r2, [r4, #12]
 8004e50:	6020      	str	r0, [r4, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	9b00      	ldr	r3, [sp, #0]
 8004e58:	6120      	str	r0, [r4, #16]
 8004e5a:	6163      	str	r3, [r4, #20]
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <__smakebuf_r+0x7a>
 8004e62:	0028      	movs	r0, r5
 8004e64:	230e      	movs	r3, #14
 8004e66:	5ee1      	ldrsh	r1, [r4, r3]
 8004e68:	f000 fc6c 	bl	8005744 <_isatty_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d006      	beq.n	8004e7e <__smakebuf_r+0x7a>
 8004e70:	2203      	movs	r2, #3
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	4393      	bics	r3, r2
 8004e76:	001a      	movs	r2, r3
 8004e78:	2301      	movs	r3, #1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	81a3      	strh	r3, [r4, #12]
 8004e7e:	89a0      	ldrh	r0, [r4, #12]
 8004e80:	4307      	orrs	r7, r0
 8004e82:	81a7      	strh	r7, [r4, #12]
 8004e84:	e7cb      	b.n	8004e1e <__smakebuf_r+0x1a>
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	08004bf1 	.word	0x08004bf1

08004e8c <_free_r>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	0005      	movs	r5, r0
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d010      	beq.n	8004eb6 <_free_r+0x2a>
 8004e94:	1f0c      	subs	r4, r1, #4
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da00      	bge.n	8004e9e <_free_r+0x12>
 8004e9c:	18e4      	adds	r4, r4, r3
 8004e9e:	0028      	movs	r0, r5
 8004ea0:	f000 fc82 	bl	80057a8 <__malloc_lock>
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <_free_r+0x90>)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <_free_r+0x2c>
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6014      	str	r4, [r2, #0]
 8004eb0:	0028      	movs	r0, r5
 8004eb2:	f000 fc81 	bl	80057b8 <__malloc_unlock>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d908      	bls.n	8004ece <_free_r+0x42>
 8004ebc:	6821      	ldr	r1, [r4, #0]
 8004ebe:	1860      	adds	r0, r4, r1
 8004ec0:	4283      	cmp	r3, r0
 8004ec2:	d1f3      	bne.n	8004eac <_free_r+0x20>
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	1841      	adds	r1, r0, r1
 8004eca:	6021      	str	r1, [r4, #0]
 8004ecc:	e7ee      	b.n	8004eac <_free_r+0x20>
 8004ece:	001a      	movs	r2, r3
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <_free_r+0x4e>
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	d9f9      	bls.n	8004ece <_free_r+0x42>
 8004eda:	6811      	ldr	r1, [r2, #0]
 8004edc:	1850      	adds	r0, r2, r1
 8004ede:	42a0      	cmp	r0, r4
 8004ee0:	d10b      	bne.n	8004efa <_free_r+0x6e>
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	1809      	adds	r1, r1, r0
 8004ee6:	1850      	adds	r0, r2, r1
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	4283      	cmp	r3, r0
 8004eec:	d1e0      	bne.n	8004eb0 <_free_r+0x24>
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	1841      	adds	r1, r0, r1
 8004ef4:	6011      	str	r1, [r2, #0]
 8004ef6:	6053      	str	r3, [r2, #4]
 8004ef8:	e7da      	b.n	8004eb0 <_free_r+0x24>
 8004efa:	42a0      	cmp	r0, r4
 8004efc:	d902      	bls.n	8004f04 <_free_r+0x78>
 8004efe:	230c      	movs	r3, #12
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	e7d5      	b.n	8004eb0 <_free_r+0x24>
 8004f04:	6821      	ldr	r1, [r4, #0]
 8004f06:	1860      	adds	r0, r4, r1
 8004f08:	4283      	cmp	r3, r0
 8004f0a:	d103      	bne.n	8004f14 <_free_r+0x88>
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	1841      	adds	r1, r0, r1
 8004f12:	6021      	str	r1, [r4, #0]
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	6054      	str	r4, [r2, #4]
 8004f18:	e7ca      	b.n	8004eb0 <_free_r+0x24>
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	200003a4 	.word	0x200003a4

08004f20 <sbrk_aligned>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4e0f      	ldr	r6, [pc, #60]	; (8004f60 <sbrk_aligned+0x40>)
 8004f24:	000d      	movs	r5, r1
 8004f26:	6831      	ldr	r1, [r6, #0]
 8004f28:	0004      	movs	r4, r0
 8004f2a:	2900      	cmp	r1, #0
 8004f2c:	d102      	bne.n	8004f34 <sbrk_aligned+0x14>
 8004f2e:	f000 fb73 	bl	8005618 <_sbrk_r>
 8004f32:	6030      	str	r0, [r6, #0]
 8004f34:	0029      	movs	r1, r5
 8004f36:	0020      	movs	r0, r4
 8004f38:	f000 fb6e 	bl	8005618 <_sbrk_r>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d00a      	beq.n	8004f56 <sbrk_aligned+0x36>
 8004f40:	2303      	movs	r3, #3
 8004f42:	1cc5      	adds	r5, r0, #3
 8004f44:	439d      	bics	r5, r3
 8004f46:	42a8      	cmp	r0, r5
 8004f48:	d007      	beq.n	8004f5a <sbrk_aligned+0x3a>
 8004f4a:	1a29      	subs	r1, r5, r0
 8004f4c:	0020      	movs	r0, r4
 8004f4e:	f000 fb63 	bl	8005618 <_sbrk_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d101      	bne.n	8004f5a <sbrk_aligned+0x3a>
 8004f56:	2501      	movs	r5, #1
 8004f58:	426d      	negs	r5, r5
 8004f5a:	0028      	movs	r0, r5
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	200003a8 	.word	0x200003a8

08004f64 <_malloc_r>:
 8004f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f66:	2203      	movs	r2, #3
 8004f68:	1ccb      	adds	r3, r1, #3
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	0006      	movs	r6, r0
 8004f70:	001f      	movs	r7, r3
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d232      	bcs.n	8004fdc <_malloc_r+0x78>
 8004f76:	270c      	movs	r7, #12
 8004f78:	42b9      	cmp	r1, r7
 8004f7a:	d831      	bhi.n	8004fe0 <_malloc_r+0x7c>
 8004f7c:	0030      	movs	r0, r6
 8004f7e:	f000 fc13 	bl	80057a8 <__malloc_lock>
 8004f82:	4d32      	ldr	r5, [pc, #200]	; (800504c <_malloc_r+0xe8>)
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	001c      	movs	r4, r3
 8004f88:	2c00      	cmp	r4, #0
 8004f8a:	d12e      	bne.n	8004fea <_malloc_r+0x86>
 8004f8c:	0039      	movs	r1, r7
 8004f8e:	0030      	movs	r0, r6
 8004f90:	f7ff ffc6 	bl	8004f20 <sbrk_aligned>
 8004f94:	0004      	movs	r4, r0
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d11e      	bne.n	8004fd8 <_malloc_r+0x74>
 8004f9a:	682c      	ldr	r4, [r5, #0]
 8004f9c:	0025      	movs	r5, r4
 8004f9e:	2d00      	cmp	r5, #0
 8004fa0:	d14a      	bne.n	8005038 <_malloc_r+0xd4>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	0029      	movs	r1, r5
 8004fa6:	18e3      	adds	r3, r4, r3
 8004fa8:	0030      	movs	r0, r6
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	f000 fb34 	bl	8005618 <_sbrk_r>
 8004fb0:	9b01      	ldr	r3, [sp, #4]
 8004fb2:	4283      	cmp	r3, r0
 8004fb4:	d143      	bne.n	800503e <_malloc_r+0xda>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	3703      	adds	r7, #3
 8004fba:	1aff      	subs	r7, r7, r3
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	439f      	bics	r7, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	2f0c      	cmp	r7, #12
 8004fc4:	d200      	bcs.n	8004fc8 <_malloc_r+0x64>
 8004fc6:	270c      	movs	r7, #12
 8004fc8:	0039      	movs	r1, r7
 8004fca:	0030      	movs	r0, r6
 8004fcc:	f7ff ffa8 	bl	8004f20 <sbrk_aligned>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d034      	beq.n	800503e <_malloc_r+0xda>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	19df      	adds	r7, r3, r7
 8004fd8:	6027      	str	r7, [r4, #0]
 8004fda:	e013      	b.n	8005004 <_malloc_r+0xa0>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dacb      	bge.n	8004f78 <_malloc_r+0x14>
 8004fe0:	230c      	movs	r3, #12
 8004fe2:	2500      	movs	r5, #0
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	0028      	movs	r0, r5
 8004fe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fea:	6822      	ldr	r2, [r4, #0]
 8004fec:	1bd1      	subs	r1, r2, r7
 8004fee:	d420      	bmi.n	8005032 <_malloc_r+0xce>
 8004ff0:	290b      	cmp	r1, #11
 8004ff2:	d917      	bls.n	8005024 <_malloc_r+0xc0>
 8004ff4:	19e2      	adds	r2, r4, r7
 8004ff6:	6027      	str	r7, [r4, #0]
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	d111      	bne.n	8005020 <_malloc_r+0xbc>
 8004ffc:	602a      	str	r2, [r5, #0]
 8004ffe:	6863      	ldr	r3, [r4, #4]
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	6053      	str	r3, [r2, #4]
 8005004:	0030      	movs	r0, r6
 8005006:	0025      	movs	r5, r4
 8005008:	f000 fbd6 	bl	80057b8 <__malloc_unlock>
 800500c:	2207      	movs	r2, #7
 800500e:	350b      	adds	r5, #11
 8005010:	1d23      	adds	r3, r4, #4
 8005012:	4395      	bics	r5, r2
 8005014:	1aea      	subs	r2, r5, r3
 8005016:	429d      	cmp	r5, r3
 8005018:	d0e5      	beq.n	8004fe6 <_malloc_r+0x82>
 800501a:	1b5b      	subs	r3, r3, r5
 800501c:	50a3      	str	r3, [r4, r2]
 800501e:	e7e2      	b.n	8004fe6 <_malloc_r+0x82>
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	e7ec      	b.n	8004ffe <_malloc_r+0x9a>
 8005024:	6862      	ldr	r2, [r4, #4]
 8005026:	42a3      	cmp	r3, r4
 8005028:	d101      	bne.n	800502e <_malloc_r+0xca>
 800502a:	602a      	str	r2, [r5, #0]
 800502c:	e7ea      	b.n	8005004 <_malloc_r+0xa0>
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	e7e8      	b.n	8005004 <_malloc_r+0xa0>
 8005032:	0023      	movs	r3, r4
 8005034:	6864      	ldr	r4, [r4, #4]
 8005036:	e7a7      	b.n	8004f88 <_malloc_r+0x24>
 8005038:	002c      	movs	r4, r5
 800503a:	686d      	ldr	r5, [r5, #4]
 800503c:	e7af      	b.n	8004f9e <_malloc_r+0x3a>
 800503e:	230c      	movs	r3, #12
 8005040:	0030      	movs	r0, r6
 8005042:	6033      	str	r3, [r6, #0]
 8005044:	f000 fbb8 	bl	80057b8 <__malloc_unlock>
 8005048:	e7cd      	b.n	8004fe6 <_malloc_r+0x82>
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	200003a4 	.word	0x200003a4

08005050 <__sfputc_r>:
 8005050:	6893      	ldr	r3, [r2, #8]
 8005052:	b510      	push	{r4, lr}
 8005054:	3b01      	subs	r3, #1
 8005056:	6093      	str	r3, [r2, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	da04      	bge.n	8005066 <__sfputc_r+0x16>
 800505c:	6994      	ldr	r4, [r2, #24]
 800505e:	42a3      	cmp	r3, r4
 8005060:	db07      	blt.n	8005072 <__sfputc_r+0x22>
 8005062:	290a      	cmp	r1, #10
 8005064:	d005      	beq.n	8005072 <__sfputc_r+0x22>
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	1c58      	adds	r0, r3, #1
 800506a:	6010      	str	r0, [r2, #0]
 800506c:	7019      	strb	r1, [r3, #0]
 800506e:	0008      	movs	r0, r1
 8005070:	bd10      	pop	{r4, pc}
 8005072:	f7ff fbff 	bl	8004874 <__swbuf_r>
 8005076:	0001      	movs	r1, r0
 8005078:	e7f9      	b.n	800506e <__sfputc_r+0x1e>

0800507a <__sfputs_r>:
 800507a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507c:	0006      	movs	r6, r0
 800507e:	000f      	movs	r7, r1
 8005080:	0014      	movs	r4, r2
 8005082:	18d5      	adds	r5, r2, r3
 8005084:	42ac      	cmp	r4, r5
 8005086:	d101      	bne.n	800508c <__sfputs_r+0x12>
 8005088:	2000      	movs	r0, #0
 800508a:	e007      	b.n	800509c <__sfputs_r+0x22>
 800508c:	7821      	ldrb	r1, [r4, #0]
 800508e:	003a      	movs	r2, r7
 8005090:	0030      	movs	r0, r6
 8005092:	f7ff ffdd 	bl	8005050 <__sfputc_r>
 8005096:	3401      	adds	r4, #1
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d1f3      	bne.n	8005084 <__sfputs_r+0xa>
 800509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050a0 <_vfiprintf_r>:
 80050a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a2:	b0a1      	sub	sp, #132	; 0x84
 80050a4:	0006      	movs	r6, r0
 80050a6:	000c      	movs	r4, r1
 80050a8:	001f      	movs	r7, r3
 80050aa:	9203      	str	r2, [sp, #12]
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d004      	beq.n	80050ba <_vfiprintf_r+0x1a>
 80050b0:	6983      	ldr	r3, [r0, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <_vfiprintf_r+0x1a>
 80050b6:	f7ff fdd9 	bl	8004c6c <__sinit>
 80050ba:	4b8e      	ldr	r3, [pc, #568]	; (80052f4 <_vfiprintf_r+0x254>)
 80050bc:	429c      	cmp	r4, r3
 80050be:	d11c      	bne.n	80050fa <_vfiprintf_r+0x5a>
 80050c0:	6874      	ldr	r4, [r6, #4]
 80050c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050c4:	07db      	lsls	r3, r3, #31
 80050c6:	d405      	bmi.n	80050d4 <_vfiprintf_r+0x34>
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	059b      	lsls	r3, r3, #22
 80050cc:	d402      	bmi.n	80050d4 <_vfiprintf_r+0x34>
 80050ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050d0:	f7ff fe6d 	bl	8004dae <__retarget_lock_acquire_recursive>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	071b      	lsls	r3, r3, #28
 80050d8:	d502      	bpl.n	80050e0 <_vfiprintf_r+0x40>
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11d      	bne.n	800511c <_vfiprintf_r+0x7c>
 80050e0:	0021      	movs	r1, r4
 80050e2:	0030      	movs	r0, r6
 80050e4:	f7ff fc1c 	bl	8004920 <__swsetup_r>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d017      	beq.n	800511c <_vfiprintf_r+0x7c>
 80050ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050ee:	07db      	lsls	r3, r3, #31
 80050f0:	d50d      	bpl.n	800510e <_vfiprintf_r+0x6e>
 80050f2:	2001      	movs	r0, #1
 80050f4:	4240      	negs	r0, r0
 80050f6:	b021      	add	sp, #132	; 0x84
 80050f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fa:	4b7f      	ldr	r3, [pc, #508]	; (80052f8 <_vfiprintf_r+0x258>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d101      	bne.n	8005104 <_vfiprintf_r+0x64>
 8005100:	68b4      	ldr	r4, [r6, #8]
 8005102:	e7de      	b.n	80050c2 <_vfiprintf_r+0x22>
 8005104:	4b7d      	ldr	r3, [pc, #500]	; (80052fc <_vfiprintf_r+0x25c>)
 8005106:	429c      	cmp	r4, r3
 8005108:	d1db      	bne.n	80050c2 <_vfiprintf_r+0x22>
 800510a:	68f4      	ldr	r4, [r6, #12]
 800510c:	e7d9      	b.n	80050c2 <_vfiprintf_r+0x22>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	059b      	lsls	r3, r3, #22
 8005112:	d4ee      	bmi.n	80050f2 <_vfiprintf_r+0x52>
 8005114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005116:	f7ff fe4b 	bl	8004db0 <__retarget_lock_release_recursive>
 800511a:	e7ea      	b.n	80050f2 <_vfiprintf_r+0x52>
 800511c:	2300      	movs	r3, #0
 800511e:	ad08      	add	r5, sp, #32
 8005120:	616b      	str	r3, [r5, #20]
 8005122:	3320      	adds	r3, #32
 8005124:	766b      	strb	r3, [r5, #25]
 8005126:	3310      	adds	r3, #16
 8005128:	76ab      	strb	r3, [r5, #26]
 800512a:	9707      	str	r7, [sp, #28]
 800512c:	9f03      	ldr	r7, [sp, #12]
 800512e:	783b      	ldrb	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <_vfiprintf_r+0x98>
 8005134:	2b25      	cmp	r3, #37	; 0x25
 8005136:	d14e      	bne.n	80051d6 <_vfiprintf_r+0x136>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	1afb      	subs	r3, r7, r3
 800513c:	9305      	str	r3, [sp, #20]
 800513e:	9b03      	ldr	r3, [sp, #12]
 8005140:	429f      	cmp	r7, r3
 8005142:	d00d      	beq.n	8005160 <_vfiprintf_r+0xc0>
 8005144:	9b05      	ldr	r3, [sp, #20]
 8005146:	0021      	movs	r1, r4
 8005148:	0030      	movs	r0, r6
 800514a:	9a03      	ldr	r2, [sp, #12]
 800514c:	f7ff ff95 	bl	800507a <__sfputs_r>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d100      	bne.n	8005156 <_vfiprintf_r+0xb6>
 8005154:	e0b5      	b.n	80052c2 <_vfiprintf_r+0x222>
 8005156:	696a      	ldr	r2, [r5, #20]
 8005158:	9b05      	ldr	r3, [sp, #20]
 800515a:	4694      	mov	ip, r2
 800515c:	4463      	add	r3, ip
 800515e:	616b      	str	r3, [r5, #20]
 8005160:	783b      	ldrb	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d100      	bne.n	8005168 <_vfiprintf_r+0xc8>
 8005166:	e0ac      	b.n	80052c2 <_vfiprintf_r+0x222>
 8005168:	2201      	movs	r2, #1
 800516a:	1c7b      	adds	r3, r7, #1
 800516c:	9303      	str	r3, [sp, #12]
 800516e:	2300      	movs	r3, #0
 8005170:	4252      	negs	r2, r2
 8005172:	606a      	str	r2, [r5, #4]
 8005174:	a904      	add	r1, sp, #16
 8005176:	3254      	adds	r2, #84	; 0x54
 8005178:	1852      	adds	r2, r2, r1
 800517a:	602b      	str	r3, [r5, #0]
 800517c:	60eb      	str	r3, [r5, #12]
 800517e:	60ab      	str	r3, [r5, #8]
 8005180:	7013      	strb	r3, [r2, #0]
 8005182:	65ab      	str	r3, [r5, #88]	; 0x58
 8005184:	9b03      	ldr	r3, [sp, #12]
 8005186:	2205      	movs	r2, #5
 8005188:	7819      	ldrb	r1, [r3, #0]
 800518a:	485d      	ldr	r0, [pc, #372]	; (8005300 <_vfiprintf_r+0x260>)
 800518c:	f000 fb00 	bl	8005790 <memchr>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	1c5f      	adds	r7, r3, #1
 8005194:	2800      	cmp	r0, #0
 8005196:	d120      	bne.n	80051da <_vfiprintf_r+0x13a>
 8005198:	682a      	ldr	r2, [r5, #0]
 800519a:	06d3      	lsls	r3, r2, #27
 800519c:	d504      	bpl.n	80051a8 <_vfiprintf_r+0x108>
 800519e:	2353      	movs	r3, #83	; 0x53
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	185b      	adds	r3, r3, r1
 80051a4:	2120      	movs	r1, #32
 80051a6:	7019      	strb	r1, [r3, #0]
 80051a8:	0713      	lsls	r3, r2, #28
 80051aa:	d504      	bpl.n	80051b6 <_vfiprintf_r+0x116>
 80051ac:	2353      	movs	r3, #83	; 0x53
 80051ae:	a904      	add	r1, sp, #16
 80051b0:	185b      	adds	r3, r3, r1
 80051b2:	212b      	movs	r1, #43	; 0x2b
 80051b4:	7019      	strb	r1, [r3, #0]
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b2a      	cmp	r3, #42	; 0x2a
 80051bc:	d016      	beq.n	80051ec <_vfiprintf_r+0x14c>
 80051be:	2100      	movs	r1, #0
 80051c0:	68eb      	ldr	r3, [r5, #12]
 80051c2:	9f03      	ldr	r7, [sp, #12]
 80051c4:	783a      	ldrb	r2, [r7, #0]
 80051c6:	1c78      	adds	r0, r7, #1
 80051c8:	3a30      	subs	r2, #48	; 0x30
 80051ca:	4684      	mov	ip, r0
 80051cc:	2a09      	cmp	r2, #9
 80051ce:	d94f      	bls.n	8005270 <_vfiprintf_r+0x1d0>
 80051d0:	2900      	cmp	r1, #0
 80051d2:	d111      	bne.n	80051f8 <_vfiprintf_r+0x158>
 80051d4:	e017      	b.n	8005206 <_vfiprintf_r+0x166>
 80051d6:	3701      	adds	r7, #1
 80051d8:	e7a9      	b.n	800512e <_vfiprintf_r+0x8e>
 80051da:	4b49      	ldr	r3, [pc, #292]	; (8005300 <_vfiprintf_r+0x260>)
 80051dc:	682a      	ldr	r2, [r5, #0]
 80051de:	1ac0      	subs	r0, r0, r3
 80051e0:	2301      	movs	r3, #1
 80051e2:	4083      	lsls	r3, r0
 80051e4:	4313      	orrs	r3, r2
 80051e6:	602b      	str	r3, [r5, #0]
 80051e8:	9703      	str	r7, [sp, #12]
 80051ea:	e7cb      	b.n	8005184 <_vfiprintf_r+0xe4>
 80051ec:	9b07      	ldr	r3, [sp, #28]
 80051ee:	1d19      	adds	r1, r3, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	9107      	str	r1, [sp, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db01      	blt.n	80051fc <_vfiprintf_r+0x15c>
 80051f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80051fa:	e004      	b.n	8005206 <_vfiprintf_r+0x166>
 80051fc:	425b      	negs	r3, r3
 80051fe:	60eb      	str	r3, [r5, #12]
 8005200:	2302      	movs	r3, #2
 8005202:	4313      	orrs	r3, r2
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	783b      	ldrb	r3, [r7, #0]
 8005208:	2b2e      	cmp	r3, #46	; 0x2e
 800520a:	d10a      	bne.n	8005222 <_vfiprintf_r+0x182>
 800520c:	787b      	ldrb	r3, [r7, #1]
 800520e:	2b2a      	cmp	r3, #42	; 0x2a
 8005210:	d137      	bne.n	8005282 <_vfiprintf_r+0x1e2>
 8005212:	9b07      	ldr	r3, [sp, #28]
 8005214:	3702      	adds	r7, #2
 8005216:	1d1a      	adds	r2, r3, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	9207      	str	r2, [sp, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	db2d      	blt.n	800527c <_vfiprintf_r+0x1dc>
 8005220:	9309      	str	r3, [sp, #36]	; 0x24
 8005222:	2203      	movs	r2, #3
 8005224:	7839      	ldrb	r1, [r7, #0]
 8005226:	4837      	ldr	r0, [pc, #220]	; (8005304 <_vfiprintf_r+0x264>)
 8005228:	f000 fab2 	bl	8005790 <memchr>
 800522c:	2800      	cmp	r0, #0
 800522e:	d007      	beq.n	8005240 <_vfiprintf_r+0x1a0>
 8005230:	4b34      	ldr	r3, [pc, #208]	; (8005304 <_vfiprintf_r+0x264>)
 8005232:	682a      	ldr	r2, [r5, #0]
 8005234:	1ac0      	subs	r0, r0, r3
 8005236:	2340      	movs	r3, #64	; 0x40
 8005238:	4083      	lsls	r3, r0
 800523a:	4313      	orrs	r3, r2
 800523c:	3701      	adds	r7, #1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	7839      	ldrb	r1, [r7, #0]
 8005242:	1c7b      	adds	r3, r7, #1
 8005244:	2206      	movs	r2, #6
 8005246:	4830      	ldr	r0, [pc, #192]	; (8005308 <_vfiprintf_r+0x268>)
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	7629      	strb	r1, [r5, #24]
 800524c:	f000 faa0 	bl	8005790 <memchr>
 8005250:	2800      	cmp	r0, #0
 8005252:	d045      	beq.n	80052e0 <_vfiprintf_r+0x240>
 8005254:	4b2d      	ldr	r3, [pc, #180]	; (800530c <_vfiprintf_r+0x26c>)
 8005256:	2b00      	cmp	r3, #0
 8005258:	d127      	bne.n	80052aa <_vfiprintf_r+0x20a>
 800525a:	2207      	movs	r2, #7
 800525c:	9b07      	ldr	r3, [sp, #28]
 800525e:	3307      	adds	r3, #7
 8005260:	4393      	bics	r3, r2
 8005262:	3308      	adds	r3, #8
 8005264:	9307      	str	r3, [sp, #28]
 8005266:	696b      	ldr	r3, [r5, #20]
 8005268:	9a04      	ldr	r2, [sp, #16]
 800526a:	189b      	adds	r3, r3, r2
 800526c:	616b      	str	r3, [r5, #20]
 800526e:	e75d      	b.n	800512c <_vfiprintf_r+0x8c>
 8005270:	210a      	movs	r1, #10
 8005272:	434b      	muls	r3, r1
 8005274:	4667      	mov	r7, ip
 8005276:	189b      	adds	r3, r3, r2
 8005278:	3909      	subs	r1, #9
 800527a:	e7a3      	b.n	80051c4 <_vfiprintf_r+0x124>
 800527c:	2301      	movs	r3, #1
 800527e:	425b      	negs	r3, r3
 8005280:	e7ce      	b.n	8005220 <_vfiprintf_r+0x180>
 8005282:	2300      	movs	r3, #0
 8005284:	001a      	movs	r2, r3
 8005286:	3701      	adds	r7, #1
 8005288:	606b      	str	r3, [r5, #4]
 800528a:	7839      	ldrb	r1, [r7, #0]
 800528c:	1c78      	adds	r0, r7, #1
 800528e:	3930      	subs	r1, #48	; 0x30
 8005290:	4684      	mov	ip, r0
 8005292:	2909      	cmp	r1, #9
 8005294:	d903      	bls.n	800529e <_vfiprintf_r+0x1fe>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0c3      	beq.n	8005222 <_vfiprintf_r+0x182>
 800529a:	9209      	str	r2, [sp, #36]	; 0x24
 800529c:	e7c1      	b.n	8005222 <_vfiprintf_r+0x182>
 800529e:	230a      	movs	r3, #10
 80052a0:	435a      	muls	r2, r3
 80052a2:	4667      	mov	r7, ip
 80052a4:	1852      	adds	r2, r2, r1
 80052a6:	3b09      	subs	r3, #9
 80052a8:	e7ef      	b.n	800528a <_vfiprintf_r+0x1ea>
 80052aa:	ab07      	add	r3, sp, #28
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	0022      	movs	r2, r4
 80052b0:	0029      	movs	r1, r5
 80052b2:	0030      	movs	r0, r6
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <_vfiprintf_r+0x270>)
 80052b6:	e000      	b.n	80052ba <_vfiprintf_r+0x21a>
 80052b8:	bf00      	nop
 80052ba:	9004      	str	r0, [sp, #16]
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	3301      	adds	r3, #1
 80052c0:	d1d1      	bne.n	8005266 <_vfiprintf_r+0x1c6>
 80052c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c4:	07db      	lsls	r3, r3, #31
 80052c6:	d405      	bmi.n	80052d4 <_vfiprintf_r+0x234>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	059b      	lsls	r3, r3, #22
 80052cc:	d402      	bmi.n	80052d4 <_vfiprintf_r+0x234>
 80052ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d0:	f7ff fd6e 	bl	8004db0 <__retarget_lock_release_recursive>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	065b      	lsls	r3, r3, #25
 80052d8:	d500      	bpl.n	80052dc <_vfiprintf_r+0x23c>
 80052da:	e70a      	b.n	80050f2 <_vfiprintf_r+0x52>
 80052dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80052de:	e70a      	b.n	80050f6 <_vfiprintf_r+0x56>
 80052e0:	ab07      	add	r3, sp, #28
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	0022      	movs	r2, r4
 80052e6:	0029      	movs	r1, r5
 80052e8:	0030      	movs	r0, r6
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <_vfiprintf_r+0x270>)
 80052ec:	f000 f882 	bl	80053f4 <_printf_i>
 80052f0:	e7e3      	b.n	80052ba <_vfiprintf_r+0x21a>
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	08005d1c 	.word	0x08005d1c
 80052f8:	08005d3c 	.word	0x08005d3c
 80052fc:	08005cfc 	.word	0x08005cfc
 8005300:	08005d5c 	.word	0x08005d5c
 8005304:	08005d62 	.word	0x08005d62
 8005308:	08005d66 	.word	0x08005d66
 800530c:	00000000 	.word	0x00000000
 8005310:	0800507b 	.word	0x0800507b

08005314 <_printf_common>:
 8005314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005316:	0015      	movs	r5, r2
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	688a      	ldr	r2, [r1, #8]
 800531c:	690b      	ldr	r3, [r1, #16]
 800531e:	000c      	movs	r4, r1
 8005320:	9000      	str	r0, [sp, #0]
 8005322:	4293      	cmp	r3, r2
 8005324:	da00      	bge.n	8005328 <_printf_common+0x14>
 8005326:	0013      	movs	r3, r2
 8005328:	0022      	movs	r2, r4
 800532a:	602b      	str	r3, [r5, #0]
 800532c:	3243      	adds	r2, #67	; 0x43
 800532e:	7812      	ldrb	r2, [r2, #0]
 8005330:	2a00      	cmp	r2, #0
 8005332:	d001      	beq.n	8005338 <_printf_common+0x24>
 8005334:	3301      	adds	r3, #1
 8005336:	602b      	str	r3, [r5, #0]
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	069b      	lsls	r3, r3, #26
 800533c:	d502      	bpl.n	8005344 <_printf_common+0x30>
 800533e:	682b      	ldr	r3, [r5, #0]
 8005340:	3302      	adds	r3, #2
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	6822      	ldr	r2, [r4, #0]
 8005346:	2306      	movs	r3, #6
 8005348:	0017      	movs	r7, r2
 800534a:	401f      	ands	r7, r3
 800534c:	421a      	tst	r2, r3
 800534e:	d027      	beq.n	80053a0 <_printf_common+0x8c>
 8005350:	0023      	movs	r3, r4
 8005352:	3343      	adds	r3, #67	; 0x43
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	1e5a      	subs	r2, r3, #1
 8005358:	4193      	sbcs	r3, r2
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	0692      	lsls	r2, r2, #26
 800535e:	d430      	bmi.n	80053c2 <_printf_common+0xae>
 8005360:	0022      	movs	r2, r4
 8005362:	9901      	ldr	r1, [sp, #4]
 8005364:	9800      	ldr	r0, [sp, #0]
 8005366:	9e08      	ldr	r6, [sp, #32]
 8005368:	3243      	adds	r2, #67	; 0x43
 800536a:	47b0      	blx	r6
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d025      	beq.n	80053bc <_printf_common+0xa8>
 8005370:	2306      	movs	r3, #6
 8005372:	6820      	ldr	r0, [r4, #0]
 8005374:	682a      	ldr	r2, [r5, #0]
 8005376:	68e1      	ldr	r1, [r4, #12]
 8005378:	2500      	movs	r5, #0
 800537a:	4003      	ands	r3, r0
 800537c:	2b04      	cmp	r3, #4
 800537e:	d103      	bne.n	8005388 <_printf_common+0x74>
 8005380:	1a8d      	subs	r5, r1, r2
 8005382:	43eb      	mvns	r3, r5
 8005384:	17db      	asrs	r3, r3, #31
 8005386:	401d      	ands	r5, r3
 8005388:	68a3      	ldr	r3, [r4, #8]
 800538a:	6922      	ldr	r2, [r4, #16]
 800538c:	4293      	cmp	r3, r2
 800538e:	dd01      	ble.n	8005394 <_printf_common+0x80>
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	18ed      	adds	r5, r5, r3
 8005394:	2700      	movs	r7, #0
 8005396:	42bd      	cmp	r5, r7
 8005398:	d120      	bne.n	80053dc <_printf_common+0xc8>
 800539a:	2000      	movs	r0, #0
 800539c:	e010      	b.n	80053c0 <_printf_common+0xac>
 800539e:	3701      	adds	r7, #1
 80053a0:	68e3      	ldr	r3, [r4, #12]
 80053a2:	682a      	ldr	r2, [r5, #0]
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	42bb      	cmp	r3, r7
 80053a8:	ddd2      	ble.n	8005350 <_printf_common+0x3c>
 80053aa:	0022      	movs	r2, r4
 80053ac:	2301      	movs	r3, #1
 80053ae:	9901      	ldr	r1, [sp, #4]
 80053b0:	9800      	ldr	r0, [sp, #0]
 80053b2:	9e08      	ldr	r6, [sp, #32]
 80053b4:	3219      	adds	r2, #25
 80053b6:	47b0      	blx	r6
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d1f0      	bne.n	800539e <_printf_common+0x8a>
 80053bc:	2001      	movs	r0, #1
 80053be:	4240      	negs	r0, r0
 80053c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053c2:	2030      	movs	r0, #48	; 0x30
 80053c4:	18e1      	adds	r1, r4, r3
 80053c6:	3143      	adds	r1, #67	; 0x43
 80053c8:	7008      	strb	r0, [r1, #0]
 80053ca:	0021      	movs	r1, r4
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	3145      	adds	r1, #69	; 0x45
 80053d0:	7809      	ldrb	r1, [r1, #0]
 80053d2:	18a2      	adds	r2, r4, r2
 80053d4:	3243      	adds	r2, #67	; 0x43
 80053d6:	3302      	adds	r3, #2
 80053d8:	7011      	strb	r1, [r2, #0]
 80053da:	e7c1      	b.n	8005360 <_printf_common+0x4c>
 80053dc:	0022      	movs	r2, r4
 80053de:	2301      	movs	r3, #1
 80053e0:	9901      	ldr	r1, [sp, #4]
 80053e2:	9800      	ldr	r0, [sp, #0]
 80053e4:	9e08      	ldr	r6, [sp, #32]
 80053e6:	321a      	adds	r2, #26
 80053e8:	47b0      	blx	r6
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	d0e6      	beq.n	80053bc <_printf_common+0xa8>
 80053ee:	3701      	adds	r7, #1
 80053f0:	e7d1      	b.n	8005396 <_printf_common+0x82>
	...

080053f4 <_printf_i>:
 80053f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f6:	b08b      	sub	sp, #44	; 0x2c
 80053f8:	9206      	str	r2, [sp, #24]
 80053fa:	000a      	movs	r2, r1
 80053fc:	3243      	adds	r2, #67	; 0x43
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	9005      	str	r0, [sp, #20]
 8005402:	9204      	str	r2, [sp, #16]
 8005404:	7e0a      	ldrb	r2, [r1, #24]
 8005406:	000c      	movs	r4, r1
 8005408:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800540a:	2a78      	cmp	r2, #120	; 0x78
 800540c:	d807      	bhi.n	800541e <_printf_i+0x2a>
 800540e:	2a62      	cmp	r2, #98	; 0x62
 8005410:	d809      	bhi.n	8005426 <_printf_i+0x32>
 8005412:	2a00      	cmp	r2, #0
 8005414:	d100      	bne.n	8005418 <_printf_i+0x24>
 8005416:	e0c1      	b.n	800559c <_printf_i+0x1a8>
 8005418:	2a58      	cmp	r2, #88	; 0x58
 800541a:	d100      	bne.n	800541e <_printf_i+0x2a>
 800541c:	e08c      	b.n	8005538 <_printf_i+0x144>
 800541e:	0026      	movs	r6, r4
 8005420:	3642      	adds	r6, #66	; 0x42
 8005422:	7032      	strb	r2, [r6, #0]
 8005424:	e022      	b.n	800546c <_printf_i+0x78>
 8005426:	0010      	movs	r0, r2
 8005428:	3863      	subs	r0, #99	; 0x63
 800542a:	2815      	cmp	r0, #21
 800542c:	d8f7      	bhi.n	800541e <_printf_i+0x2a>
 800542e:	f7fa fe6b 	bl	8000108 <__gnu_thumb1_case_shi>
 8005432:	0016      	.short	0x0016
 8005434:	fff6001f 	.word	0xfff6001f
 8005438:	fff6fff6 	.word	0xfff6fff6
 800543c:	001ffff6 	.word	0x001ffff6
 8005440:	fff6fff6 	.word	0xfff6fff6
 8005444:	fff6fff6 	.word	0xfff6fff6
 8005448:	003600a8 	.word	0x003600a8
 800544c:	fff6009a 	.word	0xfff6009a
 8005450:	00b9fff6 	.word	0x00b9fff6
 8005454:	0036fff6 	.word	0x0036fff6
 8005458:	fff6fff6 	.word	0xfff6fff6
 800545c:	009e      	.short	0x009e
 800545e:	0026      	movs	r6, r4
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	3642      	adds	r6, #66	; 0x42
 8005464:	1d11      	adds	r1, r2, #4
 8005466:	6019      	str	r1, [r3, #0]
 8005468:	6813      	ldr	r3, [r2, #0]
 800546a:	7033      	strb	r3, [r6, #0]
 800546c:	2301      	movs	r3, #1
 800546e:	e0a7      	b.n	80055c0 <_printf_i+0x1cc>
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	1d0a      	adds	r2, r1, #4
 8005476:	0605      	lsls	r5, r0, #24
 8005478:	d50b      	bpl.n	8005492 <_printf_i+0x9e>
 800547a:	680d      	ldr	r5, [r1, #0]
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	2d00      	cmp	r5, #0
 8005480:	da03      	bge.n	800548a <_printf_i+0x96>
 8005482:	232d      	movs	r3, #45	; 0x2d
 8005484:	9a04      	ldr	r2, [sp, #16]
 8005486:	426d      	negs	r5, r5
 8005488:	7013      	strb	r3, [r2, #0]
 800548a:	4b61      	ldr	r3, [pc, #388]	; (8005610 <_printf_i+0x21c>)
 800548c:	270a      	movs	r7, #10
 800548e:	9303      	str	r3, [sp, #12]
 8005490:	e01b      	b.n	80054ca <_printf_i+0xd6>
 8005492:	680d      	ldr	r5, [r1, #0]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	0641      	lsls	r1, r0, #25
 8005498:	d5f1      	bpl.n	800547e <_printf_i+0x8a>
 800549a:	b22d      	sxth	r5, r5
 800549c:	e7ef      	b.n	800547e <_printf_i+0x8a>
 800549e:	680d      	ldr	r5, [r1, #0]
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	1d08      	adds	r0, r1, #4
 80054a4:	6018      	str	r0, [r3, #0]
 80054a6:	062e      	lsls	r6, r5, #24
 80054a8:	d501      	bpl.n	80054ae <_printf_i+0xba>
 80054aa:	680d      	ldr	r5, [r1, #0]
 80054ac:	e003      	b.n	80054b6 <_printf_i+0xc2>
 80054ae:	066d      	lsls	r5, r5, #25
 80054b0:	d5fb      	bpl.n	80054aa <_printf_i+0xb6>
 80054b2:	680d      	ldr	r5, [r1, #0]
 80054b4:	b2ad      	uxth	r5, r5
 80054b6:	4b56      	ldr	r3, [pc, #344]	; (8005610 <_printf_i+0x21c>)
 80054b8:	2708      	movs	r7, #8
 80054ba:	9303      	str	r3, [sp, #12]
 80054bc:	2a6f      	cmp	r2, #111	; 0x6f
 80054be:	d000      	beq.n	80054c2 <_printf_i+0xce>
 80054c0:	3702      	adds	r7, #2
 80054c2:	0023      	movs	r3, r4
 80054c4:	2200      	movs	r2, #0
 80054c6:	3343      	adds	r3, #67	; 0x43
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6863      	ldr	r3, [r4, #4]
 80054cc:	60a3      	str	r3, [r4, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	db03      	blt.n	80054da <_printf_i+0xe6>
 80054d2:	2204      	movs	r2, #4
 80054d4:	6821      	ldr	r1, [r4, #0]
 80054d6:	4391      	bics	r1, r2
 80054d8:	6021      	str	r1, [r4, #0]
 80054da:	2d00      	cmp	r5, #0
 80054dc:	d102      	bne.n	80054e4 <_printf_i+0xf0>
 80054de:	9e04      	ldr	r6, [sp, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <_printf_i+0x10a>
 80054e4:	9e04      	ldr	r6, [sp, #16]
 80054e6:	0028      	movs	r0, r5
 80054e8:	0039      	movs	r1, r7
 80054ea:	f7fa fe9d 	bl	8000228 <__aeabi_uidivmod>
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	3e01      	subs	r6, #1
 80054f2:	5c5b      	ldrb	r3, [r3, r1]
 80054f4:	7033      	strb	r3, [r6, #0]
 80054f6:	002b      	movs	r3, r5
 80054f8:	0005      	movs	r5, r0
 80054fa:	429f      	cmp	r7, r3
 80054fc:	d9f3      	bls.n	80054e6 <_printf_i+0xf2>
 80054fe:	2f08      	cmp	r7, #8
 8005500:	d109      	bne.n	8005516 <_printf_i+0x122>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	07db      	lsls	r3, r3, #31
 8005506:	d506      	bpl.n	8005516 <_printf_i+0x122>
 8005508:	6863      	ldr	r3, [r4, #4]
 800550a:	6922      	ldr	r2, [r4, #16]
 800550c:	4293      	cmp	r3, r2
 800550e:	dc02      	bgt.n	8005516 <_printf_i+0x122>
 8005510:	2330      	movs	r3, #48	; 0x30
 8005512:	3e01      	subs	r6, #1
 8005514:	7033      	strb	r3, [r6, #0]
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	1b9b      	subs	r3, r3, r6
 800551a:	6123      	str	r3, [r4, #16]
 800551c:	9b07      	ldr	r3, [sp, #28]
 800551e:	0021      	movs	r1, r4
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	9805      	ldr	r0, [sp, #20]
 8005524:	9b06      	ldr	r3, [sp, #24]
 8005526:	aa09      	add	r2, sp, #36	; 0x24
 8005528:	f7ff fef4 	bl	8005314 <_printf_common>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d14c      	bne.n	80055ca <_printf_i+0x1d6>
 8005530:	2001      	movs	r0, #1
 8005532:	4240      	negs	r0, r0
 8005534:	b00b      	add	sp, #44	; 0x2c
 8005536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005538:	3145      	adds	r1, #69	; 0x45
 800553a:	700a      	strb	r2, [r1, #0]
 800553c:	4a34      	ldr	r2, [pc, #208]	; (8005610 <_printf_i+0x21c>)
 800553e:	9203      	str	r2, [sp, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	6821      	ldr	r1, [r4, #0]
 8005544:	ca20      	ldmia	r2!, {r5}
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	0608      	lsls	r0, r1, #24
 800554a:	d516      	bpl.n	800557a <_printf_i+0x186>
 800554c:	07cb      	lsls	r3, r1, #31
 800554e:	d502      	bpl.n	8005556 <_printf_i+0x162>
 8005550:	2320      	movs	r3, #32
 8005552:	4319      	orrs	r1, r3
 8005554:	6021      	str	r1, [r4, #0]
 8005556:	2710      	movs	r7, #16
 8005558:	2d00      	cmp	r5, #0
 800555a:	d1b2      	bne.n	80054c2 <_printf_i+0xce>
 800555c:	2320      	movs	r3, #32
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	439a      	bics	r2, r3
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	e7ad      	b.n	80054c2 <_printf_i+0xce>
 8005566:	2220      	movs	r2, #32
 8005568:	6809      	ldr	r1, [r1, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	6022      	str	r2, [r4, #0]
 800556e:	0022      	movs	r2, r4
 8005570:	2178      	movs	r1, #120	; 0x78
 8005572:	3245      	adds	r2, #69	; 0x45
 8005574:	7011      	strb	r1, [r2, #0]
 8005576:	4a27      	ldr	r2, [pc, #156]	; (8005614 <_printf_i+0x220>)
 8005578:	e7e1      	b.n	800553e <_printf_i+0x14a>
 800557a:	0648      	lsls	r0, r1, #25
 800557c:	d5e6      	bpl.n	800554c <_printf_i+0x158>
 800557e:	b2ad      	uxth	r5, r5
 8005580:	e7e4      	b.n	800554c <_printf_i+0x158>
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	680d      	ldr	r5, [r1, #0]
 8005586:	1d10      	adds	r0, r2, #4
 8005588:	6949      	ldr	r1, [r1, #20]
 800558a:	6018      	str	r0, [r3, #0]
 800558c:	6813      	ldr	r3, [r2, #0]
 800558e:	062e      	lsls	r6, r5, #24
 8005590:	d501      	bpl.n	8005596 <_printf_i+0x1a2>
 8005592:	6019      	str	r1, [r3, #0]
 8005594:	e002      	b.n	800559c <_printf_i+0x1a8>
 8005596:	066d      	lsls	r5, r5, #25
 8005598:	d5fb      	bpl.n	8005592 <_printf_i+0x19e>
 800559a:	8019      	strh	r1, [r3, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	9e04      	ldr	r6, [sp, #16]
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	e7bb      	b.n	800551c <_printf_i+0x128>
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	1d11      	adds	r1, r2, #4
 80055a8:	6019      	str	r1, [r3, #0]
 80055aa:	6816      	ldr	r6, [r2, #0]
 80055ac:	2100      	movs	r1, #0
 80055ae:	0030      	movs	r0, r6
 80055b0:	6862      	ldr	r2, [r4, #4]
 80055b2:	f000 f8ed 	bl	8005790 <memchr>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d001      	beq.n	80055be <_printf_i+0x1ca>
 80055ba:	1b80      	subs	r0, r0, r6
 80055bc:	6060      	str	r0, [r4, #4]
 80055be:	6863      	ldr	r3, [r4, #4]
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	2300      	movs	r3, #0
 80055c4:	9a04      	ldr	r2, [sp, #16]
 80055c6:	7013      	strb	r3, [r2, #0]
 80055c8:	e7a8      	b.n	800551c <_printf_i+0x128>
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	0032      	movs	r2, r6
 80055ce:	9906      	ldr	r1, [sp, #24]
 80055d0:	9805      	ldr	r0, [sp, #20]
 80055d2:	9d07      	ldr	r5, [sp, #28]
 80055d4:	47a8      	blx	r5
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	d0aa      	beq.n	8005530 <_printf_i+0x13c>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	079b      	lsls	r3, r3, #30
 80055de:	d415      	bmi.n	800560c <_printf_i+0x218>
 80055e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e2:	68e0      	ldr	r0, [r4, #12]
 80055e4:	4298      	cmp	r0, r3
 80055e6:	daa5      	bge.n	8005534 <_printf_i+0x140>
 80055e8:	0018      	movs	r0, r3
 80055ea:	e7a3      	b.n	8005534 <_printf_i+0x140>
 80055ec:	0022      	movs	r2, r4
 80055ee:	2301      	movs	r3, #1
 80055f0:	9906      	ldr	r1, [sp, #24]
 80055f2:	9805      	ldr	r0, [sp, #20]
 80055f4:	9e07      	ldr	r6, [sp, #28]
 80055f6:	3219      	adds	r2, #25
 80055f8:	47b0      	blx	r6
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d098      	beq.n	8005530 <_printf_i+0x13c>
 80055fe:	3501      	adds	r5, #1
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	42ab      	cmp	r3, r5
 8005608:	dcf0      	bgt.n	80055ec <_printf_i+0x1f8>
 800560a:	e7e9      	b.n	80055e0 <_printf_i+0x1ec>
 800560c:	2500      	movs	r5, #0
 800560e:	e7f7      	b.n	8005600 <_printf_i+0x20c>
 8005610:	08005d6d 	.word	0x08005d6d
 8005614:	08005d7e 	.word	0x08005d7e

08005618 <_sbrk_r>:
 8005618:	2300      	movs	r3, #0
 800561a:	b570      	push	{r4, r5, r6, lr}
 800561c:	4d06      	ldr	r5, [pc, #24]	; (8005638 <_sbrk_r+0x20>)
 800561e:	0004      	movs	r4, r0
 8005620:	0008      	movs	r0, r1
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	f7fc f84c 	bl	80016c0 <_sbrk>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d103      	bne.n	8005634 <_sbrk_r+0x1c>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d000      	beq.n	8005634 <_sbrk_r+0x1c>
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	200003ac 	.word	0x200003ac

0800563c <__sread>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	000c      	movs	r4, r1
 8005640:	250e      	movs	r5, #14
 8005642:	5f49      	ldrsh	r1, [r1, r5]
 8005644:	f000 f8c0 	bl	80057c8 <_read_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	db03      	blt.n	8005654 <__sread+0x18>
 800564c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800564e:	181b      	adds	r3, r3, r0
 8005650:	6563      	str	r3, [r4, #84]	; 0x54
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	4a02      	ldr	r2, [pc, #8]	; (8005660 <__sread+0x24>)
 8005658:	4013      	ands	r3, r2
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	e7f9      	b.n	8005652 <__sread+0x16>
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	ffffefff 	.word	0xffffefff

08005664 <__swrite>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	001f      	movs	r7, r3
 8005668:	898b      	ldrh	r3, [r1, #12]
 800566a:	0005      	movs	r5, r0
 800566c:	000c      	movs	r4, r1
 800566e:	0016      	movs	r6, r2
 8005670:	05db      	lsls	r3, r3, #23
 8005672:	d505      	bpl.n	8005680 <__swrite+0x1c>
 8005674:	230e      	movs	r3, #14
 8005676:	5ec9      	ldrsh	r1, [r1, r3]
 8005678:	2200      	movs	r2, #0
 800567a:	2302      	movs	r3, #2
 800567c:	f000 f874 	bl	8005768 <_lseek_r>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	4a05      	ldr	r2, [pc, #20]	; (8005698 <__swrite+0x34>)
 8005684:	0028      	movs	r0, r5
 8005686:	4013      	ands	r3, r2
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	0032      	movs	r2, r6
 800568c:	230e      	movs	r3, #14
 800568e:	5ee1      	ldrsh	r1, [r4, r3]
 8005690:	003b      	movs	r3, r7
 8005692:	f000 f81f 	bl	80056d4 <_write_r>
 8005696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005698:	ffffefff 	.word	0xffffefff

0800569c <__sseek>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	000c      	movs	r4, r1
 80056a0:	250e      	movs	r5, #14
 80056a2:	5f49      	ldrsh	r1, [r1, r5]
 80056a4:	f000 f860 	bl	8005768 <_lseek_r>
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	1c42      	adds	r2, r0, #1
 80056ac:	d103      	bne.n	80056b6 <__sseek+0x1a>
 80056ae:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <__sseek+0x28>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	81a3      	strh	r3, [r4, #12]
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	0152      	lsls	r2, r2, #5
 80056ba:	4313      	orrs	r3, r2
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	6560      	str	r0, [r4, #84]	; 0x54
 80056c0:	e7f8      	b.n	80056b4 <__sseek+0x18>
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	ffffefff 	.word	0xffffefff

080056c8 <__sclose>:
 80056c8:	b510      	push	{r4, lr}
 80056ca:	230e      	movs	r3, #14
 80056cc:	5ec9      	ldrsh	r1, [r1, r3]
 80056ce:	f000 f815 	bl	80056fc <_close_r>
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <_write_r>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	0004      	movs	r4, r0
 80056d8:	0008      	movs	r0, r1
 80056da:	0011      	movs	r1, r2
 80056dc:	001a      	movs	r2, r3
 80056de:	2300      	movs	r3, #0
 80056e0:	4d05      	ldr	r5, [pc, #20]	; (80056f8 <_write_r+0x24>)
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	f7fb ffa4 	bl	8001630 <_write>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d103      	bne.n	80056f4 <_write_r+0x20>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d000      	beq.n	80056f4 <_write_r+0x20>
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	200003ac 	.word	0x200003ac

080056fc <_close_r>:
 80056fc:	2300      	movs	r3, #0
 80056fe:	b570      	push	{r4, r5, r6, lr}
 8005700:	4d06      	ldr	r5, [pc, #24]	; (800571c <_close_r+0x20>)
 8005702:	0004      	movs	r4, r0
 8005704:	0008      	movs	r0, r1
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	f7fb ffae 	bl	8001668 <_close>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d103      	bne.n	8005718 <_close_r+0x1c>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d000      	beq.n	8005718 <_close_r+0x1c>
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	bd70      	pop	{r4, r5, r6, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	200003ac 	.word	0x200003ac

08005720 <_fstat_r>:
 8005720:	2300      	movs	r3, #0
 8005722:	b570      	push	{r4, r5, r6, lr}
 8005724:	4d06      	ldr	r5, [pc, #24]	; (8005740 <_fstat_r+0x20>)
 8005726:	0004      	movs	r4, r0
 8005728:	0008      	movs	r0, r1
 800572a:	0011      	movs	r1, r2
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f7fb ffa5 	bl	800167c <_fstat>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d103      	bne.n	800573e <_fstat_r+0x1e>
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d000      	beq.n	800573e <_fstat_r+0x1e>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	200003ac 	.word	0x200003ac

08005744 <_isatty_r>:
 8005744:	2300      	movs	r3, #0
 8005746:	b570      	push	{r4, r5, r6, lr}
 8005748:	4d06      	ldr	r5, [pc, #24]	; (8005764 <_isatty_r+0x20>)
 800574a:	0004      	movs	r4, r0
 800574c:	0008      	movs	r0, r1
 800574e:	602b      	str	r3, [r5, #0]
 8005750:	f7fb ffa2 	bl	8001698 <_isatty>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d103      	bne.n	8005760 <_isatty_r+0x1c>
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d000      	beq.n	8005760 <_isatty_r+0x1c>
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	200003ac 	.word	0x200003ac

08005768 <_lseek_r>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	0004      	movs	r4, r0
 800576c:	0008      	movs	r0, r1
 800576e:	0011      	movs	r1, r2
 8005770:	001a      	movs	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	4d05      	ldr	r5, [pc, #20]	; (800578c <_lseek_r+0x24>)
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fb ff97 	bl	80016aa <_lseek>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d103      	bne.n	8005788 <_lseek_r+0x20>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d000      	beq.n	8005788 <_lseek_r+0x20>
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	bd70      	pop	{r4, r5, r6, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	200003ac 	.word	0x200003ac

08005790 <memchr>:
 8005790:	b2c9      	uxtb	r1, r1
 8005792:	1882      	adds	r2, r0, r2
 8005794:	4290      	cmp	r0, r2
 8005796:	d101      	bne.n	800579c <memchr+0xc>
 8005798:	2000      	movs	r0, #0
 800579a:	4770      	bx	lr
 800579c:	7803      	ldrb	r3, [r0, #0]
 800579e:	428b      	cmp	r3, r1
 80057a0:	d0fb      	beq.n	800579a <memchr+0xa>
 80057a2:	3001      	adds	r0, #1
 80057a4:	e7f6      	b.n	8005794 <memchr+0x4>
	...

080057a8 <__malloc_lock>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4802      	ldr	r0, [pc, #8]	; (80057b4 <__malloc_lock+0xc>)
 80057ac:	f7ff faff 	bl	8004dae <__retarget_lock_acquire_recursive>
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	200003a0 	.word	0x200003a0

080057b8 <__malloc_unlock>:
 80057b8:	b510      	push	{r4, lr}
 80057ba:	4802      	ldr	r0, [pc, #8]	; (80057c4 <__malloc_unlock+0xc>)
 80057bc:	f7ff faf8 	bl	8004db0 <__retarget_lock_release_recursive>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	200003a0 	.word	0x200003a0

080057c8 <_read_r>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	0004      	movs	r4, r0
 80057cc:	0008      	movs	r0, r1
 80057ce:	0011      	movs	r1, r2
 80057d0:	001a      	movs	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	4d05      	ldr	r5, [pc, #20]	; (80057ec <_read_r+0x24>)
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fb ff0d 	bl	80015f6 <_read>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d103      	bne.n	80057e8 <_read_r+0x20>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d000      	beq.n	80057e8 <_read_r+0x20>
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	200003ac 	.word	0x200003ac

080057f0 <_init>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr

080057fc <_fini>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005802:	bc08      	pop	{r3}
 8005804:	469e      	mov	lr, r3
 8005806:	4770      	bx	lr
