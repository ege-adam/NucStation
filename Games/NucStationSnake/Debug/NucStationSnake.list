
NucStationSnake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e20  080080c0  080080c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800cee0  0800cee0  0000cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d31c  0800d31c  0001007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d31c  0800d31c  0000d31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d324  0800d324  0001007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d324  0800d324  0000d324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d328  0800d328  0000d328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d32c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000007c  0800d3a8  0001007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800d3a8  00010468  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e004  00000000  00000000  000100a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a7  00000000  00000000  0001e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00020250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00020f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ee5  00000000  00000000  00021af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec0b  00000000  00000000  000399d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088596  00000000  00000000  000485e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0b76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000380c  00000000  00000000  000d0bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080c0 <__do_global_dtors_aux>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4c06      	ldr	r4, [pc, #24]	; (80080dc <__do_global_dtors_aux+0x1c>)
 80080c4:	7823      	ldrb	r3, [r4, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <__do_global_dtors_aux+0x1a>
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <__do_global_dtors_aux+0x20>)
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d0:	4804      	ldr	r0, [pc, #16]	; (80080e4 <__do_global_dtors_aux+0x24>)
 80080d2:	e000      	b.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d4:	bf00      	nop
 80080d6:	2301      	movs	r3, #1
 80080d8:	7023      	strb	r3, [r4, #0]
 80080da:	bd10      	pop	{r4, pc}
 80080dc:	2000007c 	.word	0x2000007c
 80080e0:	00000000 	.word	0x00000000
 80080e4:	0800cec8 	.word	0x0800cec8

080080e8 <frame_dummy>:
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <frame_dummy+0x14>)
 80080ea:	b510      	push	{r4, lr}
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <frame_dummy+0x10>
 80080f0:	4903      	ldr	r1, [pc, #12]	; (8008100 <frame_dummy+0x18>)
 80080f2:	4804      	ldr	r0, [pc, #16]	; (8008104 <frame_dummy+0x1c>)
 80080f4:	e000      	b.n	80080f8 <frame_dummy+0x10>
 80080f6:	bf00      	nop
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	00000000 	.word	0x00000000
 8008100:	20000080 	.word	0x20000080
 8008104:	0800cec8 	.word	0x0800cec8

08008108 <__gnu_thumb1_case_shi>:
 8008108:	b403      	push	{r0, r1}
 800810a:	4671      	mov	r1, lr
 800810c:	0849      	lsrs	r1, r1, #1
 800810e:	0040      	lsls	r0, r0, #1
 8008110:	0049      	lsls	r1, r1, #1
 8008112:	5e09      	ldrsh	r1, [r1, r0]
 8008114:	0049      	lsls	r1, r1, #1
 8008116:	448e      	add	lr, r1
 8008118:	bc03      	pop	{r0, r1}
 800811a:	4770      	bx	lr

0800811c <__udivsi3>:
 800811c:	2200      	movs	r2, #0
 800811e:	0843      	lsrs	r3, r0, #1
 8008120:	428b      	cmp	r3, r1
 8008122:	d374      	bcc.n	800820e <__udivsi3+0xf2>
 8008124:	0903      	lsrs	r3, r0, #4
 8008126:	428b      	cmp	r3, r1
 8008128:	d35f      	bcc.n	80081ea <__udivsi3+0xce>
 800812a:	0a03      	lsrs	r3, r0, #8
 800812c:	428b      	cmp	r3, r1
 800812e:	d344      	bcc.n	80081ba <__udivsi3+0x9e>
 8008130:	0b03      	lsrs	r3, r0, #12
 8008132:	428b      	cmp	r3, r1
 8008134:	d328      	bcc.n	8008188 <__udivsi3+0x6c>
 8008136:	0c03      	lsrs	r3, r0, #16
 8008138:	428b      	cmp	r3, r1
 800813a:	d30d      	bcc.n	8008158 <__udivsi3+0x3c>
 800813c:	22ff      	movs	r2, #255	; 0xff
 800813e:	0209      	lsls	r1, r1, #8
 8008140:	ba12      	rev	r2, r2
 8008142:	0c03      	lsrs	r3, r0, #16
 8008144:	428b      	cmp	r3, r1
 8008146:	d302      	bcc.n	800814e <__udivsi3+0x32>
 8008148:	1212      	asrs	r2, r2, #8
 800814a:	0209      	lsls	r1, r1, #8
 800814c:	d065      	beq.n	800821a <__udivsi3+0xfe>
 800814e:	0b03      	lsrs	r3, r0, #12
 8008150:	428b      	cmp	r3, r1
 8008152:	d319      	bcc.n	8008188 <__udivsi3+0x6c>
 8008154:	e000      	b.n	8008158 <__udivsi3+0x3c>
 8008156:	0a09      	lsrs	r1, r1, #8
 8008158:	0bc3      	lsrs	r3, r0, #15
 800815a:	428b      	cmp	r3, r1
 800815c:	d301      	bcc.n	8008162 <__udivsi3+0x46>
 800815e:	03cb      	lsls	r3, r1, #15
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	4152      	adcs	r2, r2
 8008164:	0b83      	lsrs	r3, r0, #14
 8008166:	428b      	cmp	r3, r1
 8008168:	d301      	bcc.n	800816e <__udivsi3+0x52>
 800816a:	038b      	lsls	r3, r1, #14
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	4152      	adcs	r2, r2
 8008170:	0b43      	lsrs	r3, r0, #13
 8008172:	428b      	cmp	r3, r1
 8008174:	d301      	bcc.n	800817a <__udivsi3+0x5e>
 8008176:	034b      	lsls	r3, r1, #13
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	4152      	adcs	r2, r2
 800817c:	0b03      	lsrs	r3, r0, #12
 800817e:	428b      	cmp	r3, r1
 8008180:	d301      	bcc.n	8008186 <__udivsi3+0x6a>
 8008182:	030b      	lsls	r3, r1, #12
 8008184:	1ac0      	subs	r0, r0, r3
 8008186:	4152      	adcs	r2, r2
 8008188:	0ac3      	lsrs	r3, r0, #11
 800818a:	428b      	cmp	r3, r1
 800818c:	d301      	bcc.n	8008192 <__udivsi3+0x76>
 800818e:	02cb      	lsls	r3, r1, #11
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	4152      	adcs	r2, r2
 8008194:	0a83      	lsrs	r3, r0, #10
 8008196:	428b      	cmp	r3, r1
 8008198:	d301      	bcc.n	800819e <__udivsi3+0x82>
 800819a:	028b      	lsls	r3, r1, #10
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	4152      	adcs	r2, r2
 80081a0:	0a43      	lsrs	r3, r0, #9
 80081a2:	428b      	cmp	r3, r1
 80081a4:	d301      	bcc.n	80081aa <__udivsi3+0x8e>
 80081a6:	024b      	lsls	r3, r1, #9
 80081a8:	1ac0      	subs	r0, r0, r3
 80081aa:	4152      	adcs	r2, r2
 80081ac:	0a03      	lsrs	r3, r0, #8
 80081ae:	428b      	cmp	r3, r1
 80081b0:	d301      	bcc.n	80081b6 <__udivsi3+0x9a>
 80081b2:	020b      	lsls	r3, r1, #8
 80081b4:	1ac0      	subs	r0, r0, r3
 80081b6:	4152      	adcs	r2, r2
 80081b8:	d2cd      	bcs.n	8008156 <__udivsi3+0x3a>
 80081ba:	09c3      	lsrs	r3, r0, #7
 80081bc:	428b      	cmp	r3, r1
 80081be:	d301      	bcc.n	80081c4 <__udivsi3+0xa8>
 80081c0:	01cb      	lsls	r3, r1, #7
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	4152      	adcs	r2, r2
 80081c6:	0983      	lsrs	r3, r0, #6
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d301      	bcc.n	80081d0 <__udivsi3+0xb4>
 80081cc:	018b      	lsls	r3, r1, #6
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	4152      	adcs	r2, r2
 80081d2:	0943      	lsrs	r3, r0, #5
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d301      	bcc.n	80081dc <__udivsi3+0xc0>
 80081d8:	014b      	lsls	r3, r1, #5
 80081da:	1ac0      	subs	r0, r0, r3
 80081dc:	4152      	adcs	r2, r2
 80081de:	0903      	lsrs	r3, r0, #4
 80081e0:	428b      	cmp	r3, r1
 80081e2:	d301      	bcc.n	80081e8 <__udivsi3+0xcc>
 80081e4:	010b      	lsls	r3, r1, #4
 80081e6:	1ac0      	subs	r0, r0, r3
 80081e8:	4152      	adcs	r2, r2
 80081ea:	08c3      	lsrs	r3, r0, #3
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d301      	bcc.n	80081f4 <__udivsi3+0xd8>
 80081f0:	00cb      	lsls	r3, r1, #3
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	4152      	adcs	r2, r2
 80081f6:	0883      	lsrs	r3, r0, #2
 80081f8:	428b      	cmp	r3, r1
 80081fa:	d301      	bcc.n	8008200 <__udivsi3+0xe4>
 80081fc:	008b      	lsls	r3, r1, #2
 80081fe:	1ac0      	subs	r0, r0, r3
 8008200:	4152      	adcs	r2, r2
 8008202:	0843      	lsrs	r3, r0, #1
 8008204:	428b      	cmp	r3, r1
 8008206:	d301      	bcc.n	800820c <__udivsi3+0xf0>
 8008208:	004b      	lsls	r3, r1, #1
 800820a:	1ac0      	subs	r0, r0, r3
 800820c:	4152      	adcs	r2, r2
 800820e:	1a41      	subs	r1, r0, r1
 8008210:	d200      	bcs.n	8008214 <__udivsi3+0xf8>
 8008212:	4601      	mov	r1, r0
 8008214:	4152      	adcs	r2, r2
 8008216:	4610      	mov	r0, r2
 8008218:	4770      	bx	lr
 800821a:	e7ff      	b.n	800821c <__udivsi3+0x100>
 800821c:	b501      	push	{r0, lr}
 800821e:	2000      	movs	r0, #0
 8008220:	f000 f8f0 	bl	8008404 <__aeabi_idiv0>
 8008224:	bd02      	pop	{r1, pc}
 8008226:	46c0      	nop			; (mov r8, r8)

08008228 <__aeabi_uidivmod>:
 8008228:	2900      	cmp	r1, #0
 800822a:	d0f7      	beq.n	800821c <__udivsi3+0x100>
 800822c:	e776      	b.n	800811c <__udivsi3>
 800822e:	4770      	bx	lr

08008230 <__divsi3>:
 8008230:	4603      	mov	r3, r0
 8008232:	430b      	orrs	r3, r1
 8008234:	d47f      	bmi.n	8008336 <__divsi3+0x106>
 8008236:	2200      	movs	r2, #0
 8008238:	0843      	lsrs	r3, r0, #1
 800823a:	428b      	cmp	r3, r1
 800823c:	d374      	bcc.n	8008328 <__divsi3+0xf8>
 800823e:	0903      	lsrs	r3, r0, #4
 8008240:	428b      	cmp	r3, r1
 8008242:	d35f      	bcc.n	8008304 <__divsi3+0xd4>
 8008244:	0a03      	lsrs	r3, r0, #8
 8008246:	428b      	cmp	r3, r1
 8008248:	d344      	bcc.n	80082d4 <__divsi3+0xa4>
 800824a:	0b03      	lsrs	r3, r0, #12
 800824c:	428b      	cmp	r3, r1
 800824e:	d328      	bcc.n	80082a2 <__divsi3+0x72>
 8008250:	0c03      	lsrs	r3, r0, #16
 8008252:	428b      	cmp	r3, r1
 8008254:	d30d      	bcc.n	8008272 <__divsi3+0x42>
 8008256:	22ff      	movs	r2, #255	; 0xff
 8008258:	0209      	lsls	r1, r1, #8
 800825a:	ba12      	rev	r2, r2
 800825c:	0c03      	lsrs	r3, r0, #16
 800825e:	428b      	cmp	r3, r1
 8008260:	d302      	bcc.n	8008268 <__divsi3+0x38>
 8008262:	1212      	asrs	r2, r2, #8
 8008264:	0209      	lsls	r1, r1, #8
 8008266:	d065      	beq.n	8008334 <__divsi3+0x104>
 8008268:	0b03      	lsrs	r3, r0, #12
 800826a:	428b      	cmp	r3, r1
 800826c:	d319      	bcc.n	80082a2 <__divsi3+0x72>
 800826e:	e000      	b.n	8008272 <__divsi3+0x42>
 8008270:	0a09      	lsrs	r1, r1, #8
 8008272:	0bc3      	lsrs	r3, r0, #15
 8008274:	428b      	cmp	r3, r1
 8008276:	d301      	bcc.n	800827c <__divsi3+0x4c>
 8008278:	03cb      	lsls	r3, r1, #15
 800827a:	1ac0      	subs	r0, r0, r3
 800827c:	4152      	adcs	r2, r2
 800827e:	0b83      	lsrs	r3, r0, #14
 8008280:	428b      	cmp	r3, r1
 8008282:	d301      	bcc.n	8008288 <__divsi3+0x58>
 8008284:	038b      	lsls	r3, r1, #14
 8008286:	1ac0      	subs	r0, r0, r3
 8008288:	4152      	adcs	r2, r2
 800828a:	0b43      	lsrs	r3, r0, #13
 800828c:	428b      	cmp	r3, r1
 800828e:	d301      	bcc.n	8008294 <__divsi3+0x64>
 8008290:	034b      	lsls	r3, r1, #13
 8008292:	1ac0      	subs	r0, r0, r3
 8008294:	4152      	adcs	r2, r2
 8008296:	0b03      	lsrs	r3, r0, #12
 8008298:	428b      	cmp	r3, r1
 800829a:	d301      	bcc.n	80082a0 <__divsi3+0x70>
 800829c:	030b      	lsls	r3, r1, #12
 800829e:	1ac0      	subs	r0, r0, r3
 80082a0:	4152      	adcs	r2, r2
 80082a2:	0ac3      	lsrs	r3, r0, #11
 80082a4:	428b      	cmp	r3, r1
 80082a6:	d301      	bcc.n	80082ac <__divsi3+0x7c>
 80082a8:	02cb      	lsls	r3, r1, #11
 80082aa:	1ac0      	subs	r0, r0, r3
 80082ac:	4152      	adcs	r2, r2
 80082ae:	0a83      	lsrs	r3, r0, #10
 80082b0:	428b      	cmp	r3, r1
 80082b2:	d301      	bcc.n	80082b8 <__divsi3+0x88>
 80082b4:	028b      	lsls	r3, r1, #10
 80082b6:	1ac0      	subs	r0, r0, r3
 80082b8:	4152      	adcs	r2, r2
 80082ba:	0a43      	lsrs	r3, r0, #9
 80082bc:	428b      	cmp	r3, r1
 80082be:	d301      	bcc.n	80082c4 <__divsi3+0x94>
 80082c0:	024b      	lsls	r3, r1, #9
 80082c2:	1ac0      	subs	r0, r0, r3
 80082c4:	4152      	adcs	r2, r2
 80082c6:	0a03      	lsrs	r3, r0, #8
 80082c8:	428b      	cmp	r3, r1
 80082ca:	d301      	bcc.n	80082d0 <__divsi3+0xa0>
 80082cc:	020b      	lsls	r3, r1, #8
 80082ce:	1ac0      	subs	r0, r0, r3
 80082d0:	4152      	adcs	r2, r2
 80082d2:	d2cd      	bcs.n	8008270 <__divsi3+0x40>
 80082d4:	09c3      	lsrs	r3, r0, #7
 80082d6:	428b      	cmp	r3, r1
 80082d8:	d301      	bcc.n	80082de <__divsi3+0xae>
 80082da:	01cb      	lsls	r3, r1, #7
 80082dc:	1ac0      	subs	r0, r0, r3
 80082de:	4152      	adcs	r2, r2
 80082e0:	0983      	lsrs	r3, r0, #6
 80082e2:	428b      	cmp	r3, r1
 80082e4:	d301      	bcc.n	80082ea <__divsi3+0xba>
 80082e6:	018b      	lsls	r3, r1, #6
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	4152      	adcs	r2, r2
 80082ec:	0943      	lsrs	r3, r0, #5
 80082ee:	428b      	cmp	r3, r1
 80082f0:	d301      	bcc.n	80082f6 <__divsi3+0xc6>
 80082f2:	014b      	lsls	r3, r1, #5
 80082f4:	1ac0      	subs	r0, r0, r3
 80082f6:	4152      	adcs	r2, r2
 80082f8:	0903      	lsrs	r3, r0, #4
 80082fa:	428b      	cmp	r3, r1
 80082fc:	d301      	bcc.n	8008302 <__divsi3+0xd2>
 80082fe:	010b      	lsls	r3, r1, #4
 8008300:	1ac0      	subs	r0, r0, r3
 8008302:	4152      	adcs	r2, r2
 8008304:	08c3      	lsrs	r3, r0, #3
 8008306:	428b      	cmp	r3, r1
 8008308:	d301      	bcc.n	800830e <__divsi3+0xde>
 800830a:	00cb      	lsls	r3, r1, #3
 800830c:	1ac0      	subs	r0, r0, r3
 800830e:	4152      	adcs	r2, r2
 8008310:	0883      	lsrs	r3, r0, #2
 8008312:	428b      	cmp	r3, r1
 8008314:	d301      	bcc.n	800831a <__divsi3+0xea>
 8008316:	008b      	lsls	r3, r1, #2
 8008318:	1ac0      	subs	r0, r0, r3
 800831a:	4152      	adcs	r2, r2
 800831c:	0843      	lsrs	r3, r0, #1
 800831e:	428b      	cmp	r3, r1
 8008320:	d301      	bcc.n	8008326 <__divsi3+0xf6>
 8008322:	004b      	lsls	r3, r1, #1
 8008324:	1ac0      	subs	r0, r0, r3
 8008326:	4152      	adcs	r2, r2
 8008328:	1a41      	subs	r1, r0, r1
 800832a:	d200      	bcs.n	800832e <__divsi3+0xfe>
 800832c:	4601      	mov	r1, r0
 800832e:	4152      	adcs	r2, r2
 8008330:	4610      	mov	r0, r2
 8008332:	4770      	bx	lr
 8008334:	e05d      	b.n	80083f2 <__divsi3+0x1c2>
 8008336:	0fca      	lsrs	r2, r1, #31
 8008338:	d000      	beq.n	800833c <__divsi3+0x10c>
 800833a:	4249      	negs	r1, r1
 800833c:	1003      	asrs	r3, r0, #32
 800833e:	d300      	bcc.n	8008342 <__divsi3+0x112>
 8008340:	4240      	negs	r0, r0
 8008342:	4053      	eors	r3, r2
 8008344:	2200      	movs	r2, #0
 8008346:	469c      	mov	ip, r3
 8008348:	0903      	lsrs	r3, r0, #4
 800834a:	428b      	cmp	r3, r1
 800834c:	d32d      	bcc.n	80083aa <__divsi3+0x17a>
 800834e:	0a03      	lsrs	r3, r0, #8
 8008350:	428b      	cmp	r3, r1
 8008352:	d312      	bcc.n	800837a <__divsi3+0x14a>
 8008354:	22fc      	movs	r2, #252	; 0xfc
 8008356:	0189      	lsls	r1, r1, #6
 8008358:	ba12      	rev	r2, r2
 800835a:	0a03      	lsrs	r3, r0, #8
 800835c:	428b      	cmp	r3, r1
 800835e:	d30c      	bcc.n	800837a <__divsi3+0x14a>
 8008360:	0189      	lsls	r1, r1, #6
 8008362:	1192      	asrs	r2, r2, #6
 8008364:	428b      	cmp	r3, r1
 8008366:	d308      	bcc.n	800837a <__divsi3+0x14a>
 8008368:	0189      	lsls	r1, r1, #6
 800836a:	1192      	asrs	r2, r2, #6
 800836c:	428b      	cmp	r3, r1
 800836e:	d304      	bcc.n	800837a <__divsi3+0x14a>
 8008370:	0189      	lsls	r1, r1, #6
 8008372:	d03a      	beq.n	80083ea <__divsi3+0x1ba>
 8008374:	1192      	asrs	r2, r2, #6
 8008376:	e000      	b.n	800837a <__divsi3+0x14a>
 8008378:	0989      	lsrs	r1, r1, #6
 800837a:	09c3      	lsrs	r3, r0, #7
 800837c:	428b      	cmp	r3, r1
 800837e:	d301      	bcc.n	8008384 <__divsi3+0x154>
 8008380:	01cb      	lsls	r3, r1, #7
 8008382:	1ac0      	subs	r0, r0, r3
 8008384:	4152      	adcs	r2, r2
 8008386:	0983      	lsrs	r3, r0, #6
 8008388:	428b      	cmp	r3, r1
 800838a:	d301      	bcc.n	8008390 <__divsi3+0x160>
 800838c:	018b      	lsls	r3, r1, #6
 800838e:	1ac0      	subs	r0, r0, r3
 8008390:	4152      	adcs	r2, r2
 8008392:	0943      	lsrs	r3, r0, #5
 8008394:	428b      	cmp	r3, r1
 8008396:	d301      	bcc.n	800839c <__divsi3+0x16c>
 8008398:	014b      	lsls	r3, r1, #5
 800839a:	1ac0      	subs	r0, r0, r3
 800839c:	4152      	adcs	r2, r2
 800839e:	0903      	lsrs	r3, r0, #4
 80083a0:	428b      	cmp	r3, r1
 80083a2:	d301      	bcc.n	80083a8 <__divsi3+0x178>
 80083a4:	010b      	lsls	r3, r1, #4
 80083a6:	1ac0      	subs	r0, r0, r3
 80083a8:	4152      	adcs	r2, r2
 80083aa:	08c3      	lsrs	r3, r0, #3
 80083ac:	428b      	cmp	r3, r1
 80083ae:	d301      	bcc.n	80083b4 <__divsi3+0x184>
 80083b0:	00cb      	lsls	r3, r1, #3
 80083b2:	1ac0      	subs	r0, r0, r3
 80083b4:	4152      	adcs	r2, r2
 80083b6:	0883      	lsrs	r3, r0, #2
 80083b8:	428b      	cmp	r3, r1
 80083ba:	d301      	bcc.n	80083c0 <__divsi3+0x190>
 80083bc:	008b      	lsls	r3, r1, #2
 80083be:	1ac0      	subs	r0, r0, r3
 80083c0:	4152      	adcs	r2, r2
 80083c2:	d2d9      	bcs.n	8008378 <__divsi3+0x148>
 80083c4:	0843      	lsrs	r3, r0, #1
 80083c6:	428b      	cmp	r3, r1
 80083c8:	d301      	bcc.n	80083ce <__divsi3+0x19e>
 80083ca:	004b      	lsls	r3, r1, #1
 80083cc:	1ac0      	subs	r0, r0, r3
 80083ce:	4152      	adcs	r2, r2
 80083d0:	1a41      	subs	r1, r0, r1
 80083d2:	d200      	bcs.n	80083d6 <__divsi3+0x1a6>
 80083d4:	4601      	mov	r1, r0
 80083d6:	4663      	mov	r3, ip
 80083d8:	4152      	adcs	r2, r2
 80083da:	105b      	asrs	r3, r3, #1
 80083dc:	4610      	mov	r0, r2
 80083de:	d301      	bcc.n	80083e4 <__divsi3+0x1b4>
 80083e0:	4240      	negs	r0, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d500      	bpl.n	80083e8 <__divsi3+0x1b8>
 80083e6:	4249      	negs	r1, r1
 80083e8:	4770      	bx	lr
 80083ea:	4663      	mov	r3, ip
 80083ec:	105b      	asrs	r3, r3, #1
 80083ee:	d300      	bcc.n	80083f2 <__divsi3+0x1c2>
 80083f0:	4240      	negs	r0, r0
 80083f2:	b501      	push	{r0, lr}
 80083f4:	2000      	movs	r0, #0
 80083f6:	f000 f805 	bl	8008404 <__aeabi_idiv0>
 80083fa:	bd02      	pop	{r1, pc}

080083fc <__aeabi_idivmod>:
 80083fc:	2900      	cmp	r1, #0
 80083fe:	d0f8      	beq.n	80083f2 <__divsi3+0x1c2>
 8008400:	e716      	b.n	8008230 <__divsi3>
 8008402:	4770      	bx	lr

08008404 <__aeabi_idiv0>:
 8008404:	4770      	bx	lr
 8008406:	46c0      	nop			; (mov r8, r8)

08008408 <__aeabi_uldivmod>:
 8008408:	2b00      	cmp	r3, #0
 800840a:	d111      	bne.n	8008430 <__aeabi_uldivmod+0x28>
 800840c:	2a00      	cmp	r2, #0
 800840e:	d10f      	bne.n	8008430 <__aeabi_uldivmod+0x28>
 8008410:	2900      	cmp	r1, #0
 8008412:	d100      	bne.n	8008416 <__aeabi_uldivmod+0xe>
 8008414:	2800      	cmp	r0, #0
 8008416:	d002      	beq.n	800841e <__aeabi_uldivmod+0x16>
 8008418:	2100      	movs	r1, #0
 800841a:	43c9      	mvns	r1, r1
 800841c:	0008      	movs	r0, r1
 800841e:	b407      	push	{r0, r1, r2}
 8008420:	4802      	ldr	r0, [pc, #8]	; (800842c <__aeabi_uldivmod+0x24>)
 8008422:	a102      	add	r1, pc, #8	; (adr r1, 800842c <__aeabi_uldivmod+0x24>)
 8008424:	1840      	adds	r0, r0, r1
 8008426:	9002      	str	r0, [sp, #8]
 8008428:	bd03      	pop	{r0, r1, pc}
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	ffffffd9 	.word	0xffffffd9
 8008430:	b403      	push	{r0, r1}
 8008432:	4668      	mov	r0, sp
 8008434:	b501      	push	{r0, lr}
 8008436:	9802      	ldr	r0, [sp, #8]
 8008438:	f000 f834 	bl	80084a4 <__udivmoddi4>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	469e      	mov	lr, r3
 8008440:	b002      	add	sp, #8
 8008442:	bc0c      	pop	{r2, r3}
 8008444:	4770      	bx	lr
 8008446:	46c0      	nop			; (mov r8, r8)

08008448 <__aeabi_lmul>:
 8008448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844a:	46ce      	mov	lr, r9
 800844c:	4647      	mov	r7, r8
 800844e:	b580      	push	{r7, lr}
 8008450:	0007      	movs	r7, r0
 8008452:	4699      	mov	r9, r3
 8008454:	0c3b      	lsrs	r3, r7, #16
 8008456:	469c      	mov	ip, r3
 8008458:	0413      	lsls	r3, r2, #16
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	001d      	movs	r5, r3
 800845e:	000e      	movs	r6, r1
 8008460:	4661      	mov	r1, ip
 8008462:	0400      	lsls	r0, r0, #16
 8008464:	0c14      	lsrs	r4, r2, #16
 8008466:	0c00      	lsrs	r0, r0, #16
 8008468:	4345      	muls	r5, r0
 800846a:	434b      	muls	r3, r1
 800846c:	4360      	muls	r0, r4
 800846e:	4361      	muls	r1, r4
 8008470:	18c0      	adds	r0, r0, r3
 8008472:	0c2c      	lsrs	r4, r5, #16
 8008474:	1820      	adds	r0, r4, r0
 8008476:	468c      	mov	ip, r1
 8008478:	4283      	cmp	r3, r0
 800847a:	d903      	bls.n	8008484 <__aeabi_lmul+0x3c>
 800847c:	2380      	movs	r3, #128	; 0x80
 800847e:	025b      	lsls	r3, r3, #9
 8008480:	4698      	mov	r8, r3
 8008482:	44c4      	add	ip, r8
 8008484:	4649      	mov	r1, r9
 8008486:	4379      	muls	r1, r7
 8008488:	4372      	muls	r2, r6
 800848a:	0c03      	lsrs	r3, r0, #16
 800848c:	4463      	add	r3, ip
 800848e:	042d      	lsls	r5, r5, #16
 8008490:	0c2d      	lsrs	r5, r5, #16
 8008492:	18c9      	adds	r1, r1, r3
 8008494:	0400      	lsls	r0, r0, #16
 8008496:	1940      	adds	r0, r0, r5
 8008498:	1889      	adds	r1, r1, r2
 800849a:	bcc0      	pop	{r6, r7}
 800849c:	46b9      	mov	r9, r7
 800849e:	46b0      	mov	r8, r6
 80084a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a2:	46c0      	nop			; (mov r8, r8)

080084a4 <__udivmoddi4>:
 80084a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a6:	4657      	mov	r7, sl
 80084a8:	464e      	mov	r6, r9
 80084aa:	4645      	mov	r5, r8
 80084ac:	46de      	mov	lr, fp
 80084ae:	b5e0      	push	{r5, r6, r7, lr}
 80084b0:	0004      	movs	r4, r0
 80084b2:	000d      	movs	r5, r1
 80084b4:	4692      	mov	sl, r2
 80084b6:	4699      	mov	r9, r3
 80084b8:	b083      	sub	sp, #12
 80084ba:	428b      	cmp	r3, r1
 80084bc:	d830      	bhi.n	8008520 <__udivmoddi4+0x7c>
 80084be:	d02d      	beq.n	800851c <__udivmoddi4+0x78>
 80084c0:	4649      	mov	r1, r9
 80084c2:	4650      	mov	r0, sl
 80084c4:	f000 f8d8 	bl	8008678 <__clzdi2>
 80084c8:	0029      	movs	r1, r5
 80084ca:	0006      	movs	r6, r0
 80084cc:	0020      	movs	r0, r4
 80084ce:	f000 f8d3 	bl	8008678 <__clzdi2>
 80084d2:	1a33      	subs	r3, r6, r0
 80084d4:	4698      	mov	r8, r3
 80084d6:	3b20      	subs	r3, #32
 80084d8:	469b      	mov	fp, r3
 80084da:	d433      	bmi.n	8008544 <__udivmoddi4+0xa0>
 80084dc:	465a      	mov	r2, fp
 80084de:	4653      	mov	r3, sl
 80084e0:	4093      	lsls	r3, r2
 80084e2:	4642      	mov	r2, r8
 80084e4:	001f      	movs	r7, r3
 80084e6:	4653      	mov	r3, sl
 80084e8:	4093      	lsls	r3, r2
 80084ea:	001e      	movs	r6, r3
 80084ec:	42af      	cmp	r7, r5
 80084ee:	d83a      	bhi.n	8008566 <__udivmoddi4+0xc2>
 80084f0:	42af      	cmp	r7, r5
 80084f2:	d100      	bne.n	80084f6 <__udivmoddi4+0x52>
 80084f4:	e078      	b.n	80085e8 <__udivmoddi4+0x144>
 80084f6:	465b      	mov	r3, fp
 80084f8:	1ba4      	subs	r4, r4, r6
 80084fa:	41bd      	sbcs	r5, r7
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da00      	bge.n	8008502 <__udivmoddi4+0x5e>
 8008500:	e075      	b.n	80085ee <__udivmoddi4+0x14a>
 8008502:	2200      	movs	r2, #0
 8008504:	2300      	movs	r3, #0
 8008506:	9200      	str	r2, [sp, #0]
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	2301      	movs	r3, #1
 800850c:	465a      	mov	r2, fp
 800850e:	4093      	lsls	r3, r2
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	2301      	movs	r3, #1
 8008514:	4642      	mov	r2, r8
 8008516:	4093      	lsls	r3, r2
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	e028      	b.n	800856e <__udivmoddi4+0xca>
 800851c:	4282      	cmp	r2, r0
 800851e:	d9cf      	bls.n	80084c0 <__udivmoddi4+0x1c>
 8008520:	2200      	movs	r2, #0
 8008522:	2300      	movs	r3, #0
 8008524:	9200      	str	r2, [sp, #0]
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <__udivmoddi4+0x8e>
 800852e:	601c      	str	r4, [r3, #0]
 8008530:	605d      	str	r5, [r3, #4]
 8008532:	9800      	ldr	r0, [sp, #0]
 8008534:	9901      	ldr	r1, [sp, #4]
 8008536:	b003      	add	sp, #12
 8008538:	bcf0      	pop	{r4, r5, r6, r7}
 800853a:	46bb      	mov	fp, r7
 800853c:	46b2      	mov	sl, r6
 800853e:	46a9      	mov	r9, r5
 8008540:	46a0      	mov	r8, r4
 8008542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008544:	4642      	mov	r2, r8
 8008546:	2320      	movs	r3, #32
 8008548:	1a9b      	subs	r3, r3, r2
 800854a:	4652      	mov	r2, sl
 800854c:	40da      	lsrs	r2, r3
 800854e:	4641      	mov	r1, r8
 8008550:	0013      	movs	r3, r2
 8008552:	464a      	mov	r2, r9
 8008554:	408a      	lsls	r2, r1
 8008556:	0017      	movs	r7, r2
 8008558:	4642      	mov	r2, r8
 800855a:	431f      	orrs	r7, r3
 800855c:	4653      	mov	r3, sl
 800855e:	4093      	lsls	r3, r2
 8008560:	001e      	movs	r6, r3
 8008562:	42af      	cmp	r7, r5
 8008564:	d9c4      	bls.n	80084f0 <__udivmoddi4+0x4c>
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	9200      	str	r2, [sp, #0]
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	4643      	mov	r3, r8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0d9      	beq.n	8008528 <__udivmoddi4+0x84>
 8008574:	07fb      	lsls	r3, r7, #31
 8008576:	0872      	lsrs	r2, r6, #1
 8008578:	431a      	orrs	r2, r3
 800857a:	4646      	mov	r6, r8
 800857c:	087b      	lsrs	r3, r7, #1
 800857e:	e00e      	b.n	800859e <__udivmoddi4+0xfa>
 8008580:	42ab      	cmp	r3, r5
 8008582:	d101      	bne.n	8008588 <__udivmoddi4+0xe4>
 8008584:	42a2      	cmp	r2, r4
 8008586:	d80c      	bhi.n	80085a2 <__udivmoddi4+0xfe>
 8008588:	1aa4      	subs	r4, r4, r2
 800858a:	419d      	sbcs	r5, r3
 800858c:	2001      	movs	r0, #1
 800858e:	1924      	adds	r4, r4, r4
 8008590:	416d      	adcs	r5, r5
 8008592:	2100      	movs	r1, #0
 8008594:	3e01      	subs	r6, #1
 8008596:	1824      	adds	r4, r4, r0
 8008598:	414d      	adcs	r5, r1
 800859a:	2e00      	cmp	r6, #0
 800859c:	d006      	beq.n	80085ac <__udivmoddi4+0x108>
 800859e:	42ab      	cmp	r3, r5
 80085a0:	d9ee      	bls.n	8008580 <__udivmoddi4+0xdc>
 80085a2:	3e01      	subs	r6, #1
 80085a4:	1924      	adds	r4, r4, r4
 80085a6:	416d      	adcs	r5, r5
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	d1f8      	bne.n	800859e <__udivmoddi4+0xfa>
 80085ac:	9800      	ldr	r0, [sp, #0]
 80085ae:	9901      	ldr	r1, [sp, #4]
 80085b0:	465b      	mov	r3, fp
 80085b2:	1900      	adds	r0, r0, r4
 80085b4:	4169      	adcs	r1, r5
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	db24      	blt.n	8008604 <__udivmoddi4+0x160>
 80085ba:	002b      	movs	r3, r5
 80085bc:	465a      	mov	r2, fp
 80085be:	4644      	mov	r4, r8
 80085c0:	40d3      	lsrs	r3, r2
 80085c2:	002a      	movs	r2, r5
 80085c4:	40e2      	lsrs	r2, r4
 80085c6:	001c      	movs	r4, r3
 80085c8:	465b      	mov	r3, fp
 80085ca:	0015      	movs	r5, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	db2a      	blt.n	8008626 <__udivmoddi4+0x182>
 80085d0:	0026      	movs	r6, r4
 80085d2:	409e      	lsls	r6, r3
 80085d4:	0033      	movs	r3, r6
 80085d6:	0026      	movs	r6, r4
 80085d8:	4647      	mov	r7, r8
 80085da:	40be      	lsls	r6, r7
 80085dc:	0032      	movs	r2, r6
 80085de:	1a80      	subs	r0, r0, r2
 80085e0:	4199      	sbcs	r1, r3
 80085e2:	9000      	str	r0, [sp, #0]
 80085e4:	9101      	str	r1, [sp, #4]
 80085e6:	e79f      	b.n	8008528 <__udivmoddi4+0x84>
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d8bc      	bhi.n	8008566 <__udivmoddi4+0xc2>
 80085ec:	e783      	b.n	80084f6 <__udivmoddi4+0x52>
 80085ee:	4642      	mov	r2, r8
 80085f0:	2320      	movs	r3, #32
 80085f2:	2100      	movs	r1, #0
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	2200      	movs	r2, #0
 80085f8:	9100      	str	r1, [sp, #0]
 80085fa:	9201      	str	r2, [sp, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	40da      	lsrs	r2, r3
 8008600:	9201      	str	r2, [sp, #4]
 8008602:	e786      	b.n	8008512 <__udivmoddi4+0x6e>
 8008604:	4642      	mov	r2, r8
 8008606:	2320      	movs	r3, #32
 8008608:	1a9b      	subs	r3, r3, r2
 800860a:	002a      	movs	r2, r5
 800860c:	4646      	mov	r6, r8
 800860e:	409a      	lsls	r2, r3
 8008610:	0023      	movs	r3, r4
 8008612:	40f3      	lsrs	r3, r6
 8008614:	4644      	mov	r4, r8
 8008616:	4313      	orrs	r3, r2
 8008618:	002a      	movs	r2, r5
 800861a:	40e2      	lsrs	r2, r4
 800861c:	001c      	movs	r4, r3
 800861e:	465b      	mov	r3, fp
 8008620:	0015      	movs	r5, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	dad4      	bge.n	80085d0 <__udivmoddi4+0x12c>
 8008626:	4642      	mov	r2, r8
 8008628:	002f      	movs	r7, r5
 800862a:	2320      	movs	r3, #32
 800862c:	0026      	movs	r6, r4
 800862e:	4097      	lsls	r7, r2
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	40de      	lsrs	r6, r3
 8008634:	003b      	movs	r3, r7
 8008636:	4333      	orrs	r3, r6
 8008638:	e7cd      	b.n	80085d6 <__udivmoddi4+0x132>
 800863a:	46c0      	nop			; (mov r8, r8)

0800863c <__clzsi2>:
 800863c:	211c      	movs	r1, #28
 800863e:	2301      	movs	r3, #1
 8008640:	041b      	lsls	r3, r3, #16
 8008642:	4298      	cmp	r0, r3
 8008644:	d301      	bcc.n	800864a <__clzsi2+0xe>
 8008646:	0c00      	lsrs	r0, r0, #16
 8008648:	3910      	subs	r1, #16
 800864a:	0a1b      	lsrs	r3, r3, #8
 800864c:	4298      	cmp	r0, r3
 800864e:	d301      	bcc.n	8008654 <__clzsi2+0x18>
 8008650:	0a00      	lsrs	r0, r0, #8
 8008652:	3908      	subs	r1, #8
 8008654:	091b      	lsrs	r3, r3, #4
 8008656:	4298      	cmp	r0, r3
 8008658:	d301      	bcc.n	800865e <__clzsi2+0x22>
 800865a:	0900      	lsrs	r0, r0, #4
 800865c:	3904      	subs	r1, #4
 800865e:	a202      	add	r2, pc, #8	; (adr r2, 8008668 <__clzsi2+0x2c>)
 8008660:	5c10      	ldrb	r0, [r2, r0]
 8008662:	1840      	adds	r0, r0, r1
 8008664:	4770      	bx	lr
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	02020304 	.word	0x02020304
 800866c:	01010101 	.word	0x01010101
	...

08008678 <__clzdi2>:
 8008678:	b510      	push	{r4, lr}
 800867a:	2900      	cmp	r1, #0
 800867c:	d103      	bne.n	8008686 <__clzdi2+0xe>
 800867e:	f7ff ffdd 	bl	800863c <__clzsi2>
 8008682:	3020      	adds	r0, #32
 8008684:	e002      	b.n	800868c <__clzdi2+0x14>
 8008686:	0008      	movs	r0, r1
 8008688:	f7ff ffd8 	bl	800863c <__clzsi2>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	46c0      	nop			; (mov r8, r8)

08008690 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>:
 */

#include <GamepadButton.hpp>


GamepadButton::GamepadButton(GPIO_TypeDef* _PORT, uint16_t _PIN) {
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b08b      	sub	sp, #44	; 0x2c
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	1dbb      	adds	r3, r7, #6
 800869c:	801a      	strh	r2, [r3, #0]
	but_pin = _PIN;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1dba      	adds	r2, r7, #6
 80086a2:	8812      	ldrh	r2, [r2, #0]
 80086a4:	809a      	strh	r2, [r3, #4]
	but_port = _PORT;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086ac:	2414      	movs	r4, #20
 80086ae:	193b      	adds	r3, r7, r4
 80086b0:	0018      	movs	r0, r3
 80086b2:	2314      	movs	r3, #20
 80086b4:	001a      	movs	r2, r3
 80086b6:	2100      	movs	r1, #0
 80086b8:	f003 fb38 	bl	800bd2c <memset>

	/*Configure GPIO pins */
	GPIO_InitStruct.Pin = _PIN;
 80086bc:	1dbb      	adds	r3, r7, #6
 80086be:	881a      	ldrh	r2, [r3, #0]
 80086c0:	193b      	adds	r3, r7, r4
 80086c2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086c4:	193b      	adds	r3, r7, r4
 80086c6:	2200      	movs	r2, #0
 80086c8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086ca:	193b      	adds	r3, r7, r4
 80086cc:	2201      	movs	r2, #1
 80086ce:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(_PORT, &GPIO_InitStruct);
 80086d0:	193a      	adds	r2, r7, r4
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	0011      	movs	r1, r2
 80086d6:	0018      	movs	r0, r3
 80086d8:	f001 fb1c 	bl	8009d14 <HAL_GPIO_Init>
}
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	0018      	movs	r0, r3
 80086e0:	46bd      	mov	sp, r7
 80086e2:	b00b      	add	sp, #44	; 0x2c
 80086e4:	bd90      	pop	{r4, r7, pc}

080086e6 <_ZN13GamepadButton12UpdateButtonEv>:

void GamepadButton::UpdateButton()
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(but_port, but_pin) == GPIO_PIN_RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	889b      	ldrh	r3, [r3, #4]
 80086f6:	0019      	movs	r1, r3
 80086f8:	0010      	movs	r0, r2
 80086fa:	f001 fc89 	bl	800a010 <HAL_GPIO_ReadPin>
 80086fe:	0003      	movs	r3, r0
 8008700:	425a      	negs	r2, r3
 8008702:	4153      	adcs	r3, r2
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <_ZN13GamepadButton12UpdateButtonEv+0x2c>
	{
		IsPressing = true;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	71da      	strb	r2, [r3, #7]
 8008710:	e002      	b.n	8008718 <_ZN13GamepadButton12UpdateButtonEv+0x32>
	}
	else
	{
		IsPressing = false;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	71da      	strb	r2, [r3, #7]
	}

	if(IsPressing != lastStatus)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	79da      	ldrb	r2, [r3, #7]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	799b      	ldrb	r3, [r3, #6]
 8008720:	429a      	cmp	r2, r3
 8008722:	d003      	beq.n	800872c <_ZN13GamepadButton12UpdateButtonEv+0x46>
		else
		{
			//OnDown.Execute(this);
		}

		lastStatus = IsPressing;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	79da      	ldrb	r2, [r3, #7]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	719a      	strb	r2, [r3, #6]
	}
}
 800872c:	46c0      	nop			; (mov r8, r8)
 800872e:	46bd      	mov	sp, r7
 8008730:	b002      	add	sp, #8
 8008732:	bd80      	pop	{r7, pc}

08008734 <_Z13SetRandomBaitv>:

int score = 1;


void SetRandomBait()
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
	LCD_setPixel(baitX, baitY, false);
 8008738:	4b25      	ldr	r3, [pc, #148]	; (80087d0 <_Z13SetRandomBaitv+0x9c>)
 800873a:	7818      	ldrb	r0, [r3, #0]
 800873c:	4b25      	ldr	r3, [pc, #148]	; (80087d4 <_Z13SetRandomBaitv+0xa0>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2200      	movs	r2, #0
 8008742:	0019      	movs	r1, r3
 8008744:	f000 ff20 	bl	8009588 <LCD_setPixel>
	baitX = LCD_WIDTH;
 8008748:	4b21      	ldr	r3, [pc, #132]	; (80087d0 <_Z13SetRandomBaitv+0x9c>)
 800874a:	2254      	movs	r2, #84	; 0x54
 800874c:	701a      	strb	r2, [r3, #0]
	baitX = ( rand() % (baitX - 16) ) + 16;
 800874e:	f003 faf5 	bl	800bd3c <rand>
 8008752:	0002      	movs	r2, r0
 8008754:	4b1e      	ldr	r3, [pc, #120]	; (80087d0 <_Z13SetRandomBaitv+0x9c>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	3b10      	subs	r3, #16
 800875a:	0019      	movs	r1, r3
 800875c:	0010      	movs	r0, r2
 800875e:	f7ff fe4d 	bl	80083fc <__aeabi_idivmod>
 8008762:	000b      	movs	r3, r1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	3310      	adds	r3, #16
 8008768:	b2da      	uxtb	r2, r3
 800876a:	4b19      	ldr	r3, [pc, #100]	; (80087d0 <_Z13SetRandomBaitv+0x9c>)
 800876c:	701a      	strb	r2, [r3, #0]

	baitY = LCD_HEIGHT;
 800876e:	4b19      	ldr	r3, [pc, #100]	; (80087d4 <_Z13SetRandomBaitv+0xa0>)
 8008770:	2230      	movs	r2, #48	; 0x30
 8008772:	701a      	strb	r2, [r3, #0]
	baitY = ( rand() % (baitY - 16) ) + 16;
 8008774:	f003 fae2 	bl	800bd3c <rand>
 8008778:	0002      	movs	r2, r0
 800877a:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <_Z13SetRandomBaitv+0xa0>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	3b10      	subs	r3, #16
 8008780:	0019      	movs	r1, r3
 8008782:	0010      	movs	r0, r2
 8008784:	f7ff fe3a 	bl	80083fc <__aeabi_idivmod>
 8008788:	000b      	movs	r3, r1
 800878a:	b2db      	uxtb	r3, r3
 800878c:	3310      	adds	r3, #16
 800878e:	b2da      	uxtb	r2, r3
 8008790:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <_Z13SetRandomBaitv+0xa0>)
 8008792:	701a      	strb	r2, [r3, #0]
	LCD_setPixel(baitX, baitY, true);
 8008794:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <_Z13SetRandomBaitv+0x9c>)
 8008796:	7818      	ldrb	r0, [r3, #0]
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <_Z13SetRandomBaitv+0xa0>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2201      	movs	r2, #1
 800879e:	0019      	movs	r1, r3
 80087a0:	f000 fef2 	bl	8009588 <LCD_setPixel>


	LCD_refreshArea(baitX - 2, baitY - 2, baitX + 2, baitY + 2);
 80087a4:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <_Z13SetRandomBaitv+0x9c>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	3b02      	subs	r3, #2
 80087aa:	b2d8      	uxtb	r0, r3
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <_Z13SetRandomBaitv+0xa0>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	3b02      	subs	r3, #2
 80087b2:	b2d9      	uxtb	r1, r3
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <_Z13SetRandomBaitv+0x9c>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	3302      	adds	r3, #2
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <_Z13SetRandomBaitv+0xa0>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	3302      	adds	r3, #2
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f000 fe8a 	bl	80094dc <LCD_refreshArea>
}
 80087c8:	46c0      	nop			; (mov r8, r8)
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	20000228 	.word	0x20000228
 80087d4:	20000229 	.word	0x20000229

080087d8 <_Z11SetGameOverv>:

void SetGameOver()
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
	gameOver = true;
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <_Z11SetGameOverv+0x18>)
 80087de:	2201      	movs	r2, #1
 80087e0:	701a      	strb	r2, [r3, #0]
	LCD_clrBuffer();
 80087e2:	f000 fdf7 	bl	80093d4 <LCD_clrBuffer>
	LCD_clrScr();
 80087e6:	f000 fe0f 	bl	8009408 <LCD_clrScr>
}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	2000015c 	.word	0x2000015c

080087f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80087f4:	b590      	push	{r4, r7, lr}
 80087f6:	b091      	sub	sp, #68	; 0x44
 80087f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	tailSegment--;
 80087fa:	4bdb      	ldr	r3, [pc, #876]	; (8008b68 <main+0x374>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	3b01      	subs	r3, #1
 8008800:	b2da      	uxtb	r2, r3
 8008802:	4bd9      	ldr	r3, [pc, #868]	; (8008b68 <main+0x374>)
 8008804:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008806:	f001 f961 	bl	8009acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800880a:	f000 fa6d 	bl	8008ce8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800880e:	f000 fb5b 	bl	8008ec8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8008812:	f000 fb25 	bl	8008e60 <_ZL19MX_USART2_UART_Initv>
  MX_TIM6_Init();
 8008816:	f000 fadf 	bl	8008dd8 <_ZL12MX_TIM6_Initv>


  /* USER CODE BEGIN 2 */
#ifdef __cplusplus
  UPrint("Setting up game... \r\n");
 800881a:	4bd4      	ldr	r3, [pc, #848]	; (8008b6c <main+0x378>)
 800881c:	0018      	movs	r0, r3
 800881e:	f000 fbff 	bl	8009020 <_Z6UPrintPc>

  HAL_TIM_Base_Start(&htim6);
 8008822:	4bd3      	ldr	r3, [pc, #844]	; (8008b70 <main+0x37c>)
 8008824:	0018      	movs	r0, r3
 8008826:	f002 fbd9 	bl	800afdc <HAL_TIM_Base_Start>

  LCD_setRST(GPIOB, GPIO_PIN_13);
 800882a:	2380      	movs	r3, #128	; 0x80
 800882c:	019b      	lsls	r3, r3, #6
 800882e:	4ad1      	ldr	r2, [pc, #836]	; (8008b74 <main+0x380>)
 8008830:	0019      	movs	r1, r3
 8008832:	0010      	movs	r0, r2
 8008834:	f000 fc36 	bl	80090a4 <LCD_setRST>
  LCD_setCE(GPIOB, GPIO_PIN_14);
 8008838:	2380      	movs	r3, #128	; 0x80
 800883a:	01db      	lsls	r3, r3, #7
 800883c:	4acd      	ldr	r2, [pc, #820]	; (8008b74 <main+0x380>)
 800883e:	0019      	movs	r1, r3
 8008840:	0010      	movs	r0, r2
 8008842:	f000 fc43 	bl	80090cc <LCD_setCE>
  LCD_setDC(GPIOB, GPIO_PIN_15);
 8008846:	2380      	movs	r3, #128	; 0x80
 8008848:	021b      	lsls	r3, r3, #8
 800884a:	4aca      	ldr	r2, [pc, #808]	; (8008b74 <main+0x380>)
 800884c:	0019      	movs	r1, r3
 800884e:	0010      	movs	r0, r2
 8008850:	f000 fc50 	bl	80090f4 <LCD_setDC>
  LCD_setDIN(GPIOB, GPIO_PIN_1);
 8008854:	4bc7      	ldr	r3, [pc, #796]	; (8008b74 <main+0x380>)
 8008856:	2102      	movs	r1, #2
 8008858:	0018      	movs	r0, r3
 800885a:	f000 fc5f 	bl	800911c <LCD_setDIN>
  LCD_setCLK(GPIOB, GPIO_PIN_2);
 800885e:	4bc5      	ldr	r3, [pc, #788]	; (8008b74 <main+0x380>)
 8008860:	2104      	movs	r1, #4
 8008862:	0018      	movs	r0, r3
 8008864:	f000 fc6e 	bl	8009144 <LCD_setCLK>
  LCD_init();
 8008868:	f000 fd10 	bl	800928c <LCD_init>

  for(int i = 0; i < currentLength; i++)
 800886c:	2300      	movs	r3, #0
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008870:	4bc1      	ldr	r3, [pc, #772]	; (8008b78 <main+0x384>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	001a      	movs	r2, r3
 8008876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008878:	4293      	cmp	r3, r2
 800887a:	da1a      	bge.n	80088b2 <main+0xbe>
  {
	  segments[i] = true;
 800887c:	4abf      	ldr	r2, [pc, #764]	; (8008b7c <main+0x388>)
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	18d3      	adds	r3, r2, r3
 8008882:	2201      	movs	r2, #1
 8008884:	701a      	strb	r2, [r3, #0]

	  segmentPosesY[i] = 20;
 8008886:	4abe      	ldr	r2, [pc, #760]	; (8008b80 <main+0x38c>)
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	2214      	movs	r2, #20
 800888e:	701a      	strb	r2, [r3, #0]
	  segmentPosesX[i] = currentLength + 16 - i;
 8008890:	4bb9      	ldr	r3, [pc, #740]	; (8008b78 <main+0x384>)
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008896:	b2db      	uxtb	r3, r3
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	b2db      	uxtb	r3, r3
 800889c:	3310      	adds	r3, #16
 800889e:	b2d9      	uxtb	r1, r3
 80088a0:	4ab8      	ldr	r2, [pc, #736]	; (8008b84 <main+0x390>)
 80088a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a4:	18d3      	adds	r3, r2, r3
 80088a6:	1c0a      	adds	r2, r1, #0
 80088a8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < currentLength; i++)
 80088aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ac:	3301      	adds	r3, #1
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b0:	e7de      	b.n	8008870 <main+0x7c>

  }

  direction = 1;
 80088b2:	4bb5      	ldr	r3, [pc, #724]	; (8008b88 <main+0x394>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	701a      	strb	r2, [r3, #0]

  GamepadButton BUTTON_Left(GPIOA, GPIO_PIN_7);
 80088b8:	23a0      	movs	r3, #160	; 0xa0
 80088ba:	05d9      	lsls	r1, r3, #23
 80088bc:	232c      	movs	r3, #44	; 0x2c
 80088be:	18fb      	adds	r3, r7, r3
 80088c0:	2280      	movs	r2, #128	; 0x80
 80088c2:	0018      	movs	r0, r3
 80088c4:	f7ff fee4 	bl	8008690 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_Right(GPIOA, GPIO_PIN_6);
 80088c8:	23a0      	movs	r3, #160	; 0xa0
 80088ca:	05d9      	lsls	r1, r3, #23
 80088cc:	2324      	movs	r3, #36	; 0x24
 80088ce:	18fb      	adds	r3, r7, r3
 80088d0:	2240      	movs	r2, #64	; 0x40
 80088d2:	0018      	movs	r0, r3
 80088d4:	f7ff fedc 	bl	8008690 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  GamepadButton BUTTON_Up(GPIOA, GPIO_PIN_12);
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	23a0      	movs	r3, #160	; 0xa0
 80088de:	05d9      	lsls	r1, r3, #23
 80088e0:	231c      	movs	r3, #28
 80088e2:	18fb      	adds	r3, r7, r3
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7ff fed3 	bl	8008690 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_Down(GPIOA, GPIO_PIN_11);
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	011a      	lsls	r2, r3, #4
 80088ee:	23a0      	movs	r3, #160	; 0xa0
 80088f0:	05d9      	lsls	r1, r3, #23
 80088f2:	2314      	movs	r3, #20
 80088f4:	18fb      	adds	r3, r7, r3
 80088f6:	0018      	movs	r0, r3
 80088f8:	f7ff feca 	bl	8008690 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  GamepadButton BUTTON_A(GPIOC, GPIO_PIN_7);
 80088fc:	49a3      	ldr	r1, [pc, #652]	; (8008b8c <main+0x398>)
 80088fe:	230c      	movs	r3, #12
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	2280      	movs	r2, #128	; 0x80
 8008904:	0018      	movs	r0, r3
 8008906:	f7ff fec3 	bl	8008690 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_B(GPIOB, GPIO_PIN_6);
 800890a:	499a      	ldr	r1, [pc, #616]	; (8008b74 <main+0x380>)
 800890c:	1d3b      	adds	r3, r7, #4
 800890e:	2240      	movs	r2, #64	; 0x40
 8008910:	0018      	movs	r0, r3
 8008912:	f7ff febd 	bl	8008690 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  SetRandomBait();
 8008916:	f7ff ff0d 	bl	8008734 <_Z13SetRandomBaitv>

  LCD_drawRectangle(0, 10, 83, 47);
 800891a:	232f      	movs	r3, #47	; 0x2f
 800891c:	2253      	movs	r2, #83	; 0x53
 800891e:	210a      	movs	r1, #10
 8008920:	2000      	movs	r0, #0
 8008922:	f000 ff11 	bl	8009748 <LCD_drawRectangle>

  LCD_refreshScr();
 8008926:	f000 fdad 	bl	8009484 <LCD_refreshScr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		BUTTON_Left.UpdateButton();
 800892a:	232c      	movs	r3, #44	; 0x2c
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	0018      	movs	r0, r3
 8008930:	f7ff fed9 	bl	80086e6 <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_Right.UpdateButton();
 8008934:	2324      	movs	r3, #36	; 0x24
 8008936:	18fb      	adds	r3, r7, r3
 8008938:	0018      	movs	r0, r3
 800893a:	f7ff fed4 	bl	80086e6 <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_Up.UpdateButton();
 800893e:	241c      	movs	r4, #28
 8008940:	193b      	adds	r3, r7, r4
 8008942:	0018      	movs	r0, r3
 8008944:	f7ff fecf 	bl	80086e6 <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_Down.UpdateButton();
 8008948:	2314      	movs	r3, #20
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	0018      	movs	r0, r3
 800894e:	f7ff feca 	bl	80086e6 <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_A.UpdateButton();
 8008952:	230c      	movs	r3, #12
 8008954:	18fb      	adds	r3, r7, r3
 8008956:	0018      	movs	r0, r3
 8008958:	f7ff fec5 	bl	80086e6 <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_B.UpdateButton();
 800895c:	1d3b      	adds	r3, r7, #4
 800895e:	0018      	movs	r0, r3
 8008960:	f7ff fec1 	bl	80086e6 <_ZN13GamepadButton12UpdateButtonEv>

		if(!gameOver)
 8008964:	4b8a      	ldr	r3, [pc, #552]	; (8008b90 <main+0x39c>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2201      	movs	r2, #1
 800896a:	4053      	eors	r3, r2
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d100      	bne.n	8008974 <main+0x180>
 8008972:	e17c      	b.n	8008c6e <main+0x47a>
		{

			if(BUTTON_Up.IsPressing && direction != 2)
 8008974:	193b      	adds	r3, r7, r4
 8008976:	79db      	ldrb	r3, [r3, #7]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d007      	beq.n	800898c <main+0x198>
 800897c:	4b82      	ldr	r3, [pc, #520]	; (8008b88 <main+0x394>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d003      	beq.n	800898c <main+0x198>
			{
				direction = 0;
 8008984:	4b80      	ldr	r3, [pc, #512]	; (8008b88 <main+0x394>)
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	e025      	b.n	80089d8 <main+0x1e4>
			}
			else if(BUTTON_Right.IsPressing && direction != 3)
 800898c:	2324      	movs	r3, #36	; 0x24
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	79db      	ldrb	r3, [r3, #7]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <main+0x1b2>
 8008996:	4b7c      	ldr	r3, [pc, #496]	; (8008b88 <main+0x394>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b03      	cmp	r3, #3
 800899c:	d003      	beq.n	80089a6 <main+0x1b2>
			{
				direction = 1;
 800899e:	4b7a      	ldr	r3, [pc, #488]	; (8008b88 <main+0x394>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	e018      	b.n	80089d8 <main+0x1e4>
			}
			else if(BUTTON_Down.IsPressing && direction != 0)
 80089a6:	2314      	movs	r3, #20
 80089a8:	18fb      	adds	r3, r7, r3
 80089aa:	79db      	ldrb	r3, [r3, #7]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d007      	beq.n	80089c0 <main+0x1cc>
 80089b0:	4b75      	ldr	r3, [pc, #468]	; (8008b88 <main+0x394>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <main+0x1cc>
			{
				direction = 2;
 80089b8:	4b73      	ldr	r3, [pc, #460]	; (8008b88 <main+0x394>)
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	e00b      	b.n	80089d8 <main+0x1e4>
			}
			else if(BUTTON_Left.IsPressing && direction != 1)
 80089c0:	232c      	movs	r3, #44	; 0x2c
 80089c2:	18fb      	adds	r3, r7, r3
 80089c4:	79db      	ldrb	r3, [r3, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d006      	beq.n	80089d8 <main+0x1e4>
 80089ca:	4b6f      	ldr	r3, [pc, #444]	; (8008b88 <main+0x394>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d002      	beq.n	80089d8 <main+0x1e4>
			{
				direction = 3;
 80089d2:	4b6d      	ldr	r3, [pc, #436]	; (8008b88 <main+0x394>)
 80089d4:	2203      	movs	r2, #3
 80089d6:	701a      	strb	r2, [r3, #0]
			}

			LCD_setPixel(segmentPosesX[tailSegment], segmentPosesY[tailSegment], false);
 80089d8:	4b63      	ldr	r3, [pc, #396]	; (8008b68 <main+0x374>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	001a      	movs	r2, r3
 80089de:	4b69      	ldr	r3, [pc, #420]	; (8008b84 <main+0x390>)
 80089e0:	5c98      	ldrb	r0, [r3, r2]
 80089e2:	4b61      	ldr	r3, [pc, #388]	; (8008b68 <main+0x374>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	001a      	movs	r2, r3
 80089e8:	4b65      	ldr	r3, [pc, #404]	; (8008b80 <main+0x38c>)
 80089ea:	5c9b      	ldrb	r3, [r3, r2]
 80089ec:	2200      	movs	r2, #0
 80089ee:	0019      	movs	r1, r3
 80089f0:	f000 fdca 	bl	8009588 <LCD_setPixel>
			for(int i = 63; i > 0; i--)
 80089f4:	233f      	movs	r3, #63	; 0x3f
 80089f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd64      	ble.n	8008ac8 <main+0x2d4>
			{
				if(!segments[i]) continue;
 80089fe:	4a5f      	ldr	r2, [pc, #380]	; (8008b7c <main+0x388>)
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	18d3      	adds	r3, r2, r3
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2201      	movs	r2, #1
 8008a08:	4053      	eors	r3, r2
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d156      	bne.n	8008abe <main+0x2ca>

				segmentPosesX[i] = segmentPosesX[i - 1];
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	3b01      	subs	r3, #1
 8008a14:	4a5b      	ldr	r2, [pc, #364]	; (8008b84 <main+0x390>)
 8008a16:	5cd1      	ldrb	r1, [r2, r3]
 8008a18:	4a5a      	ldr	r2, [pc, #360]	; (8008b84 <main+0x390>)
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	18d3      	adds	r3, r2, r3
 8008a1e:	1c0a      	adds	r2, r1, #0
 8008a20:	701a      	strb	r2, [r3, #0]
				segmentPosesY[i] = segmentPosesY[i - 1];
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	3b01      	subs	r3, #1
 8008a26:	4a56      	ldr	r2, [pc, #344]	; (8008b80 <main+0x38c>)
 8008a28:	5cd1      	ldrb	r1, [r2, r3]
 8008a2a:	4a55      	ldr	r2, [pc, #340]	; (8008b80 <main+0x38c>)
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	18d3      	adds	r3, r2, r3
 8008a30:	1c0a      	adds	r2, r1, #0
 8008a32:	701a      	strb	r2, [r3, #0]

				if(segmentPosesX[i] > maxX) maxX = segmentPosesX[i];
 8008a34:	4a53      	ldr	r2, [pc, #332]	; (8008b84 <main+0x390>)
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	18d3      	adds	r3, r2, r3
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	4b55      	ldr	r3, [pc, #340]	; (8008b94 <main+0x3a0>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d905      	bls.n	8008a50 <main+0x25c>
 8008a44:	4a4f      	ldr	r2, [pc, #316]	; (8008b84 <main+0x390>)
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	18d3      	adds	r3, r2, r3
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	4b51      	ldr	r3, [pc, #324]	; (8008b94 <main+0x3a0>)
 8008a4e:	701a      	strb	r2, [r3, #0]
				if(segmentPosesY[i] > maxY) maxY = segmentPosesY[i];
 8008a50:	4a4b      	ldr	r2, [pc, #300]	; (8008b80 <main+0x38c>)
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	18d3      	adds	r3, r2, r3
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	4b4f      	ldr	r3, [pc, #316]	; (8008b98 <main+0x3a4>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d905      	bls.n	8008a6c <main+0x278>
 8008a60:	4a47      	ldr	r2, [pc, #284]	; (8008b80 <main+0x38c>)
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	18d3      	adds	r3, r2, r3
 8008a66:	781a      	ldrb	r2, [r3, #0]
 8008a68:	4b4b      	ldr	r3, [pc, #300]	; (8008b98 <main+0x3a4>)
 8008a6a:	701a      	strb	r2, [r3, #0]

				if(segmentPosesX[i] < minX) minX = segmentPosesX[i];
 8008a6c:	4a45      	ldr	r2, [pc, #276]	; (8008b84 <main+0x390>)
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	18d3      	adds	r3, r2, r3
 8008a72:	781a      	ldrb	r2, [r3, #0]
 8008a74:	4b49      	ldr	r3, [pc, #292]	; (8008b9c <main+0x3a8>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d205      	bcs.n	8008a88 <main+0x294>
 8008a7c:	4a41      	ldr	r2, [pc, #260]	; (8008b84 <main+0x390>)
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	18d3      	adds	r3, r2, r3
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	4b45      	ldr	r3, [pc, #276]	; (8008b9c <main+0x3a8>)
 8008a86:	701a      	strb	r2, [r3, #0]
				if(segmentPosesY[i] < minY) minY = segmentPosesY[i];
 8008a88:	4a3d      	ldr	r2, [pc, #244]	; (8008b80 <main+0x38c>)
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	18d3      	adds	r3, r2, r3
 8008a8e:	781a      	ldrb	r2, [r3, #0]
 8008a90:	4b43      	ldr	r3, [pc, #268]	; (8008ba0 <main+0x3ac>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d205      	bcs.n	8008aa4 <main+0x2b0>
 8008a98:	4a39      	ldr	r2, [pc, #228]	; (8008b80 <main+0x38c>)
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	18d3      	adds	r3, r2, r3
 8008a9e:	781a      	ldrb	r2, [r3, #0]
 8008aa0:	4b3f      	ldr	r3, [pc, #252]	; (8008ba0 <main+0x3ac>)
 8008aa2:	701a      	strb	r2, [r3, #0]

				LCD_setPixel(segmentPosesX[i], segmentPosesY[i], true);
 8008aa4:	4a37      	ldr	r2, [pc, #220]	; (8008b84 <main+0x390>)
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	18d3      	adds	r3, r2, r3
 8008aaa:	7818      	ldrb	r0, [r3, #0]
 8008aac:	4a34      	ldr	r2, [pc, #208]	; (8008b80 <main+0x38c>)
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	18d3      	adds	r3, r2, r3
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	0019      	movs	r1, r3
 8008ab8:	f000 fd66 	bl	8009588 <LCD_setPixel>
 8008abc:	e000      	b.n	8008ac0 <main+0x2cc>
				if(!segments[i]) continue;
 8008abe:	46c0      	nop			; (mov r8, r8)
			for(int i = 63; i > 0; i--)
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ac6:	e797      	b.n	80089f8 <main+0x204>
			}

			switch (direction)
 8008ac8:	4b2f      	ldr	r3, [pc, #188]	; (8008b88 <main+0x394>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d01d      	beq.n	8008b0c <main+0x318>
 8008ad0:	dc23      	bgt.n	8008b1a <main+0x326>
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d013      	beq.n	8008afe <main+0x30a>
 8008ad6:	dc20      	bgt.n	8008b1a <main+0x326>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <main+0x2ee>
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d007      	beq.n	8008af0 <main+0x2fc>
 8008ae0:	e01b      	b.n	8008b1a <main+0x326>
			{
				case 0:
					segmentPosesY[0]--;
 8008ae2:	4b27      	ldr	r3, [pc, #156]	; (8008b80 <main+0x38c>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b25      	ldr	r3, [pc, #148]	; (8008b80 <main+0x38c>)
 8008aec:	701a      	strb	r2, [r3, #0]
					break;
 8008aee:	e014      	b.n	8008b1a <main+0x326>
				case 1:
					segmentPosesX[0]++;
 8008af0:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <main+0x390>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	4b22      	ldr	r3, [pc, #136]	; (8008b84 <main+0x390>)
 8008afa:	701a      	strb	r2, [r3, #0]
					break;
 8008afc:	e00d      	b.n	8008b1a <main+0x326>
				case 2:
					segmentPosesY[0]++;
 8008afe:	4b20      	ldr	r3, [pc, #128]	; (8008b80 <main+0x38c>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	3301      	adds	r3, #1
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <main+0x38c>)
 8008b08:	701a      	strb	r2, [r3, #0]
					break;
 8008b0a:	e006      	b.n	8008b1a <main+0x326>
				case 3:
					segmentPosesX[0]--;
 8008b0c:	4b1d      	ldr	r3, [pc, #116]	; (8008b84 <main+0x390>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	4b1b      	ldr	r3, [pc, #108]	; (8008b84 <main+0x390>)
 8008b16:	701a      	strb	r2, [r3, #0]
					break;
 8008b18:	46c0      	nop			; (mov r8, r8)
			}

			LCD_setPixel(segmentPosesX[0], segmentPosesY[0], true);
 8008b1a:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <main+0x390>)
 8008b1c:	7818      	ldrb	r0, [r3, #0]
 8008b1e:	4b18      	ldr	r3, [pc, #96]	; (8008b80 <main+0x38c>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2201      	movs	r2, #1
 8008b24:	0019      	movs	r1, r3
 8008b26:	f000 fd2f 	bl	8009588 <LCD_setPixel>

			for(int i = 1; i < tailSegment + 1; i++)
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b2e:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <main+0x374>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	001a      	movs	r2, r3
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	4293      	cmp	r3, r2
 8008b38:	dc34      	bgt.n	8008ba4 <main+0x3b0>
			{
				if(segmentPosesX[0] == segmentPosesX[i] && segmentPosesY[0] == segmentPosesY[i])
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <main+0x390>)
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	4911      	ldr	r1, [pc, #68]	; (8008b84 <main+0x390>)
 8008b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b42:	18cb      	adds	r3, r1, r3
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d10a      	bne.n	8008b60 <main+0x36c>
 8008b4a:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <main+0x38c>)
 8008b4c:	781a      	ldrb	r2, [r3, #0]
 8008b4e:	490c      	ldr	r1, [pc, #48]	; (8008b80 <main+0x38c>)
 8008b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b52:	18cb      	adds	r3, r1, r3
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d102      	bne.n	8008b60 <main+0x36c>
				{
					SetGameOver();
 8008b5a:	f7ff fe3d 	bl	80087d8 <_Z11SetGameOverv>
					break;
 8008b5e:	e021      	b.n	8008ba4 <main+0x3b0>
			for(int i = 1; i < tailSegment + 1; i++)
 8008b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b62:	3301      	adds	r3, #1
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
 8008b66:	e7e2      	b.n	8008b2e <main+0x33a>
 8008b68:	20000002 	.word	0x20000002
 8008b6c:	0800cee0 	.word	0x0800cee0
 8008b70:	20000098 	.word	0x20000098
 8008b74:	50000400 	.word	0x50000400
 8008b78:	20000000 	.word	0x20000000
 8008b7c:	200001e8 	.word	0x200001e8
 8008b80:	200001a8 	.word	0x200001a8
 8008b84:	20000168 	.word	0x20000168
 8008b88:	20000001 	.word	0x20000001
 8008b8c:	50000800 	.word	0x50000800
 8008b90:	2000015c 	.word	0x2000015c
 8008b94:	2000022a 	.word	0x2000022a
 8008b98:	2000022b 	.word	0x2000022b
 8008b9c:	20000003 	.word	0x20000003
 8008ba0:	20000004 	.word	0x20000004
				}
			}

			if(segmentPosesX[0] == baitX && segmentPosesY[0] == baitY)
 8008ba4:	4b41      	ldr	r3, [pc, #260]	; (8008cac <main+0x4b8>)
 8008ba6:	781a      	ldrb	r2, [r3, #0]
 8008ba8:	4b41      	ldr	r3, [pc, #260]	; (8008cb0 <main+0x4bc>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d124      	bne.n	8008bfa <main+0x406>
 8008bb0:	4b40      	ldr	r3, [pc, #256]	; (8008cb4 <main+0x4c0>)
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	4b40      	ldr	r3, [pc, #256]	; (8008cb8 <main+0x4c4>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d11e      	bne.n	8008bfa <main+0x406>
			{
				SetRandomBait();
 8008bbc:	f7ff fdba 	bl	8008734 <_Z13SetRandomBaitv>
				currentLength++;
 8008bc0:	4b3e      	ldr	r3, [pc, #248]	; (8008cbc <main+0x4c8>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	4b3c      	ldr	r3, [pc, #240]	; (8008cbc <main+0x4c8>)
 8008bca:	701a      	strb	r2, [r3, #0]
				tailSegment++;
 8008bcc:	4b3c      	ldr	r3, [pc, #240]	; (8008cc0 <main+0x4cc>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	4b3a      	ldr	r3, [pc, #232]	; (8008cc0 <main+0x4cc>)
 8008bd6:	701a      	strb	r2, [r3, #0]

				score++;
 8008bd8:	4b3a      	ldr	r3, [pc, #232]	; (8008cc4 <main+0x4d0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	4b39      	ldr	r3, [pc, #228]	; (8008cc4 <main+0x4d0>)
 8008be0:	601a      	str	r2, [r3, #0]
				segments[tailSegment] = true;
 8008be2:	4b37      	ldr	r3, [pc, #220]	; (8008cc0 <main+0x4cc>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	001a      	movs	r2, r3
 8008be8:	4b37      	ldr	r3, [pc, #220]	; (8008cc8 <main+0x4d4>)
 8008bea:	2101      	movs	r1, #1
 8008bec:	5499      	strb	r1, [r3, r2]

				if(tailSegment == 63)
 8008bee:	4b34      	ldr	r3, [pc, #208]	; (8008cc0 <main+0x4cc>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8008bf4:	d101      	bne.n	8008bfa <main+0x406>
				{
					ResetGame();
 8008bf6:	f000 fa3f 	bl	8009078 <_ZL9ResetGamev>
				}
			}

			if(segmentPosesX[0] == 0 || segmentPosesX[0] == 83 || segmentPosesY[0] == 10 || segmentPosesY[0] == 47) SetGameOver();
 8008bfa:	4b2c      	ldr	r3, [pc, #176]	; (8008cac <main+0x4b8>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <main+0x426>
 8008c02:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <main+0x4b8>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b53      	cmp	r3, #83	; 0x53
 8008c08:	d007      	beq.n	8008c1a <main+0x426>
 8008c0a:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <main+0x4c0>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b0a      	cmp	r3, #10
 8008c10:	d003      	beq.n	8008c1a <main+0x426>
 8008c12:	4b28      	ldr	r3, [pc, #160]	; (8008cb4 <main+0x4c0>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b2f      	cmp	r3, #47	; 0x2f
 8008c18:	d101      	bne.n	8008c1e <main+0x42a>
 8008c1a:	f7ff fddd 	bl	80087d8 <_Z11SetGameOverv>

			LCD_setPixel(baitX, baitY, true);
 8008c1e:	4b24      	ldr	r3, [pc, #144]	; (8008cb0 <main+0x4bc>)
 8008c20:	7818      	ldrb	r0, [r3, #0]
 8008c22:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <main+0x4c4>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2201      	movs	r2, #1
 8008c28:	0019      	movs	r1, r3
 8008c2a:	f000 fcad 	bl	8009588 <LCD_setPixel>

			LCD_refreshArea(minX - 2, minY - 2, maxX + 2, maxY + 2);
 8008c2e:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <main+0x4d8>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	3b02      	subs	r3, #2
 8008c34:	b2d8      	uxtb	r0, r3
 8008c36:	4b26      	ldr	r3, [pc, #152]	; (8008cd0 <main+0x4dc>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	3b02      	subs	r3, #2
 8008c3c:	b2d9      	uxtb	r1, r3
 8008c3e:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <main+0x4e0>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	3302      	adds	r3, #2
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	4b24      	ldr	r3, [pc, #144]	; (8008cd8 <main+0x4e4>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f000 fc45 	bl	80094dc <LCD_refreshArea>

			itoa((int) score, scoreText, 10);
 8008c52:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <main+0x4d0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4921      	ldr	r1, [pc, #132]	; (8008cdc <main+0x4e8>)
 8008c58:	220a      	movs	r2, #10
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	f003 f862 	bl	800bd24 <itoa>
			LCD_print(scoreText, 0, 0);
 8008c60:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <main+0x4e8>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	0018      	movs	r0, r3
 8008c68:	f000 fb8e 	bl	8009388 <LCD_print>
 8008c6c:	e00c      	b.n	8008c88 <main+0x494>
		}
		else
		{
			LCD_print("GameOver...", 0, 0);
 8008c6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ce0 <main+0x4ec>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	2100      	movs	r1, #0
 8008c74:	0018      	movs	r0, r3
 8008c76:	f000 fb87 	bl	8009388 <LCD_print>

			if(BUTTON_A.IsPressing)
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	18fb      	adds	r3, r7, r3
 8008c7e:	79db      	ldrb	r3, [r3, #7]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <main+0x494>
			{
				ResetGame();
 8008c84:	f000 f9f8 	bl	8009078 <_ZL9ResetGamev>
			}
		}
	while(4000 > __HAL_TIM_GET_COUNTER(&htim6)); //wait for 25fps
 8008c88:	4b16      	ldr	r3, [pc, #88]	; (8008ce4 <main+0x4f0>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c8e:	23fa      	movs	r3, #250	; 0xfa
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	429a      	cmp	r2, r3
 8008c94:	419b      	sbcs	r3, r3
 8008c96:	425b      	negs	r3, r3
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d000      	beq.n	8008ca0 <main+0x4ac>
 8008c9e:	e7f3      	b.n	8008c88 <main+0x494>

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8008ca0:	4b10      	ldr	r3, [pc, #64]	; (8008ce4 <main+0x4f0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	625a      	str	r2, [r3, #36]	; 0x24



    /* USER CODE BEGIN 3 */

	}
 8008ca8:	e63f      	b.n	800892a <main+0x136>
 8008caa:	46c0      	nop			; (mov r8, r8)
 8008cac:	20000168 	.word	0x20000168
 8008cb0:	20000228 	.word	0x20000228
 8008cb4:	200001a8 	.word	0x200001a8
 8008cb8:	20000229 	.word	0x20000229
 8008cbc:	20000000 	.word	0x20000000
 8008cc0:	20000002 	.word	0x20000002
 8008cc4:	20000008 	.word	0x20000008
 8008cc8:	200001e8 	.word	0x200001e8
 8008ccc:	20000003 	.word	0x20000003
 8008cd0:	20000004 	.word	0x20000004
 8008cd4:	2000022a 	.word	0x2000022a
 8008cd8:	2000022b 	.word	0x2000022b
 8008cdc:	20000160 	.word	0x20000160
 8008ce0:	0800cef8 	.word	0x0800cef8
 8008ce4:	20000098 	.word	0x20000098

08008ce8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ce8:	b590      	push	{r4, r7, lr}
 8008cea:	b09f      	sub	sp, #124	; 0x7c
 8008cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cee:	2440      	movs	r4, #64	; 0x40
 8008cf0:	193b      	adds	r3, r7, r4
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	2338      	movs	r3, #56	; 0x38
 8008cf6:	001a      	movs	r2, r3
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f003 f817 	bl	800bd2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cfe:	232c      	movs	r3, #44	; 0x2c
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	0018      	movs	r0, r3
 8008d04:	2314      	movs	r3, #20
 8008d06:	001a      	movs	r2, r3
 8008d08:	2100      	movs	r1, #0
 8008d0a:	f003 f80f 	bl	800bd2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d0e:	1d3b      	adds	r3, r7, #4
 8008d10:	0018      	movs	r0, r3
 8008d12:	2328      	movs	r3, #40	; 0x28
 8008d14:	001a      	movs	r2, r3
 8008d16:	2100      	movs	r1, #0
 8008d18:	f003 f808 	bl	800bd2c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d1c:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <_Z18SystemClock_Configv+0xe8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a2c      	ldr	r2, [pc, #176]	; (8008dd4 <_Z18SystemClock_Configv+0xec>)
 8008d22:	401a      	ands	r2, r3
 8008d24:	4b2a      	ldr	r3, [pc, #168]	; (8008dd0 <_Z18SystemClock_Configv+0xe8>)
 8008d26:	2180      	movs	r1, #128	; 0x80
 8008d28:	0109      	lsls	r1, r1, #4
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008d2e:	0021      	movs	r1, r4
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	2210      	movs	r2, #16
 8008d34:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008d36:	187b      	adds	r3, r7, r1
 8008d38:	2201      	movs	r2, #1
 8008d3a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008d3c:	187b      	adds	r3, r7, r1
 8008d3e:	2200      	movs	r2, #0
 8008d40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8008d42:	187b      	adds	r3, r7, r1
 8008d44:	22a0      	movs	r2, #160	; 0xa0
 8008d46:	0212      	lsls	r2, r2, #8
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008d4a:	187b      	adds	r3, r7, r1
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d50:	187b      	adds	r3, r7, r1
 8008d52:	0018      	movs	r0, r3
 8008d54:	f001 f996 	bl	800a084 <HAL_RCC_OscConfig>
 8008d58:	0003      	movs	r3, r0
 8008d5a:	1e5a      	subs	r2, r3, #1
 8008d5c:	4193      	sbcs	r3, r2
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8008d64:	f000 f998 	bl	8009098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d68:	212c      	movs	r1, #44	; 0x2c
 8008d6a:	187b      	adds	r3, r7, r1
 8008d6c:	220f      	movs	r2, #15
 8008d6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8008d70:	187b      	adds	r3, r7, r1
 8008d72:	2200      	movs	r2, #0
 8008d74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d76:	187b      	adds	r3, r7, r1
 8008d78:	2200      	movs	r2, #0
 8008d7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008d7c:	187b      	adds	r3, r7, r1
 8008d7e:	2200      	movs	r2, #0
 8008d80:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d82:	187b      	adds	r3, r7, r1
 8008d84:	2200      	movs	r2, #0
 8008d86:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008d88:	187b      	adds	r3, r7, r1
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f001 fd4d 	bl	800a82c <HAL_RCC_ClockConfig>
 8008d92:	0003      	movs	r3, r0
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	4193      	sbcs	r3, r2
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8008d9e:	f000 f97b 	bl	8009098 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008da2:	1d3b      	adds	r3, r7, #4
 8008da4:	2202      	movs	r2, #2
 8008da6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008da8:	1d3b      	adds	r3, r7, #4
 8008daa:	2200      	movs	r2, #0
 8008dac:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	0018      	movs	r0, r3
 8008db2:	f001 ff5f 	bl	800ac74 <HAL_RCCEx_PeriphCLKConfig>
 8008db6:	0003      	movs	r3, r0
 8008db8:	1e5a      	subs	r2, r3, #1
 8008dba:	4193      	sbcs	r3, r2
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8008dc2:	f000 f969 	bl	8009098 <Error_Handler>
  }
}
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	b01f      	add	sp, #124	; 0x7c
 8008dcc:	bd90      	pop	{r4, r7, pc}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	40007000 	.word	0x40007000
 8008dd4:	ffffe7ff 	.word	0xffffe7ff

08008dd8 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008dde:	003b      	movs	r3, r7
 8008de0:	0018      	movs	r0, r3
 8008de2:	2308      	movs	r3, #8
 8008de4:	001a      	movs	r2, r3
 8008de6:	2100      	movs	r1, #0
 8008de8:	f002 ffa0 	bl	800bd2c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008dec:	4b19      	ldr	r3, [pc, #100]	; (8008e54 <_ZL12MX_TIM6_Initv+0x7c>)
 8008dee:	4a1a      	ldr	r2, [pc, #104]	; (8008e58 <_ZL12MX_TIM6_Initv+0x80>)
 8008df0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80 - 1;
 8008df2:	4b18      	ldr	r3, [pc, #96]	; (8008e54 <_ZL12MX_TIM6_Initv+0x7c>)
 8008df4:	224f      	movs	r2, #79	; 0x4f
 8008df6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008df8:	4b16      	ldr	r3, [pc, #88]	; (8008e54 <_ZL12MX_TIM6_Initv+0x7c>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8008dfe:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <_ZL12MX_TIM6_Initv+0x7c>)
 8008e00:	4a16      	ldr	r2, [pc, #88]	; (8008e5c <_ZL12MX_TIM6_Initv+0x84>)
 8008e02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e04:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <_ZL12MX_TIM6_Initv+0x7c>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <_ZL12MX_TIM6_Initv+0x7c>)
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f002 f8a5 	bl	800af5c <HAL_TIM_Base_Init>
 8008e12:	0003      	movs	r3, r0
 8008e14:	1e5a      	subs	r2, r3, #1
 8008e16:	4193      	sbcs	r3, r2
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8008e1e:	f000 f93b 	bl	8009098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e22:	003b      	movs	r3, r7
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e28:	003b      	movs	r3, r7
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008e2e:	003a      	movs	r2, r7
 8008e30:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <_ZL12MX_TIM6_Initv+0x7c>)
 8008e32:	0011      	movs	r1, r2
 8008e34:	0018      	movs	r0, r3
 8008e36:	f002 f979 	bl	800b12c <HAL_TIMEx_MasterConfigSynchronization>
 8008e3a:	0003      	movs	r3, r0
 8008e3c:	1e5a      	subs	r2, r3, #1
 8008e3e:	4193      	sbcs	r3, r2
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <_ZL12MX_TIM6_Initv+0x72>
  {
    Error_Handler();
 8008e46:	f000 f927 	bl	8009098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b002      	add	sp, #8
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	46c0      	nop			; (mov r8, r8)
 8008e54:	20000098 	.word	0x20000098
 8008e58:	40001000 	.word	0x40001000
 8008e5c:	0000ffff 	.word	0x0000ffff

08008e60 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008e64:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e66:	4a17      	ldr	r2, [pc, #92]	; (8008ec4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8008e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008e6a:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e6c:	22e1      	movs	r2, #225	; 0xe1
 8008e6e:	0252      	lsls	r2, r2, #9
 8008e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008e72:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e86:	220c      	movs	r2, #12
 8008e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e96:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e9c:	4b08      	ldr	r3, [pc, #32]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008ea2:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f002 f99f 	bl	800b1e8 <HAL_UART_Init>
 8008eaa:	0003      	movs	r3, r0
 8008eac:	1e5a      	subs	r2, r3, #1
 8008eae:	4193      	sbcs	r3, r2
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8008eb6:	f000 f8ef 	bl	8009098 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	200000d8 	.word	0x200000d8
 8008ec4:	40004400 	.word	0x40004400

08008ec8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ec8:	b590      	push	{r4, r7, lr}
 8008eca:	b08b      	sub	sp, #44	; 0x2c
 8008ecc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ece:	2414      	movs	r4, #20
 8008ed0:	193b      	adds	r3, r7, r4
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	2314      	movs	r3, #20
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	2100      	movs	r1, #0
 8008eda:	f002 ff27 	bl	800bd2c <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ede:	4b4c      	ldr	r3, [pc, #304]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee2:	4b4b      	ldr	r3, [pc, #300]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008ee4:	2104      	movs	r1, #4
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	62da      	str	r2, [r3, #44]	; 0x2c
 8008eea:	4b49      	ldr	r3, [pc, #292]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	2204      	movs	r2, #4
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ef6:	4b46      	ldr	r3, [pc, #280]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efa:	4b45      	ldr	r3, [pc, #276]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008efc:	2180      	movs	r1, #128	; 0x80
 8008efe:	430a      	orrs	r2, r1
 8008f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f02:	4b43      	ldr	r3, [pc, #268]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f06:	2280      	movs	r2, #128	; 0x80
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f0e:	4b40      	ldr	r3, [pc, #256]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	4b3f      	ldr	r3, [pc, #252]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008f14:	2101      	movs	r1, #1
 8008f16:	430a      	orrs	r2, r1
 8008f18:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f1a:	4b3d      	ldr	r3, [pc, #244]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4013      	ands	r3, r2
 8008f22:	60bb      	str	r3, [r7, #8]
 8008f24:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f26:	4b3a      	ldr	r3, [pc, #232]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2a:	4b39      	ldr	r3, [pc, #228]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008f2c:	2102      	movs	r1, #2
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f32:	4b37      	ldr	r3, [pc, #220]	; (8009010 <_ZL12MX_GPIO_Initv+0x148>)
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	2202      	movs	r2, #2
 8008f38:	4013      	ands	r3, r2
 8008f3a:	607b      	str	r3, [r7, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008f3e:	23a0      	movs	r3, #160	; 0xa0
 8008f40:	05db      	lsls	r3, r3, #23
 8008f42:	2200      	movs	r2, #0
 8008f44:	2120      	movs	r1, #32
 8008f46:	0018      	movs	r0, r3
 8008f48:	f001 f87f 	bl	800a04a <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8008f4c:	4931      	ldr	r1, [pc, #196]	; (8009014 <_ZL12MX_GPIO_Initv+0x14c>)
 8008f4e:	4b32      	ldr	r3, [pc, #200]	; (8009018 <_ZL12MX_GPIO_Initv+0x150>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	0018      	movs	r0, r3
 8008f54:	f001 f879 	bl	800a04a <HAL_GPIO_WritePin>
	                          |GPIO_PIN_15, GPIO_PIN_RESET);

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8008f58:	193b      	adds	r3, r7, r4
 8008f5a:	2280      	movs	r2, #128	; 0x80
 8008f5c:	0192      	lsls	r2, r2, #6
 8008f5e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008f60:	193b      	adds	r3, r7, r4
 8008f62:	2284      	movs	r2, #132	; 0x84
 8008f64:	0392      	lsls	r2, r2, #14
 8008f66:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f68:	193b      	adds	r3, r7, r4
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008f6e:	193b      	adds	r3, r7, r4
 8008f70:	4a2a      	ldr	r2, [pc, #168]	; (800901c <_ZL12MX_GPIO_Initv+0x154>)
 8008f72:	0019      	movs	r1, r3
 8008f74:	0010      	movs	r0, r2
 8008f76:	f000 fecd 	bl	8009d14 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PC1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008f7a:	193b      	adds	r3, r7, r4
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f80:	193b      	adds	r3, r7, r4
 8008f82:	2200      	movs	r2, #0
 8008f84:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f86:	193b      	adds	r3, r7, r4
 8008f88:	2201      	movs	r2, #1
 8008f8a:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f8c:	193b      	adds	r3, r7, r4
 8008f8e:	4a23      	ldr	r2, [pc, #140]	; (800901c <_ZL12MX_GPIO_Initv+0x154>)
 8008f90:	0019      	movs	r1, r3
 8008f92:	0010      	movs	r0, r2
 8008f94:	f000 febe 	bl	8009d14 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 8008f98:	193b      	adds	r3, r7, r4
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f9e:	193b      	adds	r3, r7, r4
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa4:	193b      	adds	r3, r7, r4
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008faa:	193b      	adds	r3, r7, r4
 8008fac:	2200      	movs	r2, #0
 8008fae:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008fb0:	193a      	adds	r2, r7, r4
 8008fb2:	23a0      	movs	r3, #160	; 0xa0
 8008fb4:	05db      	lsls	r3, r3, #23
 8008fb6:	0011      	movs	r1, r2
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f000 feab 	bl	8009d14 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB1 PB2 PB13 PB14
	                           PB15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8008fbe:	193b      	adds	r3, r7, r4
 8008fc0:	4a14      	ldr	r2, [pc, #80]	; (8009014 <_ZL12MX_GPIO_Initv+0x14c>)
 8008fc2:	601a      	str	r2, [r3, #0]
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fc4:	193b      	adds	r3, r7, r4
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fca:	193b      	adds	r3, r7, r4
 8008fcc:	2200      	movs	r2, #0
 8008fce:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fd0:	193b      	adds	r3, r7, r4
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fd6:	193b      	adds	r3, r7, r4
 8008fd8:	4a0f      	ldr	r2, [pc, #60]	; (8009018 <_ZL12MX_GPIO_Initv+0x150>)
 8008fda:	0019      	movs	r1, r3
 8008fdc:	0010      	movs	r0, r2
 8008fde:	f000 fe99 	bl	8009d14 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA8 PA9 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8008fe2:	0021      	movs	r1, r4
 8008fe4:	187b      	adds	r3, r7, r1
 8008fe6:	2283      	movs	r2, #131	; 0x83
 8008fe8:	0212      	lsls	r2, r2, #8
 8008fea:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fec:	187b      	adds	r3, r7, r1
 8008fee:	2200      	movs	r2, #0
 8008ff0:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff2:	187b      	adds	r3, r7, r1
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ff8:	187a      	adds	r2, r7, r1
 8008ffa:	23a0      	movs	r3, #160	; 0xa0
 8008ffc:	05db      	lsls	r3, r3, #23
 8008ffe:	0011      	movs	r1, r2
 8009000:	0018      	movs	r0, r3
 8009002:	f000 fe87 	bl	8009d14 <HAL_GPIO_Init>

}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	46bd      	mov	sp, r7
 800900a:	b00b      	add	sp, #44	; 0x2c
 800900c:	bd90      	pop	{r4, r7, pc}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	40021000 	.word	0x40021000
 8009014:	0000e006 	.word	0x0000e006
 8009018:	50000400 	.word	0x50000400
 800901c:	50000800 	.word	0x50000800

08009020 <_Z6UPrintPc>:

/* USER CODE BEGIN 4 */
void UPrint(char _out[])
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) _out, length_of_string(_out),10);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	0018      	movs	r0, r3
 800902c:	f000 f80e 	bl	800904c <_Z16length_of_stringPc>
 8009030:	0003      	movs	r3, r0
 8009032:	b29a      	uxth	r2, r3
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4804      	ldr	r0, [pc, #16]	; (8009048 <_Z6UPrintPc+0x28>)
 8009038:	230a      	movs	r3, #10
 800903a:	f002 f929 	bl	800b290 <HAL_UART_Transmit>
}
 800903e:	46c0      	nop			; (mov r8, r8)
 8009040:	46bd      	mov	sp, r7
 8009042:	b002      	add	sp, #8
 8009044:	bd80      	pop	{r7, pc}
 8009046:	46c0      	nop			; (mov r8, r8)
 8009048:	200000d8 	.word	0x200000d8

0800904c <_Z16length_of_stringPc>:

int length_of_string(char* p) {
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
    int count = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]

    while (*p != '\0') {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <_Z16length_of_stringPc+0x22>
        count++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]
        p++;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3301      	adds	r3, #1
 800906a:	607b      	str	r3, [r7, #4]
    while (*p != '\0') {
 800906c:	e7f4      	b.n	8009058 <_Z16length_of_stringPc+0xc>
    }

    return count;
 800906e:	68fb      	ldr	r3, [r7, #12]
}
 8009070:	0018      	movs	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	b004      	add	sp, #16
 8009076:	bd80      	pop	{r7, pc}

08009078 <_ZL9ResetGamev>:

static void ResetGame ( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0

    uint32_t reset_handler_add = *((volatile uint32_t *)(0x08008000 + 4));
 800907e:	4b05      	ldr	r3, [pc, #20]	; (8009094 <_ZL9ResetGamev+0x1c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	607b      	str	r3, [r7, #4]
    void (*app_reset_handler)(void) = (void (*)(void))reset_handler_add;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	603b      	str	r3, [r7, #0]
    app_reset_handler();
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	4798      	blx	r3
}
 800908c:	46c0      	nop			; (mov r8, r8)
 800908e:	46bd      	mov	sp, r7
 8009090:	b002      	add	sp, #8
 8009092:	bd80      	pop	{r7, pc}
 8009094:	08008004 	.word	0x08008004

08009098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800909c:	b672      	cpsid	i
}
 800909e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80090a0:	e7fe      	b.n	80090a0 <Error_Handler+0x8>
	...

080090a4 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	000a      	movs	r2, r1
 80090ae:	1cbb      	adds	r3, r7, #2
 80090b0:	801a      	strh	r2, [r3, #0]
	lcd_gpio.RSTPORT = PORT;
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <LCD_setRST+0x24>)
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
	lcd_gpio.RSTPIN = PIN;
 80090b8:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <LCD_setRST+0x24>)
 80090ba:	1cba      	adds	r2, r7, #2
 80090bc:	8812      	ldrh	r2, [r2, #0]
 80090be:	809a      	strh	r2, [r3, #4]
}
 80090c0:	46c0      	nop			; (mov r8, r8)
 80090c2:	46bd      	mov	sp, r7
 80090c4:	b002      	add	sp, #8
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000428 	.word	0x20000428

080090cc <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	000a      	movs	r2, r1
 80090d6:	1cbb      	adds	r3, r7, #2
 80090d8:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CEPORT = PORT;
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <LCD_setCE+0x24>)
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	609a      	str	r2, [r3, #8]
	lcd_gpio.CEPIN = PIN;
 80090e0:	4b03      	ldr	r3, [pc, #12]	; (80090f0 <LCD_setCE+0x24>)
 80090e2:	1cba      	adds	r2, r7, #2
 80090e4:	8812      	ldrh	r2, [r2, #0]
 80090e6:	819a      	strh	r2, [r3, #12]
}
 80090e8:	46c0      	nop			; (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20000428 	.word	0x20000428

080090f4 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	000a      	movs	r2, r1
 80090fe:	1cbb      	adds	r3, r7, #2
 8009100:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DCPORT = PORT;
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <LCD_setDC+0x24>)
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	611a      	str	r2, [r3, #16]
	lcd_gpio.DCPIN = PIN;
 8009108:	4b03      	ldr	r3, [pc, #12]	; (8009118 <LCD_setDC+0x24>)
 800910a:	1cba      	adds	r2, r7, #2
 800910c:	8812      	ldrh	r2, [r2, #0]
 800910e:	829a      	strh	r2, [r3, #20]
}
 8009110:	46c0      	nop			; (mov r8, r8)
 8009112:	46bd      	mov	sp, r7
 8009114:	b002      	add	sp, #8
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000428 	.word	0x20000428

0800911c <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	000a      	movs	r2, r1
 8009126:	1cbb      	adds	r3, r7, #2
 8009128:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DINPORT = PORT;
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <LCD_setDIN+0x24>)
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	619a      	str	r2, [r3, #24]
	lcd_gpio.DINPIN = PIN;
 8009130:	4b03      	ldr	r3, [pc, #12]	; (8009140 <LCD_setDIN+0x24>)
 8009132:	1cba      	adds	r2, r7, #2
 8009134:	8812      	ldrh	r2, [r2, #0]
 8009136:	839a      	strh	r2, [r3, #28]
}
 8009138:	46c0      	nop			; (mov r8, r8)
 800913a:	46bd      	mov	sp, r7
 800913c:	b002      	add	sp, #8
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000428 	.word	0x20000428

08009144 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	000a      	movs	r2, r1
 800914e:	1cbb      	adds	r3, r7, #2
 8009150:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CLKPORT = PORT;
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <LCD_setCLK+0x24>)
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	621a      	str	r2, [r3, #32]
	lcd_gpio.CLKPIN = PIN;
 8009158:	4b03      	ldr	r3, [pc, #12]	; (8009168 <LCD_setCLK+0x24>)
 800915a:	1cba      	adds	r2, r7, #2
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8009160:	46c0      	nop			; (mov r8, r8)
 8009162:	46bd      	mov	sp, r7
 8009164:	b002      	add	sp, #8
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000428 	.word	0x20000428

0800916c <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 800916c:	b5b0      	push	{r4, r5, r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	0002      	movs	r2, r0
 8009174:	1dfb      	adds	r3, r7, #7
 8009176:	701a      	strb	r2, [r3, #0]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8009178:	230f      	movs	r3, #15
 800917a:	18fb      	adds	r3, r7, r3
 800917c:	2200      	movs	r2, #0
 800917e:	701a      	strb	r2, [r3, #0]
 8009180:	e029      	b.n	80091d6 <LCD_send+0x6a>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8009182:	4b1a      	ldr	r3, [pc, #104]	; (80091ec <LCD_send+0x80>)
 8009184:	6998      	ldr	r0, [r3, #24]
 8009186:	4b19      	ldr	r3, [pc, #100]	; (80091ec <LCD_send+0x80>)
 8009188:	8b99      	ldrh	r1, [r3, #28]
 800918a:	1dfb      	adds	r3, r7, #7
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	250f      	movs	r5, #15
 8009190:	197b      	adds	r3, r7, r5
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2407      	movs	r4, #7
 8009196:	1ae3      	subs	r3, r4, r3
 8009198:	411a      	asrs	r2, r3
 800919a:	0013      	movs	r3, r2
 800919c:	2201      	movs	r2, #1
 800919e:	4013      	ands	r3, r2
 80091a0:	1e5a      	subs	r2, r3, #1
 80091a2:	4193      	sbcs	r3, r2
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	001a      	movs	r2, r3
 80091a8:	f000 ff4f 	bl	800a04a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <LCD_send+0x80>)
 80091ae:	6a18      	ldr	r0, [r3, #32]
 80091b0:	4b0e      	ldr	r3, [pc, #56]	; (80091ec <LCD_send+0x80>)
 80091b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091b4:	2201      	movs	r2, #1
 80091b6:	0019      	movs	r1, r3
 80091b8:	f000 ff47 	bl	800a04a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 80091bc:	4b0b      	ldr	r3, [pc, #44]	; (80091ec <LCD_send+0x80>)
 80091be:	6a18      	ldr	r0, [r3, #32]
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <LCD_send+0x80>)
 80091c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091c4:	2200      	movs	r2, #0
 80091c6:	0019      	movs	r1, r3
 80091c8:	f000 ff3f 	bl	800a04a <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 80091cc:	197b      	adds	r3, r7, r5
 80091ce:	781a      	ldrb	r2, [r3, #0]
 80091d0:	197b      	adds	r3, r7, r5
 80091d2:	3201      	adds	r2, #1
 80091d4:	701a      	strb	r2, [r3, #0]
 80091d6:	230f      	movs	r3, #15
 80091d8:	18fb      	adds	r3, r7, r3
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b07      	cmp	r3, #7
 80091de:	d9d0      	bls.n	8009182 <LCD_send+0x16>
  }
}
 80091e0:	46c0      	nop			; (mov r8, r8)
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	46bd      	mov	sp, r7
 80091e6:	b004      	add	sp, #16
 80091e8:	bdb0      	pop	{r4, r5, r7, pc}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	20000428 	.word	0x20000428

080091f0 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	0002      	movs	r2, r0
 80091f8:	1dfb      	adds	r3, r7, #7
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	1dbb      	adds	r3, r7, #6
 80091fe:	1c0a      	adds	r2, r1, #0
 8009200:	701a      	strb	r2, [r3, #0]
  if(mode == LCD_COMMAND){
 8009202:	1dbb      	adds	r3, r7, #6
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d11d      	bne.n	8009246 <LCD_write+0x56>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 800920a:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <LCD_write+0x98>)
 800920c:	6918      	ldr	r0, [r3, #16]
 800920e:	4b1e      	ldr	r3, [pc, #120]	; (8009288 <LCD_write+0x98>)
 8009210:	8a9b      	ldrh	r3, [r3, #20]
 8009212:	2200      	movs	r2, #0
 8009214:	0019      	movs	r1, r3
 8009216:	f000 ff18 	bl	800a04a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800921a:	4b1b      	ldr	r3, [pc, #108]	; (8009288 <LCD_write+0x98>)
 800921c:	6898      	ldr	r0, [r3, #8]
 800921e:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <LCD_write+0x98>)
 8009220:	899b      	ldrh	r3, [r3, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	0019      	movs	r1, r3
 8009226:	f000 ff10 	bl	800a04a <HAL_GPIO_WritePin>
    LCD_send(data);
 800922a:	1dfb      	adds	r3, r7, #7
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	0018      	movs	r0, r3
 8009230:	f7ff ff9c 	bl	800916c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <LCD_write+0x98>)
 8009236:	6898      	ldr	r0, [r3, #8]
 8009238:	4b13      	ldr	r3, [pc, #76]	; (8009288 <LCD_write+0x98>)
 800923a:	899b      	ldrh	r3, [r3, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	0019      	movs	r1, r3
 8009240:	f000 ff03 	bl	800a04a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8009244:	e01c      	b.n	8009280 <LCD_write+0x90>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8009246:	4b10      	ldr	r3, [pc, #64]	; (8009288 <LCD_write+0x98>)
 8009248:	6918      	ldr	r0, [r3, #16]
 800924a:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <LCD_write+0x98>)
 800924c:	8a9b      	ldrh	r3, [r3, #20]
 800924e:	2201      	movs	r2, #1
 8009250:	0019      	movs	r1, r3
 8009252:	f000 fefa 	bl	800a04a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <LCD_write+0x98>)
 8009258:	6898      	ldr	r0, [r3, #8]
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <LCD_write+0x98>)
 800925c:	899b      	ldrh	r3, [r3, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	0019      	movs	r1, r3
 8009262:	f000 fef2 	bl	800a04a <HAL_GPIO_WritePin>
    LCD_send(data);
 8009266:	1dfb      	adds	r3, r7, #7
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	0018      	movs	r0, r3
 800926c:	f7ff ff7e 	bl	800916c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <LCD_write+0x98>)
 8009272:	6898      	ldr	r0, [r3, #8]
 8009274:	4b04      	ldr	r3, [pc, #16]	; (8009288 <LCD_write+0x98>)
 8009276:	899b      	ldrh	r3, [r3, #12]
 8009278:	2201      	movs	r2, #1
 800927a:	0019      	movs	r1, r3
 800927c:	f000 fee5 	bl	800a04a <HAL_GPIO_WritePin>
}
 8009280:	46c0      	nop			; (mov r8, r8)
 8009282:	46bd      	mov	sp, r7
 8009284:	b002      	add	sp, #8
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000428 	.word	0x20000428

0800928c <LCD_init>:


/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8009290:	4b18      	ldr	r3, [pc, #96]	; (80092f4 <LCD_init+0x68>)
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	4b17      	ldr	r3, [pc, #92]	; (80092f4 <LCD_init+0x68>)
 8009296:	889b      	ldrh	r3, [r3, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	0019      	movs	r1, r3
 800929c:	f000 fed5 	bl	800a04a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 80092a0:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <LCD_init+0x68>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <LCD_init+0x68>)
 80092a6:	889b      	ldrh	r3, [r3, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	0019      	movs	r1, r3
 80092ac:	f000 fecd 	bl	800a04a <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 80092b0:	2100      	movs	r1, #0
 80092b2:	2021      	movs	r0, #33	; 0x21
 80092b4:	f7ff ff9c 	bl	80091f0 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 80092b8:	2100      	movs	r1, #0
 80092ba:	20b8      	movs	r0, #184	; 0xb8
 80092bc:	f7ff ff98 	bl	80091f0 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 80092c0:	2100      	movs	r1, #0
 80092c2:	2004      	movs	r0, #4
 80092c4:	f7ff ff94 	bl	80091f0 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80092c8:	2100      	movs	r1, #0
 80092ca:	2014      	movs	r0, #20
 80092cc:	f7ff ff90 	bl	80091f0 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80092d0:	2100      	movs	r1, #0
 80092d2:	2020      	movs	r0, #32
 80092d4:	f7ff ff8c 	bl	80091f0 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 80092d8:	2100      	movs	r1, #0
 80092da:	200c      	movs	r0, #12
 80092dc:	f7ff ff88 	bl	80091f0 <LCD_write>
  LCD_clrScr();
 80092e0:	f000 f892 	bl	8009408 <LCD_clrScr>
  lcd.inverttext = false;
 80092e4:	4a04      	ldr	r2, [pc, #16]	; (80092f8 <LCD_init+0x6c>)
 80092e6:	23fc      	movs	r3, #252	; 0xfc
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	2100      	movs	r1, #0
 80092ec:	54d1      	strb	r1, [r2, r3]
}
 80092ee:	46c0      	nop			; (mov r8, r8)
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20000428 	.word	0x20000428
 80092f8:	2000022c 	.word	0x2000022c

080092fc <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	0002      	movs	r2, r0
 8009304:	1dfb      	adds	r3, r7, #7
 8009306:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 8009308:	2300      	movs	r3, #0
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	e030      	b.n	8009370 <LCD_putChar+0x74>
    if(lcd.inverttext != true)
 800930e:	4a1c      	ldr	r2, [pc, #112]	; (8009380 <LCD_putChar+0x84>)
 8009310:	23fc      	movs	r3, #252	; 0xfc
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	5cd3      	ldrb	r3, [r2, r3]
 8009316:	2201      	movs	r2, #1
 8009318:	4053      	eors	r3, r2
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d011      	beq.n	8009344 <LCD_putChar+0x48>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8009320:	1dfb      	adds	r3, r7, #7
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	3b20      	subs	r3, #32
 8009326:	001a      	movs	r2, r3
 8009328:	4916      	ldr	r1, [pc, #88]	; (8009384 <LCD_putChar+0x88>)
 800932a:	0013      	movs	r3, r2
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	189b      	adds	r3, r3, r2
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	18ca      	adds	r2, r1, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	18d3      	adds	r3, r2, r3
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2101      	movs	r1, #1
 800933c:	0018      	movs	r0, r3
 800933e:	f7ff ff57 	bl	80091f0 <LCD_write>
 8009342:	e012      	b.n	800936a <LCD_putChar+0x6e>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8009344:	1dfb      	adds	r3, r7, #7
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	3b20      	subs	r3, #32
 800934a:	001a      	movs	r2, r3
 800934c:	490d      	ldr	r1, [pc, #52]	; (8009384 <LCD_putChar+0x88>)
 800934e:	0013      	movs	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	189b      	adds	r3, r3, r2
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	18ca      	adds	r2, r1, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	18d3      	adds	r3, r2, r3
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	43db      	mvns	r3, r3
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2101      	movs	r1, #1
 8009364:	0018      	movs	r0, r3
 8009366:	f7ff ff43 	bl	80091f0 <LCD_write>
  for(int i = 0; i < 6; i++){
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b05      	cmp	r3, #5
 8009374:	ddcb      	ble.n	800930e <LCD_putChar+0x12>
  }
}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	46c0      	nop			; (mov r8, r8)
 800937a:	46bd      	mov	sp, r7
 800937c:	b004      	add	sp, #16
 800937e:	bd80      	pop	{r7, pc}
 8009380:	2000022c 	.word	0x2000022c
 8009384:	0800cf04 	.word	0x0800cf04

08009388 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	0008      	movs	r0, r1
 8009392:	0011      	movs	r1, r2
 8009394:	1cfb      	adds	r3, r7, #3
 8009396:	1c02      	adds	r2, r0, #0
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	1cbb      	adds	r3, r7, #2
 800939c:	1c0a      	adds	r2, r1, #0
 800939e:	701a      	strb	r2, [r3, #0]
  LCD_goXY(x, y);
 80093a0:	1cbb      	adds	r3, r7, #2
 80093a2:	781a      	ldrb	r2, [r3, #0]
 80093a4:	1cfb      	adds	r3, r7, #3
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	0011      	movs	r1, r2
 80093aa:	0018      	movs	r0, r3
 80093ac:	f000 f84a 	bl	8009444 <LCD_goXY>
  while(*str){
 80093b0:	e006      	b.n	80093c0 <LCD_print+0x38>
    LCD_putChar(*str++);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	0018      	movs	r0, r3
 80093bc:	f7ff ff9e 	bl	80092fc <LCD_putChar>
  while(*str){
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f4      	bne.n	80093b2 <LCD_print+0x2a>
  }
}
 80093c8:	46c0      	nop			; (mov r8, r8)
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	46bd      	mov	sp, r7
 80093ce:	b002      	add	sp, #8
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <LCD_clrBuffer>:

void LCD_clrBuffer(){
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 504; i++){
 80093da:	2300      	movs	r3, #0
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	e007      	b.n	80093f0 <LCD_clrBuffer+0x1c>
		lcd.buffer[i] = 0;
 80093e0:	4a08      	ldr	r2, [pc, #32]	; (8009404 <LCD_clrBuffer+0x30>)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	18d3      	adds	r3, r2, r3
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 504; i++){
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3301      	adds	r3, #1
 80093ee:	607b      	str	r3, [r7, #4]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	23fc      	movs	r3, #252	; 0xfc
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	429a      	cmp	r2, r3
 80093f8:	dbf2      	blt.n	80093e0 <LCD_clrBuffer+0xc>
	}
}
 80093fa:	46c0      	nop			; (mov r8, r8)
 80093fc:	46c0      	nop			; (mov r8, r8)
 80093fe:	46bd      	mov	sp, r7
 8009400:	b002      	add	sp, #8
 8009402:	bd80      	pop	{r7, pc}
 8009404:	2000022c 	.word	0x2000022c

08009408 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 800940e:	2300      	movs	r3, #0
 8009410:	607b      	str	r3, [r7, #4]
 8009412:	e00b      	b.n	800942c <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8009414:	2101      	movs	r1, #1
 8009416:	2000      	movs	r0, #0
 8009418:	f7ff feea 	bl	80091f0 <LCD_write>
    lcd.buffer[i] = 0;
 800941c:	4a08      	ldr	r2, [pc, #32]	; (8009440 <LCD_clrScr+0x38>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	18d3      	adds	r3, r2, r3
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3301      	adds	r3, #1
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	23fc      	movs	r3, #252	; 0xfc
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	429a      	cmp	r2, r3
 8009434:	dbee      	blt.n	8009414 <LCD_clrScr+0xc>
  }
}
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	46c0      	nop			; (mov r8, r8)
 800943a:	46bd      	mov	sp, r7
 800943c:	b002      	add	sp, #8
 800943e:	bd80      	pop	{r7, pc}
 8009440:	2000022c 	.word	0x2000022c

08009444 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	0002      	movs	r2, r0
 800944c:	1dfb      	adds	r3, r7, #7
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	1dbb      	adds	r3, r7, #6
 8009452:	1c0a      	adds	r2, r1, #0
 8009454:	701a      	strb	r2, [r3, #0]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8009456:	1dfb      	adds	r3, r7, #7
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2280      	movs	r2, #128	; 0x80
 800945c:	4252      	negs	r2, r2
 800945e:	4313      	orrs	r3, r2
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2100      	movs	r1, #0
 8009464:	0018      	movs	r0, r3
 8009466:	f7ff fec3 	bl	80091f0 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 800946a:	1dbb      	adds	r3, r7, #6
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2240      	movs	r2, #64	; 0x40
 8009470:	4313      	orrs	r3, r2
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2100      	movs	r1, #0
 8009476:	0018      	movs	r0, r3
 8009478:	f7ff feba 	bl	80091f0 <LCD_write>
}
 800947c:	46c0      	nop			; (mov r8, r8)
 800947e:	46bd      	mov	sp, r7
 8009480:	b002      	add	sp, #8
 8009482:	bd80      	pop	{r7, pc}

08009484 <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr(){
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
  LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 800948a:	2140      	movs	r1, #64	; 0x40
 800948c:	2080      	movs	r0, #128	; 0x80
 800948e:	f7ff ffd9 	bl	8009444 <LCD_goXY>
  for(int i = 0; i < 6; i++){
 8009492:	2300      	movs	r3, #0
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	e016      	b.n	80094c6 <LCD_refreshScr+0x42>
    for(int j = 0; j < LCD_WIDTH; j++){
 8009498:	2300      	movs	r3, #0
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	e00d      	b.n	80094ba <LCD_refreshScr+0x36>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2254      	movs	r2, #84	; 0x54
 80094a2:	435a      	muls	r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	18d3      	adds	r3, r2, r3
 80094a8:	4a0b      	ldr	r2, [pc, #44]	; (80094d8 <LCD_refreshScr+0x54>)
 80094aa:	5cd3      	ldrb	r3, [r2, r3]
 80094ac:	2101      	movs	r1, #1
 80094ae:	0018      	movs	r0, r3
 80094b0:	f7ff fe9e 	bl	80091f0 <LCD_write>
    for(int j = 0; j < LCD_WIDTH; j++){
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	3301      	adds	r3, #1
 80094b8:	603b      	str	r3, [r7, #0]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b53      	cmp	r3, #83	; 0x53
 80094be:	ddee      	ble.n	800949e <LCD_refreshScr+0x1a>
  for(int i = 0; i < 6; i++){
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3301      	adds	r3, #1
 80094c4:	607b      	str	r3, [r7, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b05      	cmp	r3, #5
 80094ca:	dde5      	ble.n	8009498 <LCD_refreshScr+0x14>
    }
  }
}
 80094cc:	46c0      	nop			; (mov r8, r8)
 80094ce:	46c0      	nop			; (mov r8, r8)
 80094d0:	46bd      	mov	sp, r7
 80094d2:	b002      	add	sp, #8
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	46c0      	nop			; (mov r8, r8)
 80094d8:	2000022c 	.word	0x2000022c

080094dc <LCD_refreshArea>:
 * @param xmin: starting point on the x-axis
 * @param xmax: ending point on the x-axis
 * @param ymin: starting point on the y-axis
 * @param ymax: ending point on the y-axis
 */
void LCD_refreshArea(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax){
 80094dc:	b5b0      	push	{r4, r5, r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	0005      	movs	r5, r0
 80094e4:	000c      	movs	r4, r1
 80094e6:	0010      	movs	r0, r2
 80094e8:	0019      	movs	r1, r3
 80094ea:	1dfb      	adds	r3, r7, #7
 80094ec:	1c2a      	adds	r2, r5, #0
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	1dbb      	adds	r3, r7, #6
 80094f2:	1c22      	adds	r2, r4, #0
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	1d7b      	adds	r3, r7, #5
 80094f8:	1c02      	adds	r2, r0, #0
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	1d3b      	adds	r3, r7, #4
 80094fe:	1c0a      	adds	r2, r1, #0
 8009500:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	e033      	b.n	8009570 <LCD_refreshArea+0x94>
    if(i * 8 > ymax){
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	00da      	lsls	r2, r3, #3
 800950c:	1d3b      	adds	r3, r7, #4
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	dc31      	bgt.n	8009578 <LCD_refreshArea+0x9c>
      break;
    }
    //LCD_goXY(xmin, i);
    LCD_write(LCD_SETYADDR | i, LCD_COMMAND);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	b25b      	sxtb	r3, r3
 8009518:	2240      	movs	r2, #64	; 0x40
 800951a:	4313      	orrs	r3, r2
 800951c:	b25b      	sxtb	r3, r3
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2100      	movs	r1, #0
 8009522:	0018      	movs	r0, r3
 8009524:	f7ff fe64 	bl	80091f0 <LCD_write>
    LCD_write(LCD_SETXADDR | xmin, LCD_COMMAND);
 8009528:	1dfb      	adds	r3, r7, #7
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2280      	movs	r2, #128	; 0x80
 800952e:	4252      	negs	r2, r2
 8009530:	4313      	orrs	r3, r2
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2100      	movs	r1, #0
 8009536:	0018      	movs	r0, r3
 8009538:	f7ff fe5a 	bl	80091f0 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 800953c:	1dfb      	adds	r3, r7, #7
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	60bb      	str	r3, [r7, #8]
 8009542:	e00d      	b.n	8009560 <LCD_refreshArea+0x84>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2254      	movs	r2, #84	; 0x54
 8009548:	435a      	muls	r2, r3
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	18d3      	adds	r3, r2, r3
 800954e:	4a0d      	ldr	r2, [pc, #52]	; (8009584 <LCD_refreshArea+0xa8>)
 8009550:	5cd3      	ldrb	r3, [r2, r3]
 8009552:	2101      	movs	r1, #1
 8009554:	0018      	movs	r0, r3
 8009556:	f7ff fe4b 	bl	80091f0 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3301      	adds	r3, #1
 800955e:	60bb      	str	r3, [r7, #8]
 8009560:	1d7b      	adds	r3, r7, #5
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	429a      	cmp	r2, r3
 8009568:	ddec      	ble.n	8009544 <LCD_refreshArea+0x68>
  for(int i = 0; i < 6; i++){
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b05      	cmp	r3, #5
 8009574:	ddc8      	ble.n	8009508 <LCD_refreshArea+0x2c>
    }
  }
}
 8009576:	e000      	b.n	800957a <LCD_refreshArea+0x9e>
      break;
 8009578:	46c0      	nop			; (mov r8, r8)
}
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	46bd      	mov	sp, r7
 800957e:	b004      	add	sp, #16
 8009580:	bdb0      	pop	{r4, r5, r7, pc}
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	2000022c 	.word	0x2000022c

08009588 <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	0004      	movs	r4, r0
 8009590:	0008      	movs	r0, r1
 8009592:	0011      	movs	r1, r2
 8009594:	1dfb      	adds	r3, r7, #7
 8009596:	1c22      	adds	r2, r4, #0
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	1dbb      	adds	r3, r7, #6
 800959c:	1c02      	adds	r2, r0, #0
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	1d7b      	adds	r3, r7, #5
 80095a2:	1c0a      	adds	r2, r1, #0
 80095a4:	701a      	strb	r2, [r3, #0]
  if(x >= LCD_WIDTH)
 80095a6:	1dfb      	adds	r3, r7, #7
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b53      	cmp	r3, #83	; 0x53
 80095ac:	d902      	bls.n	80095b4 <LCD_setPixel+0x2c>
    x = LCD_WIDTH - 1;
 80095ae:	1dfb      	adds	r3, r7, #7
 80095b0:	2253      	movs	r2, #83	; 0x53
 80095b2:	701a      	strb	r2, [r3, #0]
  if(y >= LCD_HEIGHT)
 80095b4:	1dbb      	adds	r3, r7, #6
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b2f      	cmp	r3, #47	; 0x2f
 80095ba:	d902      	bls.n	80095c2 <LCD_setPixel+0x3a>
    y = LCD_HEIGHT - 1;
 80095bc:	1dbb      	adds	r3, r7, #6
 80095be:	222f      	movs	r2, #47	; 0x2f
 80095c0:	701a      	strb	r2, [r3, #0]
    
  if(pixel != false){
 80095c2:	1d7b      	adds	r3, r7, #5
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d01f      	beq.n	800960a <LCD_setPixel+0x82>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 80095ca:	1dfb      	adds	r3, r7, #7
 80095cc:	781a      	ldrb	r2, [r3, #0]
 80095ce:	1dbb      	adds	r3, r7, #6
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	08db      	lsrs	r3, r3, #3
 80095d4:	b2d8      	uxtb	r0, r3
 80095d6:	0001      	movs	r1, r0
 80095d8:	2354      	movs	r3, #84	; 0x54
 80095da:	434b      	muls	r3, r1
 80095dc:	18d3      	adds	r3, r2, r3
 80095de:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <LCD_setPixel+0xcc>)
 80095e0:	5cd3      	ldrb	r3, [r2, r3]
 80095e2:	b25a      	sxtb	r2, r3
 80095e4:	1dbb      	adds	r3, r7, #6
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2107      	movs	r1, #7
 80095ea:	400b      	ands	r3, r1
 80095ec:	2101      	movs	r1, #1
 80095ee:	4099      	lsls	r1, r3
 80095f0:	000b      	movs	r3, r1
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	4313      	orrs	r3, r2
 80095f6:	b259      	sxtb	r1, r3
 80095f8:	1dfb      	adds	r3, r7, #7
 80095fa:	781a      	ldrb	r2, [r3, #0]
 80095fc:	2354      	movs	r3, #84	; 0x54
 80095fe:	4343      	muls	r3, r0
 8009600:	18d3      	adds	r3, r2, r3
 8009602:	b2c9      	uxtb	r1, r1
 8009604:	4a13      	ldr	r2, [pc, #76]	; (8009654 <LCD_setPixel+0xcc>)
 8009606:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8009608:	e020      	b.n	800964c <LCD_setPixel+0xc4>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 800960a:	1dfb      	adds	r3, r7, #7
 800960c:	781a      	ldrb	r2, [r3, #0]
 800960e:	1dbb      	adds	r3, r7, #6
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	08db      	lsrs	r3, r3, #3
 8009614:	b2d8      	uxtb	r0, r3
 8009616:	0001      	movs	r1, r0
 8009618:	2354      	movs	r3, #84	; 0x54
 800961a:	434b      	muls	r3, r1
 800961c:	18d3      	adds	r3, r2, r3
 800961e:	4a0d      	ldr	r2, [pc, #52]	; (8009654 <LCD_setPixel+0xcc>)
 8009620:	5cd3      	ldrb	r3, [r2, r3]
 8009622:	b25b      	sxtb	r3, r3
 8009624:	1dba      	adds	r2, r7, #6
 8009626:	7812      	ldrb	r2, [r2, #0]
 8009628:	2107      	movs	r1, #7
 800962a:	400a      	ands	r2, r1
 800962c:	2101      	movs	r1, #1
 800962e:	4091      	lsls	r1, r2
 8009630:	000a      	movs	r2, r1
 8009632:	b252      	sxtb	r2, r2
 8009634:	43d2      	mvns	r2, r2
 8009636:	b252      	sxtb	r2, r2
 8009638:	4013      	ands	r3, r2
 800963a:	b259      	sxtb	r1, r3
 800963c:	1dfb      	adds	r3, r7, #7
 800963e:	781a      	ldrb	r2, [r3, #0]
 8009640:	2354      	movs	r3, #84	; 0x54
 8009642:	4343      	muls	r3, r0
 8009644:	18d3      	adds	r3, r2, r3
 8009646:	b2c9      	uxtb	r1, r1
 8009648:	4a02      	ldr	r2, [pc, #8]	; (8009654 <LCD_setPixel+0xcc>)
 800964a:	54d1      	strb	r1, [r2, r3]
}
 800964c:	46c0      	nop			; (mov r8, r8)
 800964e:	46bd      	mov	sp, r7
 8009650:	b003      	add	sp, #12
 8009652:	bd90      	pop	{r4, r7, pc}
 8009654:	2000022c 	.word	0x2000022c

08009658 <LCD_drawHLine>:
 * @brief Draws a horizontal line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void LCD_drawHLine(int x, int y, int l){
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
  int by, bi;

  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT)){
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	db3a      	blt.n	80096e0 <LCD_drawHLine+0x88>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b53      	cmp	r3, #83	; 0x53
 800966e:	dc37      	bgt.n	80096e0 <LCD_drawHLine+0x88>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	db34      	blt.n	80096e0 <LCD_drawHLine+0x88>
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2b2f      	cmp	r3, #47	; 0x2f
 800967a:	dc31      	bgt.n	80096e0 <LCD_drawHLine+0x88>
    for (int cx=0; cx<l; cx++){
 800967c:	2300      	movs	r3, #0
 800967e:	61fb      	str	r3, [r7, #28]
 8009680:	e02a      	b.n	80096d8 <LCD_drawHLine+0x80>
      by=((y/8)*84)+x;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	da00      	bge.n	800968a <LCD_drawHLine+0x32>
 8009688:	3307      	adds	r3, #7
 800968a:	10db      	asrs	r3, r3, #3
 800968c:	001a      	movs	r2, r3
 800968e:	2354      	movs	r3, #84	; 0x54
 8009690:	4353      	muls	r3, r2
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	18d3      	adds	r3, r2, r3
 8009696:	61bb      	str	r3, [r7, #24]
      bi=y % 8;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4a13      	ldr	r2, [pc, #76]	; (80096e8 <LCD_drawHLine+0x90>)
 800969c:	4013      	ands	r3, r2
 800969e:	d504      	bpl.n	80096aa <LCD_drawHLine+0x52>
 80096a0:	3b01      	subs	r3, #1
 80096a2:	2208      	movs	r2, #8
 80096a4:	4252      	negs	r2, r2
 80096a6:	4313      	orrs	r3, r2
 80096a8:	3301      	adds	r3, #1
 80096aa:	617b      	str	r3, [r7, #20]
      lcd.buffer[by+cx] |= (1<<bi);
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	18d3      	adds	r3, r2, r3
 80096b2:	4a0e      	ldr	r2, [pc, #56]	; (80096ec <LCD_drawHLine+0x94>)
 80096b4:	5cd3      	ldrb	r3, [r2, r3]
 80096b6:	b25a      	sxtb	r2, r3
 80096b8:	2101      	movs	r1, #1
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	4099      	lsls	r1, r3
 80096be:	000b      	movs	r3, r1
 80096c0:	b25b      	sxtb	r3, r3
 80096c2:	4313      	orrs	r3, r2
 80096c4:	b259      	sxtb	r1, r3
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	18d3      	adds	r3, r2, r3
 80096cc:	b2c9      	uxtb	r1, r1
 80096ce:	4a07      	ldr	r2, [pc, #28]	; (80096ec <LCD_drawHLine+0x94>)
 80096d0:	54d1      	strb	r1, [r2, r3]
    for (int cx=0; cx<l; cx++){
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	3301      	adds	r3, #1
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	69fa      	ldr	r2, [r7, #28]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	429a      	cmp	r2, r3
 80096de:	dbd0      	blt.n	8009682 <LCD_drawHLine+0x2a>
    }
  }
}
 80096e0:	46c0      	nop			; (mov r8, r8)
 80096e2:	46bd      	mov	sp, r7
 80096e4:	b008      	add	sp, #32
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	80000007 	.word	0x80000007
 80096ec:	2000022c 	.word	0x2000022c

080096f0 <LCD_drawVLine>:
 * @brief Draws a vertical line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void LCD_drawVLine(int x, int y, int l){
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]

  if ((x>=0) && (x<84) && (y>=0) && (y<48)){
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	db1e      	blt.n	8009740 <LCD_drawVLine+0x50>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b53      	cmp	r3, #83	; 0x53
 8009706:	dc1b      	bgt.n	8009740 <LCD_drawVLine+0x50>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	db18      	blt.n	8009740 <LCD_drawVLine+0x50>
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2b2f      	cmp	r3, #47	; 0x2f
 8009712:	dc15      	bgt.n	8009740 <LCD_drawVLine+0x50>
    for (int cy=0; cy<= l; cy++){
 8009714:	2300      	movs	r3, #0
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e00e      	b.n	8009738 <LCD_drawVLine+0x48>
      LCD_setPixel(x, y+cy, true);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	b2d8      	uxtb	r0, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	b2da      	uxtb	r2, r3
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	18d3      	adds	r3, r2, r3
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2201      	movs	r2, #1
 800972c:	0019      	movs	r1, r3
 800972e:	f7ff ff2b 	bl	8009588 <LCD_setPixel>
    for (int cy=0; cy<= l; cy++){
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	3301      	adds	r3, #1
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	429a      	cmp	r2, r3
 800973e:	ddec      	ble.n	800971a <LCD_drawVLine+0x2a>
    }
  }
}
 8009740:	46c0      	nop			; (mov r8, r8)
 8009742:	46bd      	mov	sp, r7
 8009744:	b006      	add	sp, #24
 8009746:	bd80      	pop	{r7, pc}

08009748 <LCD_drawRectangle>:
 * @param x1: starting point on the x-axis
 * @param y1: starting point on the y-axis
 * @param x2: ending point on the x-axis
 * @param y2: ending point on the y-axis
 */
void LCD_drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
 8009748:	b5b0      	push	{r4, r5, r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	0005      	movs	r5, r0
 8009750:	000c      	movs	r4, r1
 8009752:	0010      	movs	r0, r2
 8009754:	0019      	movs	r1, r3
 8009756:	1dfb      	adds	r3, r7, #7
 8009758:	1c2a      	adds	r2, r5, #0
 800975a:	701a      	strb	r2, [r3, #0]
 800975c:	1dbb      	adds	r3, r7, #6
 800975e:	1c22      	adds	r2, r4, #0
 8009760:	701a      	strb	r2, [r3, #0]
 8009762:	1d7b      	adds	r3, r7, #5
 8009764:	1c02      	adds	r2, r0, #0
 8009766:	701a      	strb	r2, [r3, #0]
 8009768:	1d3b      	adds	r3, r7, #4
 800976a:	1c0a      	adds	r2, r1, #0
 800976c:	701a      	strb	r2, [r3, #0]
  LCD_drawHLine(x1, y1, x2-x1);
 800976e:	1dfb      	adds	r3, r7, #7
 8009770:	7818      	ldrb	r0, [r3, #0]
 8009772:	1dbb      	adds	r3, r7, #6
 8009774:	7819      	ldrb	r1, [r3, #0]
 8009776:	1d7b      	adds	r3, r7, #5
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	1dfb      	adds	r3, r7, #7
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	001a      	movs	r2, r3
 8009782:	f7ff ff69 	bl	8009658 <LCD_drawHLine>
  LCD_drawVLine(x1, y1, y2-y1);
 8009786:	1dfb      	adds	r3, r7, #7
 8009788:	7818      	ldrb	r0, [r3, #0]
 800978a:	1dbb      	adds	r3, r7, #6
 800978c:	7819      	ldrb	r1, [r3, #0]
 800978e:	1d3b      	adds	r3, r7, #4
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	1dbb      	adds	r3, r7, #6
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	001a      	movs	r2, r3
 800979a:	f7ff ffa9 	bl	80096f0 <LCD_drawVLine>
  LCD_drawHLine(x1, y2, x2-x1);
 800979e:	1dfb      	adds	r3, r7, #7
 80097a0:	7818      	ldrb	r0, [r3, #0]
 80097a2:	1d3b      	adds	r3, r7, #4
 80097a4:	7819      	ldrb	r1, [r3, #0]
 80097a6:	1d7b      	adds	r3, r7, #5
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	1dfb      	adds	r3, r7, #7
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	001a      	movs	r2, r3
 80097b2:	f7ff ff51 	bl	8009658 <LCD_drawHLine>
  LCD_drawVLine(x2, y1, y2-y1);
 80097b6:	1d7b      	adds	r3, r7, #5
 80097b8:	7818      	ldrb	r0, [r3, #0]
 80097ba:	1dbb      	adds	r3, r7, #6
 80097bc:	7819      	ldrb	r1, [r3, #0]
 80097be:	1d3b      	adds	r3, r7, #4
 80097c0:	781a      	ldrb	r2, [r3, #0]
 80097c2:	1dbb      	adds	r3, r7, #6
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	001a      	movs	r2, r3
 80097ca:	f7ff ff91 	bl	80096f0 <LCD_drawVLine>
}
 80097ce:	46c0      	nop			; (mov r8, r8)
 80097d0:	46bd      	mov	sp, r7
 80097d2:	b002      	add	sp, #8
 80097d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080097d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097dc:	4b07      	ldr	r3, [pc, #28]	; (80097fc <HAL_MspInit+0x24>)
 80097de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097e0:	4b06      	ldr	r3, [pc, #24]	; (80097fc <HAL_MspInit+0x24>)
 80097e2:	2101      	movs	r1, #1
 80097e4:	430a      	orrs	r2, r1
 80097e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80097e8:	4b04      	ldr	r3, [pc, #16]	; (80097fc <HAL_MspInit+0x24>)
 80097ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ec:	4b03      	ldr	r3, [pc, #12]	; (80097fc <HAL_MspInit+0x24>)
 80097ee:	2180      	movs	r1, #128	; 0x80
 80097f0:	0549      	lsls	r1, r1, #21
 80097f2:	430a      	orrs	r2, r1
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40021000 	.word	0x40021000

08009800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a06      	ldr	r2, [pc, #24]	; (8009828 <HAL_TIM_Base_MspInit+0x28>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d105      	bne.n	800981e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <HAL_TIM_Base_MspInit+0x2c>)
 8009814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <HAL_TIM_Base_MspInit+0x2c>)
 8009818:	2110      	movs	r1, #16
 800981a:	430a      	orrs	r2, r1
 800981c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	46bd      	mov	sp, r7
 8009822:	b002      	add	sp, #8
 8009824:	bd80      	pop	{r7, pc}
 8009826:	46c0      	nop			; (mov r8, r8)
 8009828:	40001000 	.word	0x40001000
 800982c:	40021000 	.word	0x40021000

08009830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b089      	sub	sp, #36	; 0x24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009838:	240c      	movs	r4, #12
 800983a:	193b      	adds	r3, r7, r4
 800983c:	0018      	movs	r0, r3
 800983e:	2314      	movs	r3, #20
 8009840:	001a      	movs	r2, r3
 8009842:	2100      	movs	r1, #0
 8009844:	f002 fa72 	bl	800bd2c <memset>
  if(huart->Instance==USART2)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a18      	ldr	r2, [pc, #96]	; (80098b0 <HAL_UART_MspInit+0x80>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d129      	bne.n	80098a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009852:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <HAL_UART_MspInit+0x84>)
 8009854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009856:	4b17      	ldr	r3, [pc, #92]	; (80098b4 <HAL_UART_MspInit+0x84>)
 8009858:	2180      	movs	r1, #128	; 0x80
 800985a:	0289      	lsls	r1, r1, #10
 800985c:	430a      	orrs	r2, r1
 800985e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009860:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <HAL_UART_MspInit+0x84>)
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	4b13      	ldr	r3, [pc, #76]	; (80098b4 <HAL_UART_MspInit+0x84>)
 8009866:	2101      	movs	r1, #1
 8009868:	430a      	orrs	r2, r1
 800986a:	62da      	str	r2, [r3, #44]	; 0x2c
 800986c:	4b11      	ldr	r3, [pc, #68]	; (80098b4 <HAL_UART_MspInit+0x84>)
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	2201      	movs	r2, #1
 8009872:	4013      	ands	r3, r2
 8009874:	60bb      	str	r3, [r7, #8]
 8009876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009878:	0021      	movs	r1, r4
 800987a:	187b      	adds	r3, r7, r1
 800987c:	220c      	movs	r2, #12
 800987e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009880:	187b      	adds	r3, r7, r1
 8009882:	2202      	movs	r2, #2
 8009884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009886:	187b      	adds	r3, r7, r1
 8009888:	2200      	movs	r2, #0
 800988a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800988c:	187b      	adds	r3, r7, r1
 800988e:	2203      	movs	r2, #3
 8009890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8009892:	187b      	adds	r3, r7, r1
 8009894:	2204      	movs	r2, #4
 8009896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009898:	187a      	adds	r2, r7, r1
 800989a:	23a0      	movs	r3, #160	; 0xa0
 800989c:	05db      	lsls	r3, r3, #23
 800989e:	0011      	movs	r1, r2
 80098a0:	0018      	movs	r0, r3
 80098a2:	f000 fa37 	bl	8009d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	46bd      	mov	sp, r7
 80098aa:	b009      	add	sp, #36	; 0x24
 80098ac:	bd90      	pop	{r4, r7, pc}
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	40004400 	.word	0x40004400
 80098b4:	40021000 	.word	0x40021000

080098b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80098bc:	e7fe      	b.n	80098bc <NMI_Handler+0x4>

080098be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80098c2:	e7fe      	b.n	80098c2 <HardFault_Handler+0x4>

080098c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80098c8:	46c0      	nop			; (mov r8, r8)
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80098dc:	f000 f94a 	bl	8009b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80098e0:	46c0      	nop			; (mov r8, r8)
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	af00      	add	r7, sp, #0
	return 1;
 80098ea:	2301      	movs	r3, #1
}
 80098ec:	0018      	movs	r0, r3
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <_kill>:

int _kill(int pid, int sig)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80098fc:	f002 f9d0 	bl	800bca0 <__errno>
 8009900:	0003      	movs	r3, r0
 8009902:	2216      	movs	r2, #22
 8009904:	601a      	str	r2, [r3, #0]
	return -1;
 8009906:	2301      	movs	r3, #1
 8009908:	425b      	negs	r3, r3
}
 800990a:	0018      	movs	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	b002      	add	sp, #8
 8009910:	bd80      	pop	{r7, pc}

08009912 <_exit>:

void _exit (int status)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800991a:	2301      	movs	r3, #1
 800991c:	425a      	negs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	0011      	movs	r1, r2
 8009922:	0018      	movs	r0, r3
 8009924:	f7ff ffe5 	bl	80098f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009928:	e7fe      	b.n	8009928 <_exit+0x16>

0800992a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b086      	sub	sp, #24
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	e00a      	b.n	8009952 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800993c:	e000      	b.n	8009940 <_read+0x16>
 800993e:	bf00      	nop
 8009940:	0001      	movs	r1, r0
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	60ba      	str	r2, [r7, #8]
 8009948:	b2ca      	uxtb	r2, r1
 800994a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	3301      	adds	r3, #1
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	dbf0      	blt.n	800993c <_read+0x12>
	}

return len;
 800995a:	687b      	ldr	r3, [r7, #4]
}
 800995c:	0018      	movs	r0, r3
 800995e:	46bd      	mov	sp, r7
 8009960:	b006      	add	sp, #24
 8009962:	bd80      	pop	{r7, pc}

08009964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e009      	b.n	800998a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	60ba      	str	r2, [r7, #8]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	0018      	movs	r0, r3
 8009980:	e000      	b.n	8009984 <_write+0x20>
 8009982:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	3301      	adds	r3, #1
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	429a      	cmp	r2, r3
 8009990:	dbf1      	blt.n	8009976 <_write+0x12>
	}
	return len;
 8009992:	687b      	ldr	r3, [r7, #4]
}
 8009994:	0018      	movs	r0, r3
 8009996:	46bd      	mov	sp, r7
 8009998:	b006      	add	sp, #24
 800999a:	bd80      	pop	{r7, pc}

0800999c <_close>:

int _close(int file)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	return -1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	425b      	negs	r3, r3
}
 80099a8:	0018      	movs	r0, r3
 80099aa:	46bd      	mov	sp, r7
 80099ac:	b002      	add	sp, #8
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2280      	movs	r2, #128	; 0x80
 80099be:	0192      	lsls	r2, r2, #6
 80099c0:	605a      	str	r2, [r3, #4]
	return 0;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	0018      	movs	r0, r3
 80099c6:	46bd      	mov	sp, r7
 80099c8:	b002      	add	sp, #8
 80099ca:	bd80      	pop	{r7, pc}

080099cc <_isatty>:

int _isatty(int file)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	return 1;
 80099d4:	2301      	movs	r3, #1
}
 80099d6:	0018      	movs	r0, r3
 80099d8:	46bd      	mov	sp, r7
 80099da:	b002      	add	sp, #8
 80099dc:	bd80      	pop	{r7, pc}

080099de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	607a      	str	r2, [r7, #4]
	return 0;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	0018      	movs	r0, r3
 80099ee:	46bd      	mov	sp, r7
 80099f0:	b004      	add	sp, #16
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80099fc:	4a14      	ldr	r2, [pc, #80]	; (8009a50 <_sbrk+0x5c>)
 80099fe:	4b15      	ldr	r3, [pc, #84]	; (8009a54 <_sbrk+0x60>)
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009a08:	4b13      	ldr	r3, [pc, #76]	; (8009a58 <_sbrk+0x64>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009a10:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <_sbrk+0x64>)
 8009a12:	4a12      	ldr	r2, [pc, #72]	; (8009a5c <_sbrk+0x68>)
 8009a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009a16:	4b10      	ldr	r3, [pc, #64]	; (8009a58 <_sbrk+0x64>)
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	18d3      	adds	r3, r2, r3
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d207      	bcs.n	8009a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009a24:	f002 f93c 	bl	800bca0 <__errno>
 8009a28:	0003      	movs	r3, r0
 8009a2a:	220c      	movs	r2, #12
 8009a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	425b      	negs	r3, r3
 8009a32:	e009      	b.n	8009a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009a34:	4b08      	ldr	r3, [pc, #32]	; (8009a58 <_sbrk+0x64>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <_sbrk+0x64>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	18d2      	adds	r2, r2, r3
 8009a42:	4b05      	ldr	r3, [pc, #20]	; (8009a58 <_sbrk+0x64>)
 8009a44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8009a46:	68fb      	ldr	r3, [r7, #12]
}
 8009a48:	0018      	movs	r0, r3
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	b006      	add	sp, #24
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20005000 	.word	0x20005000
 8009a54:	00000400 	.word	0x00000400
 8009a58:	20000450 	.word	0x20000450
 8009a5c:	20000468 	.word	0x20000468

08009a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <SystemInit+0x10>)
 8009a66:	4a03      	ldr	r2, [pc, #12]	; (8009a74 <SystemInit+0x14>)
 8009a68:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	e000ed00 	.word	0xe000ed00
 8009a74:	08008000 	.word	0x08008000

08009a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009a78:	480d      	ldr	r0, [pc, #52]	; (8009ab0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009a7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009a7c:	480d      	ldr	r0, [pc, #52]	; (8009ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009a7e:	490e      	ldr	r1, [pc, #56]	; (8009ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009a80:	4a0e      	ldr	r2, [pc, #56]	; (8009abc <LoopForever+0xe>)
  movs r3, #0
 8009a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009a84:	e002      	b.n	8009a8c <LoopCopyDataInit>

08009a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009a8a:	3304      	adds	r3, #4

08009a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009a90:	d3f9      	bcc.n	8009a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009a92:	4a0b      	ldr	r2, [pc, #44]	; (8009ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009a94:	4c0b      	ldr	r4, [pc, #44]	; (8009ac4 <LoopForever+0x16>)
  movs r3, #0
 8009a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009a98:	e001      	b.n	8009a9e <LoopFillZerobss>

08009a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009a9c:	3204      	adds	r2, #4

08009a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009aa0:	d3fb      	bcc.n	8009a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009aa2:	f7ff ffdd 	bl	8009a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009aa6:	f002 f901 	bl	800bcac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009aaa:	f7fe fea3 	bl	80087f4 <main>

08009aae <LoopForever>:

LoopForever:
    b LoopForever
 8009aae:	e7fe      	b.n	8009aae <LoopForever>
   ldr   r0, =_estack
 8009ab0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009ab8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8009abc:	0800d32c 	.word	0x0800d32c
  ldr r2, =_sbss
 8009ac0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8009ac4:	20000468 	.word	0x20000468

08009ac8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ac8:	e7fe      	b.n	8009ac8 <ADC1_COMP_IRQHandler>
	...

08009acc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009ad2:	1dfb      	adds	r3, r7, #7
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <HAL_Init+0x3c>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <HAL_Init+0x3c>)
 8009ade:	2140      	movs	r1, #64	; 0x40
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	f000 f811 	bl	8009b0c <HAL_InitTick>
 8009aea:	1e03      	subs	r3, r0, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009aee:	1dfb      	adds	r3, r7, #7
 8009af0:	2201      	movs	r2, #1
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	e001      	b.n	8009afa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009af6:	f7ff fe6f 	bl	80097d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009afa:	1dfb      	adds	r3, r7, #7
 8009afc:	781b      	ldrb	r3, [r3, #0]
}
 8009afe:	0018      	movs	r0, r3
 8009b00:	46bd      	mov	sp, r7
 8009b02:	b002      	add	sp, #8
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	40022000 	.word	0x40022000

08009b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b0c:	b590      	push	{r4, r7, lr}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b14:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <HAL_InitTick+0x5c>)
 8009b16:	681c      	ldr	r4, [r3, #0]
 8009b18:	4b14      	ldr	r3, [pc, #80]	; (8009b6c <HAL_InitTick+0x60>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	23fa      	movs	r3, #250	; 0xfa
 8009b20:	0098      	lsls	r0, r3, #2
 8009b22:	f7fe fafb 	bl	800811c <__udivsi3>
 8009b26:	0003      	movs	r3, r0
 8009b28:	0019      	movs	r1, r3
 8009b2a:	0020      	movs	r0, r4
 8009b2c:	f7fe faf6 	bl	800811c <__udivsi3>
 8009b30:	0003      	movs	r3, r0
 8009b32:	0018      	movs	r0, r3
 8009b34:	f000 f8e1 	bl	8009cfa <HAL_SYSTICK_Config>
 8009b38:	1e03      	subs	r3, r0, #0
 8009b3a:	d001      	beq.n	8009b40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e00f      	b.n	8009b60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d80b      	bhi.n	8009b5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	2301      	movs	r3, #1
 8009b4a:	425b      	negs	r3, r3
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	0018      	movs	r0, r3
 8009b50:	f000 f8be 	bl	8009cd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009b54:	4b06      	ldr	r3, [pc, #24]	; (8009b70 <HAL_InitTick+0x64>)
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e000      	b.n	8009b60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
}
 8009b60:	0018      	movs	r0, r3
 8009b62:	46bd      	mov	sp, r7
 8009b64:	b003      	add	sp, #12
 8009b66:	bd90      	pop	{r4, r7, pc}
 8009b68:	2000000c 	.word	0x2000000c
 8009b6c:	20000014 	.word	0x20000014
 8009b70:	20000010 	.word	0x20000010

08009b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b78:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <HAL_IncTick+0x1c>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	001a      	movs	r2, r3
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <HAL_IncTick+0x20>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	18d2      	adds	r2, r2, r3
 8009b84:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <HAL_IncTick+0x20>)
 8009b86:	601a      	str	r2, [r3, #0]
}
 8009b88:	46c0      	nop			; (mov r8, r8)
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	20000014 	.word	0x20000014
 8009b94:	20000454 	.word	0x20000454

08009b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <HAL_GetTick+0x10>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
}
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	20000454 	.word	0x20000454

08009bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009bac:	b590      	push	{r4, r7, lr}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	0002      	movs	r2, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	1dfb      	adds	r3, r7, #7
 8009bb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009bba:	1dfb      	adds	r3, r7, #7
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8009bc0:	d828      	bhi.n	8009c14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009bc2:	4a2f      	ldr	r2, [pc, #188]	; (8009c80 <__NVIC_SetPriority+0xd4>)
 8009bc4:	1dfb      	adds	r3, r7, #7
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	b25b      	sxtb	r3, r3
 8009bca:	089b      	lsrs	r3, r3, #2
 8009bcc:	33c0      	adds	r3, #192	; 0xc0
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	589b      	ldr	r3, [r3, r2]
 8009bd2:	1dfa      	adds	r2, r7, #7
 8009bd4:	7812      	ldrb	r2, [r2, #0]
 8009bd6:	0011      	movs	r1, r2
 8009bd8:	2203      	movs	r2, #3
 8009bda:	400a      	ands	r2, r1
 8009bdc:	00d2      	lsls	r2, r2, #3
 8009bde:	21ff      	movs	r1, #255	; 0xff
 8009be0:	4091      	lsls	r1, r2
 8009be2:	000a      	movs	r2, r1
 8009be4:	43d2      	mvns	r2, r2
 8009be6:	401a      	ands	r2, r3
 8009be8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	019b      	lsls	r3, r3, #6
 8009bee:	22ff      	movs	r2, #255	; 0xff
 8009bf0:	401a      	ands	r2, r3
 8009bf2:	1dfb      	adds	r3, r7, #7
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	4003      	ands	r3, r0
 8009bfc:	00db      	lsls	r3, r3, #3
 8009bfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c00:	481f      	ldr	r0, [pc, #124]	; (8009c80 <__NVIC_SetPriority+0xd4>)
 8009c02:	1dfb      	adds	r3, r7, #7
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	b25b      	sxtb	r3, r3
 8009c08:	089b      	lsrs	r3, r3, #2
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	33c0      	adds	r3, #192	; 0xc0
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009c12:	e031      	b.n	8009c78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c14:	4a1b      	ldr	r2, [pc, #108]	; (8009c84 <__NVIC_SetPriority+0xd8>)
 8009c16:	1dfb      	adds	r3, r7, #7
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	0019      	movs	r1, r3
 8009c1c:	230f      	movs	r3, #15
 8009c1e:	400b      	ands	r3, r1
 8009c20:	3b08      	subs	r3, #8
 8009c22:	089b      	lsrs	r3, r3, #2
 8009c24:	3306      	adds	r3, #6
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	18d3      	adds	r3, r2, r3
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	1dfa      	adds	r2, r7, #7
 8009c30:	7812      	ldrb	r2, [r2, #0]
 8009c32:	0011      	movs	r1, r2
 8009c34:	2203      	movs	r2, #3
 8009c36:	400a      	ands	r2, r1
 8009c38:	00d2      	lsls	r2, r2, #3
 8009c3a:	21ff      	movs	r1, #255	; 0xff
 8009c3c:	4091      	lsls	r1, r2
 8009c3e:	000a      	movs	r2, r1
 8009c40:	43d2      	mvns	r2, r2
 8009c42:	401a      	ands	r2, r3
 8009c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	019b      	lsls	r3, r3, #6
 8009c4a:	22ff      	movs	r2, #255	; 0xff
 8009c4c:	401a      	ands	r2, r3
 8009c4e:	1dfb      	adds	r3, r7, #7
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	0018      	movs	r0, r3
 8009c54:	2303      	movs	r3, #3
 8009c56:	4003      	ands	r3, r0
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c5c:	4809      	ldr	r0, [pc, #36]	; (8009c84 <__NVIC_SetPriority+0xd8>)
 8009c5e:	1dfb      	adds	r3, r7, #7
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	001c      	movs	r4, r3
 8009c64:	230f      	movs	r3, #15
 8009c66:	4023      	ands	r3, r4
 8009c68:	3b08      	subs	r3, #8
 8009c6a:	089b      	lsrs	r3, r3, #2
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	3306      	adds	r3, #6
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	18c3      	adds	r3, r0, r3
 8009c74:	3304      	adds	r3, #4
 8009c76:	601a      	str	r2, [r3, #0]
}
 8009c78:	46c0      	nop			; (mov r8, r8)
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bd90      	pop	{r4, r7, pc}
 8009c80:	e000e100 	.word	0xe000e100
 8009c84:	e000ed00 	.word	0xe000ed00

08009c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	1e5a      	subs	r2, r3, #1
 8009c94:	2380      	movs	r3, #128	; 0x80
 8009c96:	045b      	lsls	r3, r3, #17
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d301      	bcc.n	8009ca0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e010      	b.n	8009cc2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <SysTick_Config+0x44>)
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	3a01      	subs	r2, #1
 8009ca6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ca8:	2301      	movs	r3, #1
 8009caa:	425b      	negs	r3, r3
 8009cac:	2103      	movs	r1, #3
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f7ff ff7c 	bl	8009bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cb4:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <SysTick_Config+0x44>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009cba:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <SysTick_Config+0x44>)
 8009cbc:	2207      	movs	r2, #7
 8009cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	b002      	add	sp, #8
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	46c0      	nop			; (mov r8, r8)
 8009ccc:	e000e010 	.word	0xe000e010

08009cd0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
 8009cda:	210f      	movs	r1, #15
 8009cdc:	187b      	adds	r3, r7, r1
 8009cde:	1c02      	adds	r2, r0, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	187b      	adds	r3, r7, r1
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	b25b      	sxtb	r3, r3
 8009cea:	0011      	movs	r1, r2
 8009cec:	0018      	movs	r0, r3
 8009cee:	f7ff ff5d 	bl	8009bac <__NVIC_SetPriority>
}
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b004      	add	sp, #16
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7ff ffbf 	bl	8009c88 <SysTick_Config>
 8009d0a:	0003      	movs	r3, r0
}
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b002      	add	sp, #8
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009d2a:	e155      	b.n	8009fd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2101      	movs	r1, #1
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4091      	lsls	r1, r2
 8009d36:	000a      	movs	r2, r1
 8009d38:	4013      	ands	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d100      	bne.n	8009d44 <HAL_GPIO_Init+0x30>
 8009d42:	e146      	b.n	8009fd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2203      	movs	r2, #3
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d005      	beq.n	8009d5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	2203      	movs	r2, #3
 8009d56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d130      	bne.n	8009dbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	2203      	movs	r2, #3
 8009d68:	409a      	lsls	r2, r3
 8009d6a:	0013      	movs	r3, r2
 8009d6c:	43da      	mvns	r2, r3
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4013      	ands	r3, r2
 8009d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	409a      	lsls	r2, r3
 8009d7e:	0013      	movs	r3, r2
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d92:	2201      	movs	r2, #1
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	409a      	lsls	r2, r3
 8009d98:	0013      	movs	r3, r2
 8009d9a:	43da      	mvns	r2, r3
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	091b      	lsrs	r3, r3, #4
 8009da8:	2201      	movs	r2, #1
 8009daa:	401a      	ands	r2, r3
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	409a      	lsls	r2, r3
 8009db0:	0013      	movs	r3, r2
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d017      	beq.n	8009dfa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	409a      	lsls	r2, r3
 8009dd8:	0013      	movs	r3, r2
 8009dda:	43da      	mvns	r2, r3
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	4013      	ands	r3, r2
 8009de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	689a      	ldr	r2, [r3, #8]
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	409a      	lsls	r2, r3
 8009dec:	0013      	movs	r3, r2
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2203      	movs	r2, #3
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d123      	bne.n	8009e4e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	08da      	lsrs	r2, r3, #3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3208      	adds	r2, #8
 8009e0e:	0092      	lsls	r2, r2, #2
 8009e10:	58d3      	ldr	r3, [r2, r3]
 8009e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2207      	movs	r2, #7
 8009e18:	4013      	ands	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	220f      	movs	r2, #15
 8009e1e:	409a      	lsls	r2, r3
 8009e20:	0013      	movs	r3, r2
 8009e22:	43da      	mvns	r2, r3
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	4013      	ands	r3, r2
 8009e28:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2107      	movs	r1, #7
 8009e32:	400b      	ands	r3, r1
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	409a      	lsls	r2, r3
 8009e38:	0013      	movs	r3, r2
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	08da      	lsrs	r2, r3, #3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3208      	adds	r2, #8
 8009e48:	0092      	lsls	r2, r2, #2
 8009e4a:	6939      	ldr	r1, [r7, #16]
 8009e4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	2203      	movs	r2, #3
 8009e5a:	409a      	lsls	r2, r3
 8009e5c:	0013      	movs	r3, r2
 8009e5e:	43da      	mvns	r2, r3
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	4013      	ands	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	401a      	ands	r2, r3
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	409a      	lsls	r2, r3
 8009e74:	0013      	movs	r3, r2
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	23c0      	movs	r3, #192	; 0xc0
 8009e88:	029b      	lsls	r3, r3, #10
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	d100      	bne.n	8009e90 <HAL_GPIO_Init+0x17c>
 8009e8e:	e0a0      	b.n	8009fd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e90:	4b57      	ldr	r3, [pc, #348]	; (8009ff0 <HAL_GPIO_Init+0x2dc>)
 8009e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e94:	4b56      	ldr	r3, [pc, #344]	; (8009ff0 <HAL_GPIO_Init+0x2dc>)
 8009e96:	2101      	movs	r1, #1
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e9c:	4a55      	ldr	r2, [pc, #340]	; (8009ff4 <HAL_GPIO_Init+0x2e0>)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	089b      	lsrs	r3, r3, #2
 8009ea2:	3302      	adds	r3, #2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	589b      	ldr	r3, [r3, r2]
 8009ea8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2203      	movs	r2, #3
 8009eae:	4013      	ands	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	220f      	movs	r2, #15
 8009eb4:	409a      	lsls	r2, r3
 8009eb6:	0013      	movs	r3, r2
 8009eb8:	43da      	mvns	r2, r3
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	23a0      	movs	r3, #160	; 0xa0
 8009ec4:	05db      	lsls	r3, r3, #23
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d01f      	beq.n	8009f0a <HAL_GPIO_Init+0x1f6>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a4a      	ldr	r2, [pc, #296]	; (8009ff8 <HAL_GPIO_Init+0x2e4>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d019      	beq.n	8009f06 <HAL_GPIO_Init+0x1f2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a49      	ldr	r2, [pc, #292]	; (8009ffc <HAL_GPIO_Init+0x2e8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d013      	beq.n	8009f02 <HAL_GPIO_Init+0x1ee>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a48      	ldr	r2, [pc, #288]	; (800a000 <HAL_GPIO_Init+0x2ec>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d00d      	beq.n	8009efe <HAL_GPIO_Init+0x1ea>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a47      	ldr	r2, [pc, #284]	; (800a004 <HAL_GPIO_Init+0x2f0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d007      	beq.n	8009efa <HAL_GPIO_Init+0x1e6>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a46      	ldr	r2, [pc, #280]	; (800a008 <HAL_GPIO_Init+0x2f4>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d101      	bne.n	8009ef6 <HAL_GPIO_Init+0x1e2>
 8009ef2:	2305      	movs	r3, #5
 8009ef4:	e00a      	b.n	8009f0c <HAL_GPIO_Init+0x1f8>
 8009ef6:	2306      	movs	r3, #6
 8009ef8:	e008      	b.n	8009f0c <HAL_GPIO_Init+0x1f8>
 8009efa:	2304      	movs	r3, #4
 8009efc:	e006      	b.n	8009f0c <HAL_GPIO_Init+0x1f8>
 8009efe:	2303      	movs	r3, #3
 8009f00:	e004      	b.n	8009f0c <HAL_GPIO_Init+0x1f8>
 8009f02:	2302      	movs	r3, #2
 8009f04:	e002      	b.n	8009f0c <HAL_GPIO_Init+0x1f8>
 8009f06:	2301      	movs	r3, #1
 8009f08:	e000      	b.n	8009f0c <HAL_GPIO_Init+0x1f8>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	2103      	movs	r1, #3
 8009f10:	400a      	ands	r2, r1
 8009f12:	0092      	lsls	r2, r2, #2
 8009f14:	4093      	lsls	r3, r2
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f1c:	4935      	ldr	r1, [pc, #212]	; (8009ff4 <HAL_GPIO_Init+0x2e0>)
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	089b      	lsrs	r3, r3, #2
 8009f22:	3302      	adds	r3, #2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f2a:	4b38      	ldr	r3, [pc, #224]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	43da      	mvns	r2, r3
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	4013      	ands	r3, r2
 8009f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	2380      	movs	r3, #128	; 0x80
 8009f40:	025b      	lsls	r3, r3, #9
 8009f42:	4013      	ands	r3, r2
 8009f44:	d003      	beq.n	8009f4e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009f4e:	4b2f      	ldr	r3, [pc, #188]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8009f54:	4b2d      	ldr	r3, [pc, #180]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	43da      	mvns	r2, r3
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	4013      	ands	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	2380      	movs	r3, #128	; 0x80
 8009f6a:	029b      	lsls	r3, r3, #10
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	d003      	beq.n	8009f78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009f78:	4b24      	ldr	r3, [pc, #144]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009f7e:	4b23      	ldr	r3, [pc, #140]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	43da      	mvns	r2, r3
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	2380      	movs	r3, #128	; 0x80
 8009f94:	035b      	lsls	r3, r3, #13
 8009f96:	4013      	ands	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009fa2:	4b1a      	ldr	r3, [pc, #104]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009fa8:	4b18      	ldr	r3, [pc, #96]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	43da      	mvns	r2, r3
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	2380      	movs	r3, #128	; 0x80
 8009fbe:	039b      	lsls	r3, r3, #14
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	d003      	beq.n	8009fcc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009fcc:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <HAL_GPIO_Init+0x2f8>)
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	40da      	lsrs	r2, r3
 8009fe0:	1e13      	subs	r3, r2, #0
 8009fe2:	d000      	beq.n	8009fe6 <HAL_GPIO_Init+0x2d2>
 8009fe4:	e6a2      	b.n	8009d2c <HAL_GPIO_Init+0x18>
  }
}
 8009fe6:	46c0      	nop			; (mov r8, r8)
 8009fe8:	46c0      	nop			; (mov r8, r8)
 8009fea:	46bd      	mov	sp, r7
 8009fec:	b006      	add	sp, #24
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	40021000 	.word	0x40021000
 8009ff4:	40010000 	.word	0x40010000
 8009ff8:	50000400 	.word	0x50000400
 8009ffc:	50000800 	.word	0x50000800
 800a000:	50000c00 	.word	0x50000c00
 800a004:	50001000 	.word	0x50001000
 800a008:	50001c00 	.word	0x50001c00
 800a00c:	40010400 	.word	0x40010400

0800a010 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	000a      	movs	r2, r1
 800a01a:	1cbb      	adds	r3, r7, #2
 800a01c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	1cba      	adds	r2, r7, #2
 800a024:	8812      	ldrh	r2, [r2, #0]
 800a026:	4013      	ands	r3, r2
 800a028:	d004      	beq.n	800a034 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a02a:	230f      	movs	r3, #15
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	2201      	movs	r2, #1
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	e003      	b.n	800a03c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a034:	230f      	movs	r3, #15
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a03c:	230f      	movs	r3, #15
 800a03e:	18fb      	adds	r3, r7, r3
 800a040:	781b      	ldrb	r3, [r3, #0]
}
 800a042:	0018      	movs	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	b004      	add	sp, #16
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	0008      	movs	r0, r1
 800a054:	0011      	movs	r1, r2
 800a056:	1cbb      	adds	r3, r7, #2
 800a058:	1c02      	adds	r2, r0, #0
 800a05a:	801a      	strh	r2, [r3, #0]
 800a05c:	1c7b      	adds	r3, r7, #1
 800a05e:	1c0a      	adds	r2, r1, #0
 800a060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a062:	1c7b      	adds	r3, r7, #1
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d004      	beq.n	800a074 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a06a:	1cbb      	adds	r3, r7, #2
 800a06c:	881a      	ldrh	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a072:	e003      	b.n	800a07c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a074:	1cbb      	adds	r3, r7, #2
 800a076:	881a      	ldrh	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a07c:	46c0      	nop			; (mov r8, r8)
 800a07e:	46bd      	mov	sp, r7
 800a080:	b002      	add	sp, #8
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a084:	b5b0      	push	{r4, r5, r7, lr}
 800a086:	b08a      	sub	sp, #40	; 0x28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d102      	bne.n	800a098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	f000 fbbf 	bl	800a816 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a098:	4bc9      	ldr	r3, [pc, #804]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	220c      	movs	r2, #12
 800a09e:	4013      	ands	r3, r2
 800a0a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0a2:	4bc7      	ldr	r3, [pc, #796]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	2380      	movs	r3, #128	; 0x80
 800a0a8:	025b      	lsls	r3, r3, #9
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	d100      	bne.n	800a0ba <HAL_RCC_OscConfig+0x36>
 800a0b8:	e07e      	b.n	800a1b8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d007      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	2b0c      	cmp	r3, #12
 800a0c4:	d112      	bne.n	800a0ec <HAL_RCC_OscConfig+0x68>
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	2380      	movs	r3, #128	; 0x80
 800a0ca:	025b      	lsls	r3, r3, #9
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d10d      	bne.n	800a0ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0d0:	4bbb      	ldr	r3, [pc, #748]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	2380      	movs	r3, #128	; 0x80
 800a0d6:	029b      	lsls	r3, r3, #10
 800a0d8:	4013      	ands	r3, r2
 800a0da:	d100      	bne.n	800a0de <HAL_RCC_OscConfig+0x5a>
 800a0dc:	e06b      	b.n	800a1b6 <HAL_RCC_OscConfig+0x132>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d167      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f000 fb95 	bl	800a816 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	025b      	lsls	r3, r3, #9
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d107      	bne.n	800a108 <HAL_RCC_OscConfig+0x84>
 800a0f8:	4bb1      	ldr	r3, [pc, #708]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	4bb0      	ldr	r3, [pc, #704]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a0fe:	2180      	movs	r1, #128	; 0x80
 800a100:	0249      	lsls	r1, r1, #9
 800a102:	430a      	orrs	r2, r1
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	e027      	b.n	800a158 <HAL_RCC_OscConfig+0xd4>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	23a0      	movs	r3, #160	; 0xa0
 800a10e:	02db      	lsls	r3, r3, #11
 800a110:	429a      	cmp	r2, r3
 800a112:	d10e      	bne.n	800a132 <HAL_RCC_OscConfig+0xae>
 800a114:	4baa      	ldr	r3, [pc, #680]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	4ba9      	ldr	r3, [pc, #676]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a11a:	2180      	movs	r1, #128	; 0x80
 800a11c:	02c9      	lsls	r1, r1, #11
 800a11e:	430a      	orrs	r2, r1
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	4ba7      	ldr	r3, [pc, #668]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	4ba6      	ldr	r3, [pc, #664]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a128:	2180      	movs	r1, #128	; 0x80
 800a12a:	0249      	lsls	r1, r1, #9
 800a12c:	430a      	orrs	r2, r1
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	e012      	b.n	800a158 <HAL_RCC_OscConfig+0xd4>
 800a132:	4ba3      	ldr	r3, [pc, #652]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4ba2      	ldr	r3, [pc, #648]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a138:	49a2      	ldr	r1, [pc, #648]	; (800a3c4 <HAL_RCC_OscConfig+0x340>)
 800a13a:	400a      	ands	r2, r1
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	4ba0      	ldr	r3, [pc, #640]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	2380      	movs	r3, #128	; 0x80
 800a144:	025b      	lsls	r3, r3, #9
 800a146:	4013      	ands	r3, r2
 800a148:	60fb      	str	r3, [r7, #12]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4b9c      	ldr	r3, [pc, #624]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	4b9b      	ldr	r3, [pc, #620]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a152:	499d      	ldr	r1, [pc, #628]	; (800a3c8 <HAL_RCC_OscConfig+0x344>)
 800a154:	400a      	ands	r2, r1
 800a156:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d015      	beq.n	800a18c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a160:	f7ff fd1a 	bl	8009b98 <HAL_GetTick>
 800a164:	0003      	movs	r3, r0
 800a166:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a168:	e009      	b.n	800a17e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a16a:	f7ff fd15 	bl	8009b98 <HAL_GetTick>
 800a16e:	0002      	movs	r2, r0
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	2b64      	cmp	r3, #100	; 0x64
 800a176:	d902      	bls.n	800a17e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	f000 fb4c 	bl	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a17e:	4b90      	ldr	r3, [pc, #576]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	2380      	movs	r3, #128	; 0x80
 800a184:	029b      	lsls	r3, r3, #10
 800a186:	4013      	ands	r3, r2
 800a188:	d0ef      	beq.n	800a16a <HAL_RCC_OscConfig+0xe6>
 800a18a:	e015      	b.n	800a1b8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a18c:	f7ff fd04 	bl	8009b98 <HAL_GetTick>
 800a190:	0003      	movs	r3, r0
 800a192:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a194:	e008      	b.n	800a1a8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a196:	f7ff fcff 	bl	8009b98 <HAL_GetTick>
 800a19a:	0002      	movs	r2, r0
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b64      	cmp	r3, #100	; 0x64
 800a1a2:	d901      	bls.n	800a1a8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e336      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1a8:	4b85      	ldr	r3, [pc, #532]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	2380      	movs	r3, #128	; 0x80
 800a1ae:	029b      	lsls	r3, r3, #10
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	d1f0      	bne.n	800a196 <HAL_RCC_OscConfig+0x112>
 800a1b4:	e000      	b.n	800a1b8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	4013      	ands	r3, r2
 800a1c0:	d100      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x140>
 800a1c2:	e099      	b.n	800a2f8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	d009      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800a1d2:	4b7b      	ldr	r3, [pc, #492]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	4b7a      	ldr	r3, [pc, #488]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a1d8:	2120      	movs	r1, #32
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	4393      	bics	r3, r2
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d005      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	2b0c      	cmp	r3, #12
 800a1f0:	d13e      	bne.n	800a270 <HAL_RCC_OscConfig+0x1ec>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d13b      	bne.n	800a270 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800a1f8:	4b71      	ldr	r3, [pc, #452]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2204      	movs	r2, #4
 800a1fe:	4013      	ands	r3, r2
 800a200:	d004      	beq.n	800a20c <HAL_RCC_OscConfig+0x188>
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e304      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a20c:	4b6c      	ldr	r3, [pc, #432]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	4a6e      	ldr	r2, [pc, #440]	; (800a3cc <HAL_RCC_OscConfig+0x348>)
 800a212:	4013      	ands	r3, r2
 800a214:	0019      	movs	r1, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	021a      	lsls	r2, r3, #8
 800a21c:	4b68      	ldr	r3, [pc, #416]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a21e:	430a      	orrs	r2, r1
 800a220:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800a222:	4b67      	ldr	r3, [pc, #412]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2209      	movs	r2, #9
 800a228:	4393      	bics	r3, r2
 800a22a:	0019      	movs	r1, r3
 800a22c:	4b64      	ldr	r3, [pc, #400]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a230:	430a      	orrs	r2, r1
 800a232:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a234:	f000 fc42 	bl	800aabc <HAL_RCC_GetSysClockFreq>
 800a238:	0001      	movs	r1, r0
 800a23a:	4b61      	ldr	r3, [pc, #388]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	091b      	lsrs	r3, r3, #4
 800a240:	220f      	movs	r2, #15
 800a242:	4013      	ands	r3, r2
 800a244:	4a62      	ldr	r2, [pc, #392]	; (800a3d0 <HAL_RCC_OscConfig+0x34c>)
 800a246:	5cd3      	ldrb	r3, [r2, r3]
 800a248:	000a      	movs	r2, r1
 800a24a:	40da      	lsrs	r2, r3
 800a24c:	4b61      	ldr	r3, [pc, #388]	; (800a3d4 <HAL_RCC_OscConfig+0x350>)
 800a24e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800a250:	4b61      	ldr	r3, [pc, #388]	; (800a3d8 <HAL_RCC_OscConfig+0x354>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2513      	movs	r5, #19
 800a256:	197c      	adds	r4, r7, r5
 800a258:	0018      	movs	r0, r3
 800a25a:	f7ff fc57 	bl	8009b0c <HAL_InitTick>
 800a25e:	0003      	movs	r3, r0
 800a260:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800a262:	197b      	adds	r3, r7, r5
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d046      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800a26a:	197b      	adds	r3, r7, r5
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	e2d2      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	2b00      	cmp	r3, #0
 800a274:	d027      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800a276:	4b52      	ldr	r3, [pc, #328]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2209      	movs	r2, #9
 800a27c:	4393      	bics	r3, r2
 800a27e:	0019      	movs	r1, r3
 800a280:	4b4f      	ldr	r3, [pc, #316]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a284:	430a      	orrs	r2, r1
 800a286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a288:	f7ff fc86 	bl	8009b98 <HAL_GetTick>
 800a28c:	0003      	movs	r3, r0
 800a28e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a290:	e008      	b.n	800a2a4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a292:	f7ff fc81 	bl	8009b98 <HAL_GetTick>
 800a296:	0002      	movs	r2, r0
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d901      	bls.n	800a2a4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e2b8      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2a4:	4b46      	ldr	r3, [pc, #280]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2204      	movs	r2, #4
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	d0f1      	beq.n	800a292 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ae:	4b44      	ldr	r3, [pc, #272]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	4a46      	ldr	r2, [pc, #280]	; (800a3cc <HAL_RCC_OscConfig+0x348>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	0019      	movs	r1, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	021a      	lsls	r2, r3, #8
 800a2be:	4b40      	ldr	r3, [pc, #256]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	605a      	str	r2, [r3, #4]
 800a2c4:	e018      	b.n	800a2f8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2c6:	4b3e      	ldr	r3, [pc, #248]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b3d      	ldr	r3, [pc, #244]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	438a      	bics	r2, r1
 800a2d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2d2:	f7ff fc61 	bl	8009b98 <HAL_GetTick>
 800a2d6:	0003      	movs	r3, r0
 800a2d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2da:	e008      	b.n	800a2ee <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2dc:	f7ff fc5c 	bl	8009b98 <HAL_GetTick>
 800a2e0:	0002      	movs	r2, r0
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d901      	bls.n	800a2ee <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e293      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2ee:	4b34      	ldr	r3, [pc, #208]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2204      	movs	r2, #4
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	d1f1      	bne.n	800a2dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2210      	movs	r2, #16
 800a2fe:	4013      	ands	r3, r2
 800a300:	d100      	bne.n	800a304 <HAL_RCC_OscConfig+0x280>
 800a302:	e0a2      	b.n	800a44a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d140      	bne.n	800a38c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a30a:	4b2d      	ldr	r3, [pc, #180]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	2380      	movs	r3, #128	; 0x80
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4013      	ands	r3, r2
 800a314:	d005      	beq.n	800a322 <HAL_RCC_OscConfig+0x29e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e279      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a322:	4b27      	ldr	r3, [pc, #156]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	4a2d      	ldr	r2, [pc, #180]	; (800a3dc <HAL_RCC_OscConfig+0x358>)
 800a328:	4013      	ands	r3, r2
 800a32a:	0019      	movs	r1, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a330:	4b23      	ldr	r3, [pc, #140]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a332:	430a      	orrs	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a336:	4b22      	ldr	r3, [pc, #136]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	0a19      	lsrs	r1, r3, #8
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	061a      	lsls	r2, r3, #24
 800a344:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	0b5b      	lsrs	r3, r3, #13
 800a350:	3301      	adds	r3, #1
 800a352:	2280      	movs	r2, #128	; 0x80
 800a354:	0212      	lsls	r2, r2, #8
 800a356:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a358:	4b19      	ldr	r3, [pc, #100]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	091b      	lsrs	r3, r3, #4
 800a35e:	210f      	movs	r1, #15
 800a360:	400b      	ands	r3, r1
 800a362:	491b      	ldr	r1, [pc, #108]	; (800a3d0 <HAL_RCC_OscConfig+0x34c>)
 800a364:	5ccb      	ldrb	r3, [r1, r3]
 800a366:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <HAL_RCC_OscConfig+0x350>)
 800a36a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800a36c:	4b1a      	ldr	r3, [pc, #104]	; (800a3d8 <HAL_RCC_OscConfig+0x354>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2513      	movs	r5, #19
 800a372:	197c      	adds	r4, r7, r5
 800a374:	0018      	movs	r0, r3
 800a376:	f7ff fbc9 	bl	8009b0c <HAL_InitTick>
 800a37a:	0003      	movs	r3, r0
 800a37c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800a37e:	197b      	adds	r3, r7, r5
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d061      	beq.n	800a44a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800a386:	197b      	adds	r3, r7, r5
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	e244      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d040      	beq.n	800a416 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <HAL_RCC_OscConfig+0x33c>)
 800a39a:	2180      	movs	r1, #128	; 0x80
 800a39c:	0049      	lsls	r1, r1, #1
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3a2:	f7ff fbf9 	bl	8009b98 <HAL_GetTick>
 800a3a6:	0003      	movs	r3, r0
 800a3a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a3aa:	e019      	b.n	800a3e0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a3ac:	f7ff fbf4 	bl	8009b98 <HAL_GetTick>
 800a3b0:	0002      	movs	r2, r0
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d912      	bls.n	800a3e0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e22b      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
 800a3be:	46c0      	nop			; (mov r8, r8)
 800a3c0:	40021000 	.word	0x40021000
 800a3c4:	fffeffff 	.word	0xfffeffff
 800a3c8:	fffbffff 	.word	0xfffbffff
 800a3cc:	ffffe0ff 	.word	0xffffe0ff
 800a3d0:	0800d144 	.word	0x0800d144
 800a3d4:	2000000c 	.word	0x2000000c
 800a3d8:	20000010 	.word	0x20000010
 800a3dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a3e0:	4bca      	ldr	r3, [pc, #808]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	2380      	movs	r3, #128	; 0x80
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	d0df      	beq.n	800a3ac <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3ec:	4bc7      	ldr	r3, [pc, #796]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4ac7      	ldr	r2, [pc, #796]	; (800a710 <HAL_RCC_OscConfig+0x68c>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	0019      	movs	r1, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3fa:	4bc4      	ldr	r3, [pc, #784]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a400:	4bc2      	ldr	r3, [pc, #776]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	0a19      	lsrs	r1, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	061a      	lsls	r2, r3, #24
 800a40e:	4bbf      	ldr	r3, [pc, #764]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a410:	430a      	orrs	r2, r1
 800a412:	605a      	str	r2, [r3, #4]
 800a414:	e019      	b.n	800a44a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a416:	4bbd      	ldr	r3, [pc, #756]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4bbc      	ldr	r3, [pc, #752]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a41c:	49bd      	ldr	r1, [pc, #756]	; (800a714 <HAL_RCC_OscConfig+0x690>)
 800a41e:	400a      	ands	r2, r1
 800a420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a422:	f7ff fbb9 	bl	8009b98 <HAL_GetTick>
 800a426:	0003      	movs	r3, r0
 800a428:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a42a:	e008      	b.n	800a43e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a42c:	f7ff fbb4 	bl	8009b98 <HAL_GetTick>
 800a430:	0002      	movs	r2, r0
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	2b02      	cmp	r3, #2
 800a438:	d901      	bls.n	800a43e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e1eb      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a43e:	4bb3      	ldr	r3, [pc, #716]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	2380      	movs	r3, #128	; 0x80
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4013      	ands	r3, r2
 800a448:	d1f0      	bne.n	800a42c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2208      	movs	r2, #8
 800a450:	4013      	ands	r3, r2
 800a452:	d036      	beq.n	800a4c2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d019      	beq.n	800a490 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a45c:	4bab      	ldr	r3, [pc, #684]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a45e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a460:	4baa      	ldr	r3, [pc, #680]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a462:	2101      	movs	r1, #1
 800a464:	430a      	orrs	r2, r1
 800a466:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a468:	f7ff fb96 	bl	8009b98 <HAL_GetTick>
 800a46c:	0003      	movs	r3, r0
 800a46e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a470:	e008      	b.n	800a484 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a472:	f7ff fb91 	bl	8009b98 <HAL_GetTick>
 800a476:	0002      	movs	r2, r0
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d901      	bls.n	800a484 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e1c8      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a484:	4ba1      	ldr	r3, [pc, #644]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a488:	2202      	movs	r2, #2
 800a48a:	4013      	ands	r3, r2
 800a48c:	d0f1      	beq.n	800a472 <HAL_RCC_OscConfig+0x3ee>
 800a48e:	e018      	b.n	800a4c2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a490:	4b9e      	ldr	r3, [pc, #632]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a494:	4b9d      	ldr	r3, [pc, #628]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a496:	2101      	movs	r1, #1
 800a498:	438a      	bics	r2, r1
 800a49a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a49c:	f7ff fb7c 	bl	8009b98 <HAL_GetTick>
 800a4a0:	0003      	movs	r3, r0
 800a4a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4a4:	e008      	b.n	800a4b8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a4a6:	f7ff fb77 	bl	8009b98 <HAL_GetTick>
 800a4aa:	0002      	movs	r2, r0
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d901      	bls.n	800a4b8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e1ae      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4b8:	4b94      	ldr	r3, [pc, #592]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4bc:	2202      	movs	r2, #2
 800a4be:	4013      	ands	r3, r2
 800a4c0:	d1f1      	bne.n	800a4a6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	d100      	bne.n	800a4ce <HAL_RCC_OscConfig+0x44a>
 800a4cc:	e0ae      	b.n	800a62c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4ce:	2023      	movs	r0, #35	; 0x23
 800a4d0:	183b      	adds	r3, r7, r0
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4d6:	4b8d      	ldr	r3, [pc, #564]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4da:	2380      	movs	r3, #128	; 0x80
 800a4dc:	055b      	lsls	r3, r3, #21
 800a4de:	4013      	ands	r3, r2
 800a4e0:	d109      	bne.n	800a4f6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4e2:	4b8a      	ldr	r3, [pc, #552]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a4e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4e6:	4b89      	ldr	r3, [pc, #548]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a4e8:	2180      	movs	r1, #128	; 0x80
 800a4ea:	0549      	lsls	r1, r1, #21
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800a4f0:	183b      	adds	r3, r7, r0
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4f6:	4b88      	ldr	r3, [pc, #544]	; (800a718 <HAL_RCC_OscConfig+0x694>)
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	2380      	movs	r3, #128	; 0x80
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	4013      	ands	r3, r2
 800a500:	d11a      	bne.n	800a538 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a502:	4b85      	ldr	r3, [pc, #532]	; (800a718 <HAL_RCC_OscConfig+0x694>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4b84      	ldr	r3, [pc, #528]	; (800a718 <HAL_RCC_OscConfig+0x694>)
 800a508:	2180      	movs	r1, #128	; 0x80
 800a50a:	0049      	lsls	r1, r1, #1
 800a50c:	430a      	orrs	r2, r1
 800a50e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a510:	f7ff fb42 	bl	8009b98 <HAL_GetTick>
 800a514:	0003      	movs	r3, r0
 800a516:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a518:	e008      	b.n	800a52c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a51a:	f7ff fb3d 	bl	8009b98 <HAL_GetTick>
 800a51e:	0002      	movs	r2, r0
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	2b64      	cmp	r3, #100	; 0x64
 800a526:	d901      	bls.n	800a52c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e174      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a52c:	4b7a      	ldr	r3, [pc, #488]	; (800a718 <HAL_RCC_OscConfig+0x694>)
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	2380      	movs	r3, #128	; 0x80
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	4013      	ands	r3, r2
 800a536:	d0f0      	beq.n	800a51a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	2380      	movs	r3, #128	; 0x80
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	429a      	cmp	r2, r3
 800a542:	d107      	bne.n	800a554 <HAL_RCC_OscConfig+0x4d0>
 800a544:	4b71      	ldr	r3, [pc, #452]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a548:	4b70      	ldr	r3, [pc, #448]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a54a:	2180      	movs	r1, #128	; 0x80
 800a54c:	0049      	lsls	r1, r1, #1
 800a54e:	430a      	orrs	r2, r1
 800a550:	651a      	str	r2, [r3, #80]	; 0x50
 800a552:	e031      	b.n	800a5b8 <HAL_RCC_OscConfig+0x534>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10c      	bne.n	800a576 <HAL_RCC_OscConfig+0x4f2>
 800a55c:	4b6b      	ldr	r3, [pc, #428]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a55e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a560:	4b6a      	ldr	r3, [pc, #424]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a562:	496c      	ldr	r1, [pc, #432]	; (800a714 <HAL_RCC_OscConfig+0x690>)
 800a564:	400a      	ands	r2, r1
 800a566:	651a      	str	r2, [r3, #80]	; 0x50
 800a568:	4b68      	ldr	r3, [pc, #416]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a56a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a56c:	4b67      	ldr	r3, [pc, #412]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a56e:	496b      	ldr	r1, [pc, #428]	; (800a71c <HAL_RCC_OscConfig+0x698>)
 800a570:	400a      	ands	r2, r1
 800a572:	651a      	str	r2, [r3, #80]	; 0x50
 800a574:	e020      	b.n	800a5b8 <HAL_RCC_OscConfig+0x534>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689a      	ldr	r2, [r3, #8]
 800a57a:	23a0      	movs	r3, #160	; 0xa0
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	429a      	cmp	r2, r3
 800a580:	d10e      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x51c>
 800a582:	4b62      	ldr	r3, [pc, #392]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a586:	4b61      	ldr	r3, [pc, #388]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a588:	2180      	movs	r1, #128	; 0x80
 800a58a:	00c9      	lsls	r1, r1, #3
 800a58c:	430a      	orrs	r2, r1
 800a58e:	651a      	str	r2, [r3, #80]	; 0x50
 800a590:	4b5e      	ldr	r3, [pc, #376]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a594:	4b5d      	ldr	r3, [pc, #372]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a596:	2180      	movs	r1, #128	; 0x80
 800a598:	0049      	lsls	r1, r1, #1
 800a59a:	430a      	orrs	r2, r1
 800a59c:	651a      	str	r2, [r3, #80]	; 0x50
 800a59e:	e00b      	b.n	800a5b8 <HAL_RCC_OscConfig+0x534>
 800a5a0:	4b5a      	ldr	r3, [pc, #360]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a5a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5a4:	4b59      	ldr	r3, [pc, #356]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a5a6:	495b      	ldr	r1, [pc, #364]	; (800a714 <HAL_RCC_OscConfig+0x690>)
 800a5a8:	400a      	ands	r2, r1
 800a5aa:	651a      	str	r2, [r3, #80]	; 0x50
 800a5ac:	4b57      	ldr	r3, [pc, #348]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a5ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5b0:	4b56      	ldr	r3, [pc, #344]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a5b2:	495a      	ldr	r1, [pc, #360]	; (800a71c <HAL_RCC_OscConfig+0x698>)
 800a5b4:	400a      	ands	r2, r1
 800a5b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d015      	beq.n	800a5ec <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5c0:	f7ff faea 	bl	8009b98 <HAL_GetTick>
 800a5c4:	0003      	movs	r3, r0
 800a5c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5c8:	e009      	b.n	800a5de <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5ca:	f7ff fae5 	bl	8009b98 <HAL_GetTick>
 800a5ce:	0002      	movs	r2, r0
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	4a52      	ldr	r2, [pc, #328]	; (800a720 <HAL_RCC_OscConfig+0x69c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d901      	bls.n	800a5de <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e11b      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5de:	4b4b      	ldr	r3, [pc, #300]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a5e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5e2:	2380      	movs	r3, #128	; 0x80
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	d0ef      	beq.n	800a5ca <HAL_RCC_OscConfig+0x546>
 800a5ea:	e014      	b.n	800a616 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5ec:	f7ff fad4 	bl	8009b98 <HAL_GetTick>
 800a5f0:	0003      	movs	r3, r0
 800a5f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5f4:	e009      	b.n	800a60a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5f6:	f7ff facf 	bl	8009b98 <HAL_GetTick>
 800a5fa:	0002      	movs	r2, r0
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	4a47      	ldr	r2, [pc, #284]	; (800a720 <HAL_RCC_OscConfig+0x69c>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e105      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a60a:	4b40      	ldr	r3, [pc, #256]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a60c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a60e:	2380      	movs	r3, #128	; 0x80
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4013      	ands	r3, r2
 800a614:	d1ef      	bne.n	800a5f6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a616:	2323      	movs	r3, #35	; 0x23
 800a618:	18fb      	adds	r3, r7, r3
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d105      	bne.n	800a62c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a620:	4b3a      	ldr	r3, [pc, #232]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a624:	4b39      	ldr	r3, [pc, #228]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a626:	493f      	ldr	r1, [pc, #252]	; (800a724 <HAL_RCC_OscConfig+0x6a0>)
 800a628:	400a      	ands	r2, r1
 800a62a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2220      	movs	r2, #32
 800a632:	4013      	ands	r3, r2
 800a634:	d049      	beq.n	800a6ca <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d026      	beq.n	800a68c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800a63e:	4b33      	ldr	r3, [pc, #204]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	4b32      	ldr	r3, [pc, #200]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a644:	2101      	movs	r1, #1
 800a646:	430a      	orrs	r2, r1
 800a648:	609a      	str	r2, [r3, #8]
 800a64a:	4b30      	ldr	r3, [pc, #192]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a64c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a64e:	4b2f      	ldr	r3, [pc, #188]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a650:	2101      	movs	r1, #1
 800a652:	430a      	orrs	r2, r1
 800a654:	635a      	str	r2, [r3, #52]	; 0x34
 800a656:	4b34      	ldr	r3, [pc, #208]	; (800a728 <HAL_RCC_OscConfig+0x6a4>)
 800a658:	6a1a      	ldr	r2, [r3, #32]
 800a65a:	4b33      	ldr	r3, [pc, #204]	; (800a728 <HAL_RCC_OscConfig+0x6a4>)
 800a65c:	2180      	movs	r1, #128	; 0x80
 800a65e:	0189      	lsls	r1, r1, #6
 800a660:	430a      	orrs	r2, r1
 800a662:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a664:	f7ff fa98 	bl	8009b98 <HAL_GetTick>
 800a668:	0003      	movs	r3, r0
 800a66a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a66c:	e008      	b.n	800a680 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a66e:	f7ff fa93 	bl	8009b98 <HAL_GetTick>
 800a672:	0002      	movs	r2, r0
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d901      	bls.n	800a680 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e0ca      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a680:	4b22      	ldr	r3, [pc, #136]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	2202      	movs	r2, #2
 800a686:	4013      	ands	r3, r2
 800a688:	d0f1      	beq.n	800a66e <HAL_RCC_OscConfig+0x5ea>
 800a68a:	e01e      	b.n	800a6ca <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800a68c:	4b1f      	ldr	r3, [pc, #124]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	4b1e      	ldr	r3, [pc, #120]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a692:	2101      	movs	r1, #1
 800a694:	438a      	bics	r2, r1
 800a696:	609a      	str	r2, [r3, #8]
 800a698:	4b23      	ldr	r3, [pc, #140]	; (800a728 <HAL_RCC_OscConfig+0x6a4>)
 800a69a:	6a1a      	ldr	r2, [r3, #32]
 800a69c:	4b22      	ldr	r3, [pc, #136]	; (800a728 <HAL_RCC_OscConfig+0x6a4>)
 800a69e:	4923      	ldr	r1, [pc, #140]	; (800a72c <HAL_RCC_OscConfig+0x6a8>)
 800a6a0:	400a      	ands	r2, r1
 800a6a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6a4:	f7ff fa78 	bl	8009b98 <HAL_GetTick>
 800a6a8:	0003      	movs	r3, r0
 800a6aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a6ac:	e008      	b.n	800a6c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6ae:	f7ff fa73 	bl	8009b98 <HAL_GetTick>
 800a6b2:	0002      	movs	r2, r0
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d901      	bls.n	800a6c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e0aa      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a6c0:	4b12      	ldr	r3, [pc, #72]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	d1f1      	bne.n	800a6ae <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d100      	bne.n	800a6d4 <HAL_RCC_OscConfig+0x650>
 800a6d2:	e09f      	b.n	800a814 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	2b0c      	cmp	r3, #12
 800a6d8:	d100      	bne.n	800a6dc <HAL_RCC_OscConfig+0x658>
 800a6da:	e078      	b.n	800a7ce <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d159      	bne.n	800a798 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6e4:	4b09      	ldr	r3, [pc, #36]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	4b08      	ldr	r3, [pc, #32]	; (800a70c <HAL_RCC_OscConfig+0x688>)
 800a6ea:	4911      	ldr	r1, [pc, #68]	; (800a730 <HAL_RCC_OscConfig+0x6ac>)
 800a6ec:	400a      	ands	r2, r1
 800a6ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6f0:	f7ff fa52 	bl	8009b98 <HAL_GetTick>
 800a6f4:	0003      	movs	r3, r0
 800a6f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a6f8:	e01c      	b.n	800a734 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6fa:	f7ff fa4d 	bl	8009b98 <HAL_GetTick>
 800a6fe:	0002      	movs	r2, r0
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	2b02      	cmp	r3, #2
 800a706:	d915      	bls.n	800a734 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e084      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
 800a70c:	40021000 	.word	0x40021000
 800a710:	ffff1fff 	.word	0xffff1fff
 800a714:	fffffeff 	.word	0xfffffeff
 800a718:	40007000 	.word	0x40007000
 800a71c:	fffffbff 	.word	0xfffffbff
 800a720:	00001388 	.word	0x00001388
 800a724:	efffffff 	.word	0xefffffff
 800a728:	40010000 	.word	0x40010000
 800a72c:	ffffdfff 	.word	0xffffdfff
 800a730:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a734:	4b3a      	ldr	r3, [pc, #232]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	2380      	movs	r3, #128	; 0x80
 800a73a:	049b      	lsls	r3, r3, #18
 800a73c:	4013      	ands	r3, r2
 800a73e:	d1dc      	bne.n	800a6fa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a740:	4b37      	ldr	r3, [pc, #220]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4a37      	ldr	r2, [pc, #220]	; (800a824 <HAL_RCC_OscConfig+0x7a0>)
 800a746:	4013      	ands	r3, r2
 800a748:	0019      	movs	r1, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a758:	431a      	orrs	r2, r3
 800a75a:	4b31      	ldr	r3, [pc, #196]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a75c:	430a      	orrs	r2, r1
 800a75e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a760:	4b2f      	ldr	r3, [pc, #188]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a766:	2180      	movs	r1, #128	; 0x80
 800a768:	0449      	lsls	r1, r1, #17
 800a76a:	430a      	orrs	r2, r1
 800a76c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a76e:	f7ff fa13 	bl	8009b98 <HAL_GetTick>
 800a772:	0003      	movs	r3, r0
 800a774:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a776:	e008      	b.n	800a78a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a778:	f7ff fa0e 	bl	8009b98 <HAL_GetTick>
 800a77c:	0002      	movs	r2, r0
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d901      	bls.n	800a78a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e045      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a78a:	4b25      	ldr	r3, [pc, #148]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	2380      	movs	r3, #128	; 0x80
 800a790:	049b      	lsls	r3, r3, #18
 800a792:	4013      	ands	r3, r2
 800a794:	d0f0      	beq.n	800a778 <HAL_RCC_OscConfig+0x6f4>
 800a796:	e03d      	b.n	800a814 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a798:	4b21      	ldr	r3, [pc, #132]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	4b20      	ldr	r3, [pc, #128]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a79e:	4922      	ldr	r1, [pc, #136]	; (800a828 <HAL_RCC_OscConfig+0x7a4>)
 800a7a0:	400a      	ands	r2, r1
 800a7a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7a4:	f7ff f9f8 	bl	8009b98 <HAL_GetTick>
 800a7a8:	0003      	movs	r3, r0
 800a7aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a7ac:	e008      	b.n	800a7c0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7ae:	f7ff f9f3 	bl	8009b98 <HAL_GetTick>
 800a7b2:	0002      	movs	r2, r0
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d901      	bls.n	800a7c0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e02a      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a7c0:	4b17      	ldr	r3, [pc, #92]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	2380      	movs	r3, #128	; 0x80
 800a7c6:	049b      	lsls	r3, r3, #18
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	d1f0      	bne.n	800a7ae <HAL_RCC_OscConfig+0x72a>
 800a7cc:	e022      	b.n	800a814 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d101      	bne.n	800a7da <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e01d      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a7da:	4b11      	ldr	r3, [pc, #68]	; (800a820 <HAL_RCC_OscConfig+0x79c>)
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	2380      	movs	r3, #128	; 0x80
 800a7e4:	025b      	lsls	r3, r3, #9
 800a7e6:	401a      	ands	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d10f      	bne.n	800a810 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a7f0:	69ba      	ldr	r2, [r7, #24]
 800a7f2:	23f0      	movs	r3, #240	; 0xf0
 800a7f4:	039b      	lsls	r3, r3, #14
 800a7f6:	401a      	ands	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d107      	bne.n	800a810 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a800:	69ba      	ldr	r2, [r7, #24]
 800a802:	23c0      	movs	r3, #192	; 0xc0
 800a804:	041b      	lsls	r3, r3, #16
 800a806:	401a      	ands	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d001      	beq.n	800a814 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e000      	b.n	800a816 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	0018      	movs	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	b00a      	add	sp, #40	; 0x28
 800a81c:	bdb0      	pop	{r4, r5, r7, pc}
 800a81e:	46c0      	nop			; (mov r8, r8)
 800a820:	40021000 	.word	0x40021000
 800a824:	ff02ffff 	.word	0xff02ffff
 800a828:	feffffff 	.word	0xfeffffff

0800a82c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a82c:	b5b0      	push	{r4, r5, r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e128      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a840:	4b96      	ldr	r3, [pc, #600]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2201      	movs	r2, #1
 800a846:	4013      	ands	r3, r2
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d91e      	bls.n	800a88c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a84e:	4b93      	ldr	r3, [pc, #588]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2201      	movs	r2, #1
 800a854:	4393      	bics	r3, r2
 800a856:	0019      	movs	r1, r3
 800a858:	4b90      	ldr	r3, [pc, #576]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	430a      	orrs	r2, r1
 800a85e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a860:	f7ff f99a 	bl	8009b98 <HAL_GetTick>
 800a864:	0003      	movs	r3, r0
 800a866:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a868:	e009      	b.n	800a87e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a86a:	f7ff f995 	bl	8009b98 <HAL_GetTick>
 800a86e:	0002      	movs	r2, r0
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	4a8a      	ldr	r2, [pc, #552]	; (800aaa0 <HAL_RCC_ClockConfig+0x274>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e109      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a87e:	4b87      	ldr	r3, [pc, #540]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2201      	movs	r2, #1
 800a884:	4013      	ands	r3, r2
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d1ee      	bne.n	800a86a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2202      	movs	r2, #2
 800a892:	4013      	ands	r3, r2
 800a894:	d009      	beq.n	800a8aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a896:	4b83      	ldr	r3, [pc, #524]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	22f0      	movs	r2, #240	; 0xf0
 800a89c:	4393      	bics	r3, r2
 800a89e:	0019      	movs	r1, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	4b7f      	ldr	r3, [pc, #508]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	d100      	bne.n	800a8b6 <HAL_RCC_ClockConfig+0x8a>
 800a8b4:	e089      	b.n	800a9ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d107      	bne.n	800a8ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8be:	4b79      	ldr	r3, [pc, #484]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	2380      	movs	r3, #128	; 0x80
 800a8c4:	029b      	lsls	r3, r3, #10
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	d120      	bne.n	800a90c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e0e1      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d107      	bne.n	800a8e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8d6:	4b73      	ldr	r3, [pc, #460]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	2380      	movs	r3, #128	; 0x80
 800a8dc:	049b      	lsls	r3, r3, #18
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d114      	bne.n	800a90c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e0d5      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d106      	bne.n	800a8fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8ee:	4b6d      	ldr	r3, [pc, #436]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2204      	movs	r2, #4
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	d109      	bne.n	800a90c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e0ca      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a8fc:	4b69      	ldr	r3, [pc, #420]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4013      	ands	r3, r2
 800a906:	d101      	bne.n	800a90c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e0c2      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a90c:	4b65      	ldr	r3, [pc, #404]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	2203      	movs	r2, #3
 800a912:	4393      	bics	r3, r2
 800a914:	0019      	movs	r1, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	4b62      	ldr	r3, [pc, #392]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a91c:	430a      	orrs	r2, r1
 800a91e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a920:	f7ff f93a 	bl	8009b98 <HAL_GetTick>
 800a924:	0003      	movs	r3, r0
 800a926:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d111      	bne.n	800a954 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a930:	e009      	b.n	800a946 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a932:	f7ff f931 	bl	8009b98 <HAL_GetTick>
 800a936:	0002      	movs	r2, r0
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	4a58      	ldr	r2, [pc, #352]	; (800aaa0 <HAL_RCC_ClockConfig+0x274>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d901      	bls.n	800a946 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e0a5      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a946:	4b57      	ldr	r3, [pc, #348]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	220c      	movs	r2, #12
 800a94c:	4013      	ands	r3, r2
 800a94e:	2b08      	cmp	r3, #8
 800a950:	d1ef      	bne.n	800a932 <HAL_RCC_ClockConfig+0x106>
 800a952:	e03a      	b.n	800a9ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d111      	bne.n	800a980 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a95c:	e009      	b.n	800a972 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a95e:	f7ff f91b 	bl	8009b98 <HAL_GetTick>
 800a962:	0002      	movs	r2, r0
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	4a4d      	ldr	r2, [pc, #308]	; (800aaa0 <HAL_RCC_ClockConfig+0x274>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d901      	bls.n	800a972 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e08f      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a972:	4b4c      	ldr	r3, [pc, #304]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	220c      	movs	r2, #12
 800a978:	4013      	ands	r3, r2
 800a97a:	2b0c      	cmp	r3, #12
 800a97c:	d1ef      	bne.n	800a95e <HAL_RCC_ClockConfig+0x132>
 800a97e:	e024      	b.n	800a9ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d11b      	bne.n	800a9c0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a988:	e009      	b.n	800a99e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a98a:	f7ff f905 	bl	8009b98 <HAL_GetTick>
 800a98e:	0002      	movs	r2, r0
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	4a42      	ldr	r2, [pc, #264]	; (800aaa0 <HAL_RCC_ClockConfig+0x274>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d901      	bls.n	800a99e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e079      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a99e:	4b41      	ldr	r3, [pc, #260]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	220c      	movs	r2, #12
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d1ef      	bne.n	800a98a <HAL_RCC_ClockConfig+0x15e>
 800a9aa:	e00e      	b.n	800a9ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9ac:	f7ff f8f4 	bl	8009b98 <HAL_GetTick>
 800a9b0:	0002      	movs	r2, r0
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	4a3a      	ldr	r2, [pc, #232]	; (800aaa0 <HAL_RCC_ClockConfig+0x274>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d901      	bls.n	800a9c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e068      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a9c0:	4b38      	ldr	r3, [pc, #224]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	220c      	movs	r2, #12
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	d1f0      	bne.n	800a9ac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ca:	4b34      	ldr	r3, [pc, #208]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d21e      	bcs.n	800aa16 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9d8:	4b30      	ldr	r3, [pc, #192]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	4393      	bics	r3, r2
 800a9e0:	0019      	movs	r1, r3
 800a9e2:	4b2e      	ldr	r3, [pc, #184]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a9ea:	f7ff f8d5 	bl	8009b98 <HAL_GetTick>
 800a9ee:	0003      	movs	r3, r0
 800a9f0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9f2:	e009      	b.n	800aa08 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9f4:	f7ff f8d0 	bl	8009b98 <HAL_GetTick>
 800a9f8:	0002      	movs	r2, r0
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	4a28      	ldr	r2, [pc, #160]	; (800aaa0 <HAL_RCC_ClockConfig+0x274>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e044      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa08:	4b24      	ldr	r3, [pc, #144]	; (800aa9c <HAL_RCC_ClockConfig+0x270>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4013      	ands	r3, r2
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d1ee      	bne.n	800a9f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2204      	movs	r2, #4
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	d009      	beq.n	800aa34 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa20:	4b20      	ldr	r3, [pc, #128]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	4a20      	ldr	r2, [pc, #128]	; (800aaa8 <HAL_RCC_ClockConfig+0x27c>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	0019      	movs	r1, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	4b1d      	ldr	r3, [pc, #116]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800aa30:	430a      	orrs	r2, r1
 800aa32:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2208      	movs	r2, #8
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	d00a      	beq.n	800aa54 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aa3e:	4b19      	ldr	r3, [pc, #100]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	4a1a      	ldr	r2, [pc, #104]	; (800aaac <HAL_RCC_ClockConfig+0x280>)
 800aa44:	4013      	ands	r3, r2
 800aa46:	0019      	movs	r1, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	00da      	lsls	r2, r3, #3
 800aa4e:	4b15      	ldr	r3, [pc, #84]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800aa50:	430a      	orrs	r2, r1
 800aa52:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa54:	f000 f832 	bl	800aabc <HAL_RCC_GetSysClockFreq>
 800aa58:	0001      	movs	r1, r0
 800aa5a:	4b12      	ldr	r3, [pc, #72]	; (800aaa4 <HAL_RCC_ClockConfig+0x278>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	091b      	lsrs	r3, r3, #4
 800aa60:	220f      	movs	r2, #15
 800aa62:	4013      	ands	r3, r2
 800aa64:	4a12      	ldr	r2, [pc, #72]	; (800aab0 <HAL_RCC_ClockConfig+0x284>)
 800aa66:	5cd3      	ldrb	r3, [r2, r3]
 800aa68:	000a      	movs	r2, r1
 800aa6a:	40da      	lsrs	r2, r3
 800aa6c:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <HAL_RCC_ClockConfig+0x288>)
 800aa6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa70:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <HAL_RCC_ClockConfig+0x28c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	250b      	movs	r5, #11
 800aa76:	197c      	adds	r4, r7, r5
 800aa78:	0018      	movs	r0, r3
 800aa7a:	f7ff f847 	bl	8009b0c <HAL_InitTick>
 800aa7e:	0003      	movs	r3, r0
 800aa80:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800aa82:	197b      	adds	r3, r7, r5
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800aa8a:	197b      	adds	r3, r7, r5
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	e000      	b.n	800aa92 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	0018      	movs	r0, r3
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b004      	add	sp, #16
 800aa98:	bdb0      	pop	{r4, r5, r7, pc}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	40022000 	.word	0x40022000
 800aaa0:	00001388 	.word	0x00001388
 800aaa4:	40021000 	.word	0x40021000
 800aaa8:	fffff8ff 	.word	0xfffff8ff
 800aaac:	ffffc7ff 	.word	0xffffc7ff
 800aab0:	0800d144 	.word	0x0800d144
 800aab4:	2000000c 	.word	0x2000000c
 800aab8:	20000010 	.word	0x20000010

0800aabc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aabc:	b5b0      	push	{r4, r5, r7, lr}
 800aabe:	b08e      	sub	sp, #56	; 0x38
 800aac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800aac2:	4b4c      	ldr	r3, [pc, #304]	; (800abf4 <HAL_RCC_GetSysClockFreq+0x138>)
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaca:	230c      	movs	r3, #12
 800aacc:	4013      	ands	r3, r2
 800aace:	2b0c      	cmp	r3, #12
 800aad0:	d014      	beq.n	800aafc <HAL_RCC_GetSysClockFreq+0x40>
 800aad2:	d900      	bls.n	800aad6 <HAL_RCC_GetSysClockFreq+0x1a>
 800aad4:	e07b      	b.n	800abce <HAL_RCC_GetSysClockFreq+0x112>
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	d002      	beq.n	800aae0 <HAL_RCC_GetSysClockFreq+0x24>
 800aada:	2b08      	cmp	r3, #8
 800aadc:	d00b      	beq.n	800aaf6 <HAL_RCC_GetSysClockFreq+0x3a>
 800aade:	e076      	b.n	800abce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800aae0:	4b44      	ldr	r3, [pc, #272]	; (800abf4 <HAL_RCC_GetSysClockFreq+0x138>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2210      	movs	r2, #16
 800aae6:	4013      	ands	r3, r2
 800aae8:	d002      	beq.n	800aaf0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800aaea:	4b43      	ldr	r3, [pc, #268]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800aaec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800aaee:	e07c      	b.n	800abea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800aaf0:	4b42      	ldr	r3, [pc, #264]	; (800abfc <HAL_RCC_GetSysClockFreq+0x140>)
 800aaf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800aaf4:	e079      	b.n	800abea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aaf6:	4b42      	ldr	r3, [pc, #264]	; (800ac00 <HAL_RCC_GetSysClockFreq+0x144>)
 800aaf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800aafa:	e076      	b.n	800abea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	0c9a      	lsrs	r2, r3, #18
 800ab00:	230f      	movs	r3, #15
 800ab02:	401a      	ands	r2, r3
 800ab04:	4b3f      	ldr	r3, [pc, #252]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x148>)
 800ab06:	5c9b      	ldrb	r3, [r3, r2]
 800ab08:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	0d9a      	lsrs	r2, r3, #22
 800ab0e:	2303      	movs	r3, #3
 800ab10:	4013      	ands	r3, r2
 800ab12:	3301      	adds	r3, #1
 800ab14:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab16:	4b37      	ldr	r3, [pc, #220]	; (800abf4 <HAL_RCC_GetSysClockFreq+0x138>)
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	2380      	movs	r3, #128	; 0x80
 800ab1c:	025b      	lsls	r3, r3, #9
 800ab1e:	4013      	ands	r3, r2
 800ab20:	d01a      	beq.n	800ab58 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	61bb      	str	r3, [r7, #24]
 800ab26:	2300      	movs	r3, #0
 800ab28:	61fb      	str	r3, [r7, #28]
 800ab2a:	4a35      	ldr	r2, [pc, #212]	; (800ac00 <HAL_RCC_GetSysClockFreq+0x144>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	69b8      	ldr	r0, [r7, #24]
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	f7fd fc89 	bl	8008448 <__aeabi_lmul>
 800ab36:	0002      	movs	r2, r0
 800ab38:	000b      	movs	r3, r1
 800ab3a:	0010      	movs	r0, r2
 800ab3c:	0019      	movs	r1, r3
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	613b      	str	r3, [r7, #16]
 800ab42:	2300      	movs	r3, #0
 800ab44:	617b      	str	r3, [r7, #20]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f7fd fc5d 	bl	8008408 <__aeabi_uldivmod>
 800ab4e:	0002      	movs	r2, r0
 800ab50:	000b      	movs	r3, r1
 800ab52:	0013      	movs	r3, r2
 800ab54:	637b      	str	r3, [r7, #52]	; 0x34
 800ab56:	e037      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800ab58:	4b26      	ldr	r3, [pc, #152]	; (800abf4 <HAL_RCC_GetSysClockFreq+0x138>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2210      	movs	r2, #16
 800ab5e:	4013      	ands	r3, r2
 800ab60:	d01a      	beq.n	800ab98 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	60bb      	str	r3, [r7, #8]
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	4a23      	ldr	r2, [pc, #140]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	68b8      	ldr	r0, [r7, #8]
 800ab70:	68f9      	ldr	r1, [r7, #12]
 800ab72:	f7fd fc69 	bl	8008448 <__aeabi_lmul>
 800ab76:	0002      	movs	r2, r0
 800ab78:	000b      	movs	r3, r1
 800ab7a:	0010      	movs	r0, r2
 800ab7c:	0019      	movs	r1, r3
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	603b      	str	r3, [r7, #0]
 800ab82:	2300      	movs	r3, #0
 800ab84:	607b      	str	r3, [r7, #4]
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f7fd fc3d 	bl	8008408 <__aeabi_uldivmod>
 800ab8e:	0002      	movs	r2, r0
 800ab90:	000b      	movs	r3, r1
 800ab92:	0013      	movs	r3, r2
 800ab94:	637b      	str	r3, [r7, #52]	; 0x34
 800ab96:	e017      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	0018      	movs	r0, r3
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	0019      	movs	r1, r3
 800aba0:	4a16      	ldr	r2, [pc, #88]	; (800abfc <HAL_RCC_GetSysClockFreq+0x140>)
 800aba2:	2300      	movs	r3, #0
 800aba4:	f7fd fc50 	bl	8008448 <__aeabi_lmul>
 800aba8:	0002      	movs	r2, r0
 800abaa:	000b      	movs	r3, r1
 800abac:	0010      	movs	r0, r2
 800abae:	0019      	movs	r1, r3
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	001c      	movs	r4, r3
 800abb4:	2300      	movs	r3, #0
 800abb6:	001d      	movs	r5, r3
 800abb8:	0022      	movs	r2, r4
 800abba:	002b      	movs	r3, r5
 800abbc:	f7fd fc24 	bl	8008408 <__aeabi_uldivmod>
 800abc0:	0002      	movs	r2, r0
 800abc2:	000b      	movs	r3, r1
 800abc4:	0013      	movs	r3, r2
 800abc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800abc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800abcc:	e00d      	b.n	800abea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <HAL_RCC_GetSysClockFreq+0x138>)
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	0b5b      	lsrs	r3, r3, #13
 800abd4:	2207      	movs	r2, #7
 800abd6:	4013      	ands	r3, r2
 800abd8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	3301      	adds	r3, #1
 800abde:	2280      	movs	r2, #128	; 0x80
 800abe0:	0212      	lsls	r2, r2, #8
 800abe2:	409a      	lsls	r2, r3
 800abe4:	0013      	movs	r3, r2
 800abe6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800abe8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800abec:	0018      	movs	r0, r3
 800abee:	46bd      	mov	sp, r7
 800abf0:	b00e      	add	sp, #56	; 0x38
 800abf2:	bdb0      	pop	{r4, r5, r7, pc}
 800abf4:	40021000 	.word	0x40021000
 800abf8:	003d0900 	.word	0x003d0900
 800abfc:	00f42400 	.word	0x00f42400
 800ac00:	007a1200 	.word	0x007a1200
 800ac04:	0800d15c 	.word	0x0800d15c

0800ac08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac0c:	4b02      	ldr	r3, [pc, #8]	; (800ac18 <HAL_RCC_GetHCLKFreq+0x10>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
}
 800ac10:	0018      	movs	r0, r3
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	46c0      	nop			; (mov r8, r8)
 800ac18:	2000000c 	.word	0x2000000c

0800ac1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ac20:	f7ff fff2 	bl	800ac08 <HAL_RCC_GetHCLKFreq>
 800ac24:	0001      	movs	r1, r0
 800ac26:	4b06      	ldr	r3, [pc, #24]	; (800ac40 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	0a1b      	lsrs	r3, r3, #8
 800ac2c:	2207      	movs	r2, #7
 800ac2e:	4013      	ands	r3, r2
 800ac30:	4a04      	ldr	r2, [pc, #16]	; (800ac44 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac32:	5cd3      	ldrb	r3, [r2, r3]
 800ac34:	40d9      	lsrs	r1, r3
 800ac36:	000b      	movs	r3, r1
}
 800ac38:	0018      	movs	r0, r3
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	40021000 	.word	0x40021000
 800ac44:	0800d154 	.word	0x0800d154

0800ac48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac4c:	f7ff ffdc 	bl	800ac08 <HAL_RCC_GetHCLKFreq>
 800ac50:	0001      	movs	r1, r0
 800ac52:	4b06      	ldr	r3, [pc, #24]	; (800ac6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	0adb      	lsrs	r3, r3, #11
 800ac58:	2207      	movs	r2, #7
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	4a04      	ldr	r2, [pc, #16]	; (800ac70 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac5e:	5cd3      	ldrb	r3, [r2, r3]
 800ac60:	40d9      	lsrs	r1, r3
 800ac62:	000b      	movs	r3, r1
}
 800ac64:	0018      	movs	r0, r3
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	46c0      	nop			; (mov r8, r8)
 800ac6c:	40021000 	.word	0x40021000
 800ac70:	0800d154 	.word	0x0800d154

0800ac74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800ac7c:	2317      	movs	r3, #23
 800ac7e:	18fb      	adds	r3, r7, r3
 800ac80:	2200      	movs	r2, #0
 800ac82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	d106      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	2380      	movs	r3, #128	; 0x80
 800ac94:	011b      	lsls	r3, r3, #4
 800ac96:	4013      	ands	r3, r2
 800ac98:	d100      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800ac9a:	e0d9      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac9c:	4ba4      	ldr	r3, [pc, #656]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ac9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aca0:	2380      	movs	r3, #128	; 0x80
 800aca2:	055b      	lsls	r3, r3, #21
 800aca4:	4013      	ands	r3, r2
 800aca6:	d10a      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aca8:	4ba1      	ldr	r3, [pc, #644]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800acaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acac:	4ba0      	ldr	r3, [pc, #640]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800acae:	2180      	movs	r1, #128	; 0x80
 800acb0:	0549      	lsls	r1, r1, #21
 800acb2:	430a      	orrs	r2, r1
 800acb4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800acb6:	2317      	movs	r3, #23
 800acb8:	18fb      	adds	r3, r7, r3
 800acba:	2201      	movs	r2, #1
 800acbc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acbe:	4b9d      	ldr	r3, [pc, #628]	; (800af34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	2380      	movs	r3, #128	; 0x80
 800acc4:	005b      	lsls	r3, r3, #1
 800acc6:	4013      	ands	r3, r2
 800acc8:	d11a      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800acca:	4b9a      	ldr	r3, [pc, #616]	; (800af34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	4b99      	ldr	r3, [pc, #612]	; (800af34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800acd0:	2180      	movs	r1, #128	; 0x80
 800acd2:	0049      	lsls	r1, r1, #1
 800acd4:	430a      	orrs	r2, r1
 800acd6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acd8:	f7fe ff5e 	bl	8009b98 <HAL_GetTick>
 800acdc:	0003      	movs	r3, r0
 800acde:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ace0:	e008      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ace2:	f7fe ff59 	bl	8009b98 <HAL_GetTick>
 800ace6:	0002      	movs	r2, r0
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b64      	cmp	r3, #100	; 0x64
 800acee:	d901      	bls.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e118      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acf4:	4b8f      	ldr	r3, [pc, #572]	; (800af34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	2380      	movs	r3, #128	; 0x80
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	4013      	ands	r3, r2
 800acfe:	d0f0      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800ad00:	4b8b      	ldr	r3, [pc, #556]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	23c0      	movs	r3, #192	; 0xc0
 800ad06:	039b      	lsls	r3, r3, #14
 800ad08:	4013      	ands	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	23c0      	movs	r3, #192	; 0xc0
 800ad12:	039b      	lsls	r3, r3, #14
 800ad14:	4013      	ands	r3, r2
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d107      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	23c0      	movs	r3, #192	; 0xc0
 800ad22:	039b      	lsls	r3, r3, #14
 800ad24:	4013      	ands	r3, r2
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d013      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	23c0      	movs	r3, #192	; 0xc0
 800ad32:	029b      	lsls	r3, r3, #10
 800ad34:	401a      	ands	r2, r3
 800ad36:	23c0      	movs	r3, #192	; 0xc0
 800ad38:	029b      	lsls	r3, r3, #10
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d10a      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad3e:	4b7c      	ldr	r3, [pc, #496]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	2380      	movs	r3, #128	; 0x80
 800ad44:	029b      	lsls	r3, r3, #10
 800ad46:	401a      	ands	r2, r3
 800ad48:	2380      	movs	r3, #128	; 0x80
 800ad4a:	029b      	lsls	r3, r3, #10
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d101      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e0e8      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800ad54:	4b76      	ldr	r3, [pc, #472]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ad56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad58:	23c0      	movs	r3, #192	; 0xc0
 800ad5a:	029b      	lsls	r3, r3, #10
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d049      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x186>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	23c0      	movs	r3, #192	; 0xc0
 800ad6c:	029b      	lsls	r3, r3, #10
 800ad6e:	4013      	ands	r3, r2
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d004      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	d10d      	bne.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	689a      	ldr	r2, [r3, #8]
 800ad84:	23c0      	movs	r3, #192	; 0xc0
 800ad86:	029b      	lsls	r3, r3, #10
 800ad88:	4013      	ands	r3, r2
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d034      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	2380      	movs	r3, #128	; 0x80
 800ad96:	011b      	lsls	r3, r3, #4
 800ad98:	4013      	ands	r3, r2
 800ad9a:	d02e      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800ad9c:	4b64      	ldr	r3, [pc, #400]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ad9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada0:	4a65      	ldr	r2, [pc, #404]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800ada2:	4013      	ands	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ada6:	4b62      	ldr	r3, [pc, #392]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ada8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adaa:	4b61      	ldr	r3, [pc, #388]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800adac:	2180      	movs	r1, #128	; 0x80
 800adae:	0309      	lsls	r1, r1, #12
 800adb0:	430a      	orrs	r2, r1
 800adb2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800adb4:	4b5e      	ldr	r3, [pc, #376]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800adb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adb8:	4b5d      	ldr	r3, [pc, #372]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800adba:	4960      	ldr	r1, [pc, #384]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800adbc:	400a      	ands	r2, r1
 800adbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800adc0:	4b5b      	ldr	r3, [pc, #364]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	2380      	movs	r3, #128	; 0x80
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	4013      	ands	r3, r2
 800adce:	d014      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800add0:	f7fe fee2 	bl	8009b98 <HAL_GetTick>
 800add4:	0003      	movs	r3, r0
 800add6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800add8:	e009      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800adda:	f7fe fedd 	bl	8009b98 <HAL_GetTick>
 800adde:	0002      	movs	r2, r0
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	4a56      	ldr	r2, [pc, #344]	; (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d901      	bls.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e09b      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adee:	4b50      	ldr	r3, [pc, #320]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800adf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adf2:	2380      	movs	r3, #128	; 0x80
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4013      	ands	r3, r2
 800adf8:	d0ef      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	23c0      	movs	r3, #192	; 0xc0
 800ae00:	029b      	lsls	r3, r3, #10
 800ae02:	401a      	ands	r2, r3
 800ae04:	23c0      	movs	r3, #192	; 0xc0
 800ae06:	029b      	lsls	r3, r3, #10
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d10c      	bne.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800ae0c:	4b48      	ldr	r3, [pc, #288]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a4c      	ldr	r2, [pc, #304]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	0019      	movs	r1, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	23c0      	movs	r3, #192	; 0xc0
 800ae1c:	039b      	lsls	r3, r3, #14
 800ae1e:	401a      	ands	r2, r3
 800ae20:	4b43      	ldr	r3, [pc, #268]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae22:	430a      	orrs	r2, r1
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	4b42      	ldr	r3, [pc, #264]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	23c0      	movs	r3, #192	; 0xc0
 800ae30:	029b      	lsls	r3, r3, #10
 800ae32:	401a      	ands	r2, r3
 800ae34:	4b3e      	ldr	r3, [pc, #248]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae36:	430a      	orrs	r2, r1
 800ae38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ae3a:	2317      	movs	r3, #23
 800ae3c:	18fb      	adds	r3, r7, r3
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d105      	bne.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae44:	4b3a      	ldr	r3, [pc, #232]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae48:	4b39      	ldr	r3, [pc, #228]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae4a:	493f      	ldr	r1, [pc, #252]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae4c:	400a      	ands	r2, r1
 800ae4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2201      	movs	r2, #1
 800ae56:	4013      	ands	r3, r2
 800ae58:	d009      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ae5a:	4b35      	ldr	r3, [pc, #212]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae5e:	2203      	movs	r2, #3
 800ae60:	4393      	bics	r3, r2
 800ae62:	0019      	movs	r1, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68da      	ldr	r2, [r3, #12]
 800ae68:	4b31      	ldr	r3, [pc, #196]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2202      	movs	r2, #2
 800ae74:	4013      	ands	r3, r2
 800ae76:	d009      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ae78:	4b2d      	ldr	r3, [pc, #180]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae7c:	220c      	movs	r2, #12
 800ae7e:	4393      	bics	r3, r2
 800ae80:	0019      	movs	r1, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691a      	ldr	r2, [r3, #16]
 800ae86:	4b2a      	ldr	r3, [pc, #168]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2204      	movs	r2, #4
 800ae92:	4013      	ands	r3, r2
 800ae94:	d009      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ae96:	4b26      	ldr	r3, [pc, #152]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ae98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae9a:	4a2c      	ldr	r2, [pc, #176]	; (800af4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	0019      	movs	r1, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	695a      	ldr	r2, [r3, #20]
 800aea4:	4b22      	ldr	r3, [pc, #136]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aea6:	430a      	orrs	r2, r1
 800aea8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2208      	movs	r2, #8
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	d009      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aeb4:	4b1e      	ldr	r3, [pc, #120]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aeb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb8:	4a25      	ldr	r2, [pc, #148]	; (800af50 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800aeba:	4013      	ands	r3, r2
 800aebc:	0019      	movs	r1, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	699a      	ldr	r2, [r3, #24]
 800aec2:	4b1b      	ldr	r3, [pc, #108]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aec4:	430a      	orrs	r2, r1
 800aec6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	2380      	movs	r3, #128	; 0x80
 800aece:	005b      	lsls	r3, r3, #1
 800aed0:	4013      	ands	r3, r2
 800aed2:	d009      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aed4:	4b16      	ldr	r3, [pc, #88]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed8:	4a17      	ldr	r2, [pc, #92]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800aeda:	4013      	ands	r3, r2
 800aedc:	0019      	movs	r1, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	69da      	ldr	r2, [r3, #28]
 800aee2:	4b13      	ldr	r3, [pc, #76]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aee4:	430a      	orrs	r2, r1
 800aee6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2240      	movs	r2, #64	; 0x40
 800aeee:	4013      	ands	r3, r2
 800aef0:	d009      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aef2:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aef6:	4a17      	ldr	r2, [pc, #92]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800aef8:	4013      	ands	r3, r2
 800aefa:	0019      	movs	r1, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af00:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800af02:	430a      	orrs	r2, r1
 800af04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2280      	movs	r2, #128	; 0x80
 800af0c:	4013      	ands	r3, r2
 800af0e:	d009      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800af12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af14:	4a10      	ldr	r2, [pc, #64]	; (800af58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800af16:	4013      	ands	r3, r2
 800af18:	0019      	movs	r1, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1a      	ldr	r2, [r3, #32]
 800af1e:	4b04      	ldr	r3, [pc, #16]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800af20:	430a      	orrs	r2, r1
 800af22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	0018      	movs	r0, r3
 800af28:	46bd      	mov	sp, r7
 800af2a:	b006      	add	sp, #24
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	40021000 	.word	0x40021000
 800af34:	40007000 	.word	0x40007000
 800af38:	fffcffff 	.word	0xfffcffff
 800af3c:	fff7ffff 	.word	0xfff7ffff
 800af40:	00001388 	.word	0x00001388
 800af44:	ffcfffff 	.word	0xffcfffff
 800af48:	efffffff 	.word	0xefffffff
 800af4c:	fffff3ff 	.word	0xfffff3ff
 800af50:	ffffcfff 	.word	0xffffcfff
 800af54:	fbffffff 	.word	0xfbffffff
 800af58:	fff3ffff 	.word	0xfff3ffff

0800af5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e032      	b.n	800afd4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2239      	movs	r2, #57	; 0x39
 800af72:	5c9b      	ldrb	r3, [r3, r2]
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d107      	bne.n	800af8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2238      	movs	r2, #56	; 0x38
 800af7e:	2100      	movs	r1, #0
 800af80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	0018      	movs	r0, r3
 800af86:	f7fe fc3b 	bl	8009800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2239      	movs	r2, #57	; 0x39
 800af8e:	2102      	movs	r1, #2
 800af90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3304      	adds	r3, #4
 800af9a:	0019      	movs	r1, r3
 800af9c:	0010      	movs	r0, r2
 800af9e:	f000 f867 	bl	800b070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	223e      	movs	r2, #62	; 0x3e
 800afa6:	2101      	movs	r1, #1
 800afa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	223a      	movs	r2, #58	; 0x3a
 800afae:	2101      	movs	r1, #1
 800afb0:	5499      	strb	r1, [r3, r2]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	223b      	movs	r2, #59	; 0x3b
 800afb6:	2101      	movs	r1, #1
 800afb8:	5499      	strb	r1, [r3, r2]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	223c      	movs	r2, #60	; 0x3c
 800afbe:	2101      	movs	r1, #1
 800afc0:	5499      	strb	r1, [r3, r2]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	223d      	movs	r2, #61	; 0x3d
 800afc6:	2101      	movs	r1, #1
 800afc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2239      	movs	r2, #57	; 0x39
 800afce:	2101      	movs	r1, #1
 800afd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	0018      	movs	r0, r3
 800afd6:	46bd      	mov	sp, r7
 800afd8:	b002      	add	sp, #8
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2239      	movs	r2, #57	; 0x39
 800afe8:	5c9b      	ldrb	r3, [r3, r2]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b01      	cmp	r3, #1
 800afee:	d001      	beq.n	800aff4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e033      	b.n	800b05c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2239      	movs	r2, #57	; 0x39
 800aff8:	2102      	movs	r1, #2
 800affa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	2380      	movs	r3, #128	; 0x80
 800b002:	05db      	lsls	r3, r3, #23
 800b004:	429a      	cmp	r2, r3
 800b006:	d00e      	beq.n	800b026 <HAL_TIM_Base_Start+0x4a>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a15      	ldr	r2, [pc, #84]	; (800b064 <HAL_TIM_Base_Start+0x88>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d009      	beq.n	800b026 <HAL_TIM_Base_Start+0x4a>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a14      	ldr	r2, [pc, #80]	; (800b068 <HAL_TIM_Base_Start+0x8c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d004      	beq.n	800b026 <HAL_TIM_Base_Start+0x4a>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a12      	ldr	r2, [pc, #72]	; (800b06c <HAL_TIM_Base_Start+0x90>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d111      	bne.n	800b04a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	2207      	movs	r2, #7
 800b02e:	4013      	ands	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b06      	cmp	r3, #6
 800b036:	d010      	beq.n	800b05a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2101      	movs	r1, #1
 800b044:	430a      	orrs	r2, r1
 800b046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b048:	e007      	b.n	800b05a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2101      	movs	r1, #1
 800b056:	430a      	orrs	r2, r1
 800b058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	0018      	movs	r0, r3
 800b05e:	46bd      	mov	sp, r7
 800b060:	b004      	add	sp, #16
 800b062:	bd80      	pop	{r7, pc}
 800b064:	40000400 	.word	0x40000400
 800b068:	40010800 	.word	0x40010800
 800b06c:	40011400 	.word	0x40011400

0800b070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	2380      	movs	r3, #128	; 0x80
 800b084:	05db      	lsls	r3, r3, #23
 800b086:	429a      	cmp	r2, r3
 800b088:	d00b      	beq.n	800b0a2 <TIM_Base_SetConfig+0x32>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a23      	ldr	r2, [pc, #140]	; (800b11c <TIM_Base_SetConfig+0xac>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d007      	beq.n	800b0a2 <TIM_Base_SetConfig+0x32>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a22      	ldr	r2, [pc, #136]	; (800b120 <TIM_Base_SetConfig+0xb0>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d003      	beq.n	800b0a2 <TIM_Base_SetConfig+0x32>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a21      	ldr	r2, [pc, #132]	; (800b124 <TIM_Base_SetConfig+0xb4>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d108      	bne.n	800b0b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2270      	movs	r2, #112	; 0x70
 800b0a6:	4393      	bics	r3, r2
 800b0a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	2380      	movs	r3, #128	; 0x80
 800b0b8:	05db      	lsls	r3, r3, #23
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d00b      	beq.n	800b0d6 <TIM_Base_SetConfig+0x66>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a16      	ldr	r2, [pc, #88]	; (800b11c <TIM_Base_SetConfig+0xac>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d007      	beq.n	800b0d6 <TIM_Base_SetConfig+0x66>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a15      	ldr	r2, [pc, #84]	; (800b120 <TIM_Base_SetConfig+0xb0>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d003      	beq.n	800b0d6 <TIM_Base_SetConfig+0x66>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a14      	ldr	r2, [pc, #80]	; (800b124 <TIM_Base_SetConfig+0xb4>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d108      	bne.n	800b0e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4a13      	ldr	r2, [pc, #76]	; (800b128 <TIM_Base_SetConfig+0xb8>)
 800b0da:	4013      	ands	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2280      	movs	r2, #128	; 0x80
 800b0ec:	4393      	bics	r3, r2
 800b0ee:	001a      	movs	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	689a      	ldr	r2, [r3, #8]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	615a      	str	r2, [r3, #20]
}
 800b114:	46c0      	nop			; (mov r8, r8)
 800b116:	46bd      	mov	sp, r7
 800b118:	b004      	add	sp, #16
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	40000400 	.word	0x40000400
 800b120:	40010800 	.word	0x40010800
 800b124:	40011400 	.word	0x40011400
 800b128:	fffffcff 	.word	0xfffffcff

0800b12c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2238      	movs	r2, #56	; 0x38
 800b13a:	5c9b      	ldrb	r3, [r3, r2]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b140:	2302      	movs	r3, #2
 800b142:	e047      	b.n	800b1d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2238      	movs	r2, #56	; 0x38
 800b148:	2101      	movs	r1, #1
 800b14a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2239      	movs	r2, #57	; 0x39
 800b150:	2102      	movs	r1, #2
 800b152:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2270      	movs	r2, #112	; 0x70
 800b168:	4393      	bics	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	2380      	movs	r3, #128	; 0x80
 800b184:	05db      	lsls	r3, r3, #23
 800b186:	429a      	cmp	r2, r3
 800b188:	d00e      	beq.n	800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d009      	beq.n	800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a11      	ldr	r2, [pc, #68]	; (800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d004      	beq.n	800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a10      	ldr	r2, [pc, #64]	; (800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d10c      	bne.n	800b1c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2280      	movs	r2, #128	; 0x80
 800b1ac:	4393      	bics	r3, r2
 800b1ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2239      	movs	r2, #57	; 0x39
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2238      	movs	r2, #56	; 0x38
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	b004      	add	sp, #16
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	40000400 	.word	0x40000400
 800b1e0:	40010800 	.word	0x40010800
 800b1e4:	40011400 	.word	0x40011400

0800b1e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e044      	b.n	800b284 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d107      	bne.n	800b212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2274      	movs	r2, #116	; 0x74
 800b206:	2100      	movs	r1, #0
 800b208:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	0018      	movs	r0, r3
 800b20e:	f7fe fb0f 	bl	8009830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2224      	movs	r2, #36	; 0x24
 800b216:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2101      	movs	r1, #1
 800b224:	438a      	bics	r2, r1
 800b226:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	0018      	movs	r0, r3
 800b22c:	f000 f8d8 	bl	800b3e0 <UART_SetConfig>
 800b230:	0003      	movs	r3, r0
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e024      	b.n	800b284 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	0018      	movs	r0, r3
 800b246:	f000 fb6b 	bl	800b920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	490d      	ldr	r1, [pc, #52]	; (800b28c <HAL_UART_Init+0xa4>)
 800b256:	400a      	ands	r2, r1
 800b258:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	689a      	ldr	r2, [r3, #8]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	212a      	movs	r1, #42	; 0x2a
 800b266:	438a      	bics	r2, r1
 800b268:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2101      	movs	r1, #1
 800b276:	430a      	orrs	r2, r1
 800b278:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	0018      	movs	r0, r3
 800b27e:	f000 fc03 	bl	800ba88 <UART_CheckIdleState>
 800b282:	0003      	movs	r3, r0
}
 800b284:	0018      	movs	r0, r3
 800b286:	46bd      	mov	sp, r7
 800b288:	b002      	add	sp, #8
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	ffffb7ff 	.word	0xffffb7ff

0800b290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af02      	add	r7, sp, #8
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	1dbb      	adds	r3, r7, #6
 800b29e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2a4:	2b20      	cmp	r3, #32
 800b2a6:	d000      	beq.n	800b2aa <HAL_UART_Transmit+0x1a>
 800b2a8:	e095      	b.n	800b3d6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <HAL_UART_Transmit+0x28>
 800b2b0:	1dbb      	adds	r3, r7, #6
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d101      	bne.n	800b2bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e08d      	b.n	800b3d8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	2380      	movs	r3, #128	; 0x80
 800b2c2:	015b      	lsls	r3, r3, #5
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d109      	bne.n	800b2dc <HAL_UART_Transmit+0x4c>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d105      	bne.n	800b2dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	d001      	beq.n	800b2dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e07d      	b.n	800b3d8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2274      	movs	r2, #116	; 0x74
 800b2e0:	5c9b      	ldrb	r3, [r3, r2]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d101      	bne.n	800b2ea <HAL_UART_Transmit+0x5a>
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e076      	b.n	800b3d8 <HAL_UART_Transmit+0x148>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2274      	movs	r2, #116	; 0x74
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2280      	movs	r2, #128	; 0x80
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2221      	movs	r2, #33	; 0x21
 800b2fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b300:	f7fe fc4a 	bl	8009b98 <HAL_GetTick>
 800b304:	0003      	movs	r3, r0
 800b306:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	1dba      	adds	r2, r7, #6
 800b30c:	2150      	movs	r1, #80	; 0x50
 800b30e:	8812      	ldrh	r2, [r2, #0]
 800b310:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1dba      	adds	r2, r7, #6
 800b316:	2152      	movs	r1, #82	; 0x52
 800b318:	8812      	ldrh	r2, [r2, #0]
 800b31a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	2380      	movs	r3, #128	; 0x80
 800b322:	015b      	lsls	r3, r3, #5
 800b324:	429a      	cmp	r2, r3
 800b326:	d108      	bne.n	800b33a <HAL_UART_Transmit+0xaa>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d104      	bne.n	800b33a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	e003      	b.n	800b342 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2274      	movs	r2, #116	; 0x74
 800b346:	2100      	movs	r1, #0
 800b348:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800b34a:	e02c      	b.n	800b3a6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	0013      	movs	r3, r2
 800b356:	2200      	movs	r2, #0
 800b358:	2180      	movs	r1, #128	; 0x80
 800b35a:	f000 fbdd 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800b35e:	1e03      	subs	r3, r0, #0
 800b360:	d001      	beq.n	800b366 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800b362:	2303      	movs	r3, #3
 800b364:	e038      	b.n	800b3d8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10b      	bne.n	800b384 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	001a      	movs	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	05d2      	lsls	r2, r2, #23
 800b378:	0dd2      	lsrs	r2, r2, #23
 800b37a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	3302      	adds	r3, #2
 800b380:	61bb      	str	r3, [r7, #24]
 800b382:	e007      	b.n	800b394 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	3301      	adds	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2252      	movs	r2, #82	; 0x52
 800b398:	5a9b      	ldrh	r3, [r3, r2]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	3b01      	subs	r3, #1
 800b39e:	b299      	uxth	r1, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2252      	movs	r2, #82	; 0x52
 800b3a4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2252      	movs	r2, #82	; 0x52
 800b3aa:	5a9b      	ldrh	r3, [r3, r2]
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1cc      	bne.n	800b34c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	0013      	movs	r3, r2
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2140      	movs	r1, #64	; 0x40
 800b3c0:	f000 fbaa 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800b3c4:	1e03      	subs	r3, r0, #0
 800b3c6:	d001      	beq.n	800b3cc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e005      	b.n	800b3d8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e000      	b.n	800b3d8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800b3d6:	2302      	movs	r3, #2
  }
}
 800b3d8:	0018      	movs	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b008      	add	sp, #32
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3e0:	b5b0      	push	{r4, r5, r7, lr}
 800b3e2:	b08e      	sub	sp, #56	; 0x38
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3e8:	231a      	movs	r3, #26
 800b3ea:	2218      	movs	r2, #24
 800b3ec:	189b      	adds	r3, r3, r2
 800b3ee:	19db      	adds	r3, r3, r7
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	689a      	ldr	r2, [r3, #8]
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	431a      	orrs	r2, r3
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	4313      	orrs	r3, r2
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4ac3      	ldr	r2, [pc, #780]	; (800b720 <UART_SetConfig+0x340>)
 800b414:	4013      	ands	r3, r2
 800b416:	0019      	movs	r1, r3
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b41e:	430a      	orrs	r2, r1
 800b420:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	4abe      	ldr	r2, [pc, #760]	; (800b724 <UART_SetConfig+0x344>)
 800b42a:	4013      	ands	r3, r2
 800b42c:	0019      	movs	r1, r3
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4ab8      	ldr	r2, [pc, #736]	; (800b728 <UART_SetConfig+0x348>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b450:	4313      	orrs	r3, r2
 800b452:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	4ab4      	ldr	r2, [pc, #720]	; (800b72c <UART_SetConfig+0x34c>)
 800b45c:	4013      	ands	r3, r2
 800b45e:	0019      	movs	r1, r3
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b466:	430a      	orrs	r2, r1
 800b468:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4ab0      	ldr	r2, [pc, #704]	; (800b730 <UART_SetConfig+0x350>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d131      	bne.n	800b4d8 <UART_SetConfig+0xf8>
 800b474:	4baf      	ldr	r3, [pc, #700]	; (800b734 <UART_SetConfig+0x354>)
 800b476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b478:	2203      	movs	r2, #3
 800b47a:	4013      	ands	r3, r2
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d01d      	beq.n	800b4bc <UART_SetConfig+0xdc>
 800b480:	d823      	bhi.n	800b4ca <UART_SetConfig+0xea>
 800b482:	2b02      	cmp	r3, #2
 800b484:	d00c      	beq.n	800b4a0 <UART_SetConfig+0xc0>
 800b486:	d820      	bhi.n	800b4ca <UART_SetConfig+0xea>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <UART_SetConfig+0xb2>
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d00e      	beq.n	800b4ae <UART_SetConfig+0xce>
 800b490:	e01b      	b.n	800b4ca <UART_SetConfig+0xea>
 800b492:	231b      	movs	r3, #27
 800b494:	2218      	movs	r2, #24
 800b496:	189b      	adds	r3, r3, r2
 800b498:	19db      	adds	r3, r3, r7
 800b49a:	2201      	movs	r2, #1
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	e0b4      	b.n	800b60a <UART_SetConfig+0x22a>
 800b4a0:	231b      	movs	r3, #27
 800b4a2:	2218      	movs	r2, #24
 800b4a4:	189b      	adds	r3, r3, r2
 800b4a6:	19db      	adds	r3, r3, r7
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	e0ad      	b.n	800b60a <UART_SetConfig+0x22a>
 800b4ae:	231b      	movs	r3, #27
 800b4b0:	2218      	movs	r2, #24
 800b4b2:	189b      	adds	r3, r3, r2
 800b4b4:	19db      	adds	r3, r3, r7
 800b4b6:	2204      	movs	r2, #4
 800b4b8:	701a      	strb	r2, [r3, #0]
 800b4ba:	e0a6      	b.n	800b60a <UART_SetConfig+0x22a>
 800b4bc:	231b      	movs	r3, #27
 800b4be:	2218      	movs	r2, #24
 800b4c0:	189b      	adds	r3, r3, r2
 800b4c2:	19db      	adds	r3, r3, r7
 800b4c4:	2208      	movs	r2, #8
 800b4c6:	701a      	strb	r2, [r3, #0]
 800b4c8:	e09f      	b.n	800b60a <UART_SetConfig+0x22a>
 800b4ca:	231b      	movs	r3, #27
 800b4cc:	2218      	movs	r2, #24
 800b4ce:	189b      	adds	r3, r3, r2
 800b4d0:	19db      	adds	r3, r3, r7
 800b4d2:	2210      	movs	r2, #16
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	e098      	b.n	800b60a <UART_SetConfig+0x22a>
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a96      	ldr	r2, [pc, #600]	; (800b738 <UART_SetConfig+0x358>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d131      	bne.n	800b546 <UART_SetConfig+0x166>
 800b4e2:	4b94      	ldr	r3, [pc, #592]	; (800b734 <UART_SetConfig+0x354>)
 800b4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e6:	220c      	movs	r2, #12
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	2b0c      	cmp	r3, #12
 800b4ec:	d01d      	beq.n	800b52a <UART_SetConfig+0x14a>
 800b4ee:	d823      	bhi.n	800b538 <UART_SetConfig+0x158>
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d00c      	beq.n	800b50e <UART_SetConfig+0x12e>
 800b4f4:	d820      	bhi.n	800b538 <UART_SetConfig+0x158>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d002      	beq.n	800b500 <UART_SetConfig+0x120>
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d00e      	beq.n	800b51c <UART_SetConfig+0x13c>
 800b4fe:	e01b      	b.n	800b538 <UART_SetConfig+0x158>
 800b500:	231b      	movs	r3, #27
 800b502:	2218      	movs	r2, #24
 800b504:	189b      	adds	r3, r3, r2
 800b506:	19db      	adds	r3, r3, r7
 800b508:	2200      	movs	r2, #0
 800b50a:	701a      	strb	r2, [r3, #0]
 800b50c:	e07d      	b.n	800b60a <UART_SetConfig+0x22a>
 800b50e:	231b      	movs	r3, #27
 800b510:	2218      	movs	r2, #24
 800b512:	189b      	adds	r3, r3, r2
 800b514:	19db      	adds	r3, r3, r7
 800b516:	2202      	movs	r2, #2
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	e076      	b.n	800b60a <UART_SetConfig+0x22a>
 800b51c:	231b      	movs	r3, #27
 800b51e:	2218      	movs	r2, #24
 800b520:	189b      	adds	r3, r3, r2
 800b522:	19db      	adds	r3, r3, r7
 800b524:	2204      	movs	r2, #4
 800b526:	701a      	strb	r2, [r3, #0]
 800b528:	e06f      	b.n	800b60a <UART_SetConfig+0x22a>
 800b52a:	231b      	movs	r3, #27
 800b52c:	2218      	movs	r2, #24
 800b52e:	189b      	adds	r3, r3, r2
 800b530:	19db      	adds	r3, r3, r7
 800b532:	2208      	movs	r2, #8
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	e068      	b.n	800b60a <UART_SetConfig+0x22a>
 800b538:	231b      	movs	r3, #27
 800b53a:	2218      	movs	r2, #24
 800b53c:	189b      	adds	r3, r3, r2
 800b53e:	19db      	adds	r3, r3, r7
 800b540:	2210      	movs	r2, #16
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	e061      	b.n	800b60a <UART_SetConfig+0x22a>
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a7c      	ldr	r2, [pc, #496]	; (800b73c <UART_SetConfig+0x35c>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d106      	bne.n	800b55e <UART_SetConfig+0x17e>
 800b550:	231b      	movs	r3, #27
 800b552:	2218      	movs	r2, #24
 800b554:	189b      	adds	r3, r3, r2
 800b556:	19db      	adds	r3, r3, r7
 800b558:	2200      	movs	r2, #0
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	e055      	b.n	800b60a <UART_SetConfig+0x22a>
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a77      	ldr	r2, [pc, #476]	; (800b740 <UART_SetConfig+0x360>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d106      	bne.n	800b576 <UART_SetConfig+0x196>
 800b568:	231b      	movs	r3, #27
 800b56a:	2218      	movs	r2, #24
 800b56c:	189b      	adds	r3, r3, r2
 800b56e:	19db      	adds	r3, r3, r7
 800b570:	2200      	movs	r2, #0
 800b572:	701a      	strb	r2, [r3, #0]
 800b574:	e049      	b.n	800b60a <UART_SetConfig+0x22a>
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a6b      	ldr	r2, [pc, #428]	; (800b728 <UART_SetConfig+0x348>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d13e      	bne.n	800b5fe <UART_SetConfig+0x21e>
 800b580:	4b6c      	ldr	r3, [pc, #432]	; (800b734 <UART_SetConfig+0x354>)
 800b582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b584:	23c0      	movs	r3, #192	; 0xc0
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	4013      	ands	r3, r2
 800b58a:	22c0      	movs	r2, #192	; 0xc0
 800b58c:	0112      	lsls	r2, r2, #4
 800b58e:	4293      	cmp	r3, r2
 800b590:	d027      	beq.n	800b5e2 <UART_SetConfig+0x202>
 800b592:	22c0      	movs	r2, #192	; 0xc0
 800b594:	0112      	lsls	r2, r2, #4
 800b596:	4293      	cmp	r3, r2
 800b598:	d82a      	bhi.n	800b5f0 <UART_SetConfig+0x210>
 800b59a:	2280      	movs	r2, #128	; 0x80
 800b59c:	0112      	lsls	r2, r2, #4
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d011      	beq.n	800b5c6 <UART_SetConfig+0x1e6>
 800b5a2:	2280      	movs	r2, #128	; 0x80
 800b5a4:	0112      	lsls	r2, r2, #4
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d822      	bhi.n	800b5f0 <UART_SetConfig+0x210>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d004      	beq.n	800b5b8 <UART_SetConfig+0x1d8>
 800b5ae:	2280      	movs	r2, #128	; 0x80
 800b5b0:	00d2      	lsls	r2, r2, #3
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d00e      	beq.n	800b5d4 <UART_SetConfig+0x1f4>
 800b5b6:	e01b      	b.n	800b5f0 <UART_SetConfig+0x210>
 800b5b8:	231b      	movs	r3, #27
 800b5ba:	2218      	movs	r2, #24
 800b5bc:	189b      	adds	r3, r3, r2
 800b5be:	19db      	adds	r3, r3, r7
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
 800b5c4:	e021      	b.n	800b60a <UART_SetConfig+0x22a>
 800b5c6:	231b      	movs	r3, #27
 800b5c8:	2218      	movs	r2, #24
 800b5ca:	189b      	adds	r3, r3, r2
 800b5cc:	19db      	adds	r3, r3, r7
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	e01a      	b.n	800b60a <UART_SetConfig+0x22a>
 800b5d4:	231b      	movs	r3, #27
 800b5d6:	2218      	movs	r2, #24
 800b5d8:	189b      	adds	r3, r3, r2
 800b5da:	19db      	adds	r3, r3, r7
 800b5dc:	2204      	movs	r2, #4
 800b5de:	701a      	strb	r2, [r3, #0]
 800b5e0:	e013      	b.n	800b60a <UART_SetConfig+0x22a>
 800b5e2:	231b      	movs	r3, #27
 800b5e4:	2218      	movs	r2, #24
 800b5e6:	189b      	adds	r3, r3, r2
 800b5e8:	19db      	adds	r3, r3, r7
 800b5ea:	2208      	movs	r2, #8
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	e00c      	b.n	800b60a <UART_SetConfig+0x22a>
 800b5f0:	231b      	movs	r3, #27
 800b5f2:	2218      	movs	r2, #24
 800b5f4:	189b      	adds	r3, r3, r2
 800b5f6:	19db      	adds	r3, r3, r7
 800b5f8:	2210      	movs	r2, #16
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	e005      	b.n	800b60a <UART_SetConfig+0x22a>
 800b5fe:	231b      	movs	r3, #27
 800b600:	2218      	movs	r2, #24
 800b602:	189b      	adds	r3, r3, r2
 800b604:	19db      	adds	r3, r3, r7
 800b606:	2210      	movs	r2, #16
 800b608:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a46      	ldr	r2, [pc, #280]	; (800b728 <UART_SetConfig+0x348>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d000      	beq.n	800b616 <UART_SetConfig+0x236>
 800b614:	e09a      	b.n	800b74c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b616:	231b      	movs	r3, #27
 800b618:	2218      	movs	r2, #24
 800b61a:	189b      	adds	r3, r3, r2
 800b61c:	19db      	adds	r3, r3, r7
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b08      	cmp	r3, #8
 800b622:	d01d      	beq.n	800b660 <UART_SetConfig+0x280>
 800b624:	dc20      	bgt.n	800b668 <UART_SetConfig+0x288>
 800b626:	2b04      	cmp	r3, #4
 800b628:	d015      	beq.n	800b656 <UART_SetConfig+0x276>
 800b62a:	dc1d      	bgt.n	800b668 <UART_SetConfig+0x288>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <UART_SetConfig+0x256>
 800b630:	2b02      	cmp	r3, #2
 800b632:	d005      	beq.n	800b640 <UART_SetConfig+0x260>
 800b634:	e018      	b.n	800b668 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b636:	f7ff faf1 	bl	800ac1c <HAL_RCC_GetPCLK1Freq>
 800b63a:	0003      	movs	r3, r0
 800b63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b63e:	e01c      	b.n	800b67a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b640:	4b3c      	ldr	r3, [pc, #240]	; (800b734 <UART_SetConfig+0x354>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2210      	movs	r2, #16
 800b646:	4013      	ands	r3, r2
 800b648:	d002      	beq.n	800b650 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b64a:	4b3e      	ldr	r3, [pc, #248]	; (800b744 <UART_SetConfig+0x364>)
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b64e:	e014      	b.n	800b67a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800b650:	4b3d      	ldr	r3, [pc, #244]	; (800b748 <UART_SetConfig+0x368>)
 800b652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b654:	e011      	b.n	800b67a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b656:	f7ff fa31 	bl	800aabc <HAL_RCC_GetSysClockFreq>
 800b65a:	0003      	movs	r3, r0
 800b65c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b65e:	e00c      	b.n	800b67a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b660:	2380      	movs	r3, #128	; 0x80
 800b662:	021b      	lsls	r3, r3, #8
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b666:	e008      	b.n	800b67a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800b668:	2300      	movs	r3, #0
 800b66a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b66c:	231a      	movs	r3, #26
 800b66e:	2218      	movs	r2, #24
 800b670:	189b      	adds	r3, r3, r2
 800b672:	19db      	adds	r3, r3, r7
 800b674:	2201      	movs	r2, #1
 800b676:	701a      	strb	r2, [r3, #0]
        break;
 800b678:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d100      	bne.n	800b682 <UART_SetConfig+0x2a2>
 800b680:	e134      	b.n	800b8ec <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	0013      	movs	r3, r2
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	189b      	adds	r3, r3, r2
 800b68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b68e:	429a      	cmp	r2, r3
 800b690:	d305      	bcc.n	800b69e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d906      	bls.n	800b6ac <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800b69e:	231a      	movs	r3, #26
 800b6a0:	2218      	movs	r2, #24
 800b6a2:	189b      	adds	r3, r3, r2
 800b6a4:	19db      	adds	r3, r3, r7
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	701a      	strb	r2, [r3, #0]
 800b6aa:	e11f      	b.n	800b8ec <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	613b      	str	r3, [r7, #16]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	6939      	ldr	r1, [r7, #16]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	000b      	movs	r3, r1
 800b6ba:	0e1b      	lsrs	r3, r3, #24
 800b6bc:	0010      	movs	r0, r2
 800b6be:	0205      	lsls	r5, r0, #8
 800b6c0:	431d      	orrs	r5, r3
 800b6c2:	000b      	movs	r3, r1
 800b6c4:	021c      	lsls	r4, r3, #8
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	60bb      	str	r3, [r7, #8]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	68b8      	ldr	r0, [r7, #8]
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	1900      	adds	r0, r0, r4
 800b6d8:	4169      	adcs	r1, r5
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	607b      	str	r3, [r7, #4]
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f7fc fe8e 	bl	8008408 <__aeabi_uldivmod>
 800b6ec:	0002      	movs	r2, r0
 800b6ee:	000b      	movs	r3, r1
 800b6f0:	0013      	movs	r3, r2
 800b6f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f6:	23c0      	movs	r3, #192	; 0xc0
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d309      	bcc.n	800b712 <UART_SetConfig+0x332>
 800b6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b700:	2380      	movs	r3, #128	; 0x80
 800b702:	035b      	lsls	r3, r3, #13
 800b704:	429a      	cmp	r2, r3
 800b706:	d204      	bcs.n	800b712 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70e:	60da      	str	r2, [r3, #12]
 800b710:	e0ec      	b.n	800b8ec <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800b712:	231a      	movs	r3, #26
 800b714:	2218      	movs	r2, #24
 800b716:	189b      	adds	r3, r3, r2
 800b718:	19db      	adds	r3, r3, r7
 800b71a:	2201      	movs	r2, #1
 800b71c:	701a      	strb	r2, [r3, #0]
 800b71e:	e0e5      	b.n	800b8ec <UART_SetConfig+0x50c>
 800b720:	efff69f3 	.word	0xefff69f3
 800b724:	ffffcfff 	.word	0xffffcfff
 800b728:	40004800 	.word	0x40004800
 800b72c:	fffff4ff 	.word	0xfffff4ff
 800b730:	40013800 	.word	0x40013800
 800b734:	40021000 	.word	0x40021000
 800b738:	40004400 	.word	0x40004400
 800b73c:	40004c00 	.word	0x40004c00
 800b740:	40005000 	.word	0x40005000
 800b744:	003d0900 	.word	0x003d0900
 800b748:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	69da      	ldr	r2, [r3, #28]
 800b750:	2380      	movs	r3, #128	; 0x80
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	429a      	cmp	r2, r3
 800b756:	d000      	beq.n	800b75a <UART_SetConfig+0x37a>
 800b758:	e071      	b.n	800b83e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800b75a:	231b      	movs	r3, #27
 800b75c:	2218      	movs	r2, #24
 800b75e:	189b      	adds	r3, r3, r2
 800b760:	19db      	adds	r3, r3, r7
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b08      	cmp	r3, #8
 800b766:	d822      	bhi.n	800b7ae <UART_SetConfig+0x3ce>
 800b768:	009a      	lsls	r2, r3, #2
 800b76a:	4b68      	ldr	r3, [pc, #416]	; (800b90c <UART_SetConfig+0x52c>)
 800b76c:	18d3      	adds	r3, r2, r3
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b772:	f7ff fa53 	bl	800ac1c <HAL_RCC_GetPCLK1Freq>
 800b776:	0003      	movs	r3, r0
 800b778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b77a:	e021      	b.n	800b7c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b77c:	f7ff fa64 	bl	800ac48 <HAL_RCC_GetPCLK2Freq>
 800b780:	0003      	movs	r3, r0
 800b782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b784:	e01c      	b.n	800b7c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b786:	4b62      	ldr	r3, [pc, #392]	; (800b910 <UART_SetConfig+0x530>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2210      	movs	r2, #16
 800b78c:	4013      	ands	r3, r2
 800b78e:	d002      	beq.n	800b796 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b790:	4b60      	ldr	r3, [pc, #384]	; (800b914 <UART_SetConfig+0x534>)
 800b792:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b794:	e014      	b.n	800b7c0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800b796:	4b60      	ldr	r3, [pc, #384]	; (800b918 <UART_SetConfig+0x538>)
 800b798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b79a:	e011      	b.n	800b7c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b79c:	f7ff f98e 	bl	800aabc <HAL_RCC_GetSysClockFreq>
 800b7a0:	0003      	movs	r3, r0
 800b7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7a4:	e00c      	b.n	800b7c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7a6:	2380      	movs	r3, #128	; 0x80
 800b7a8:	021b      	lsls	r3, r3, #8
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7ac:	e008      	b.n	800b7c0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b7b2:	231a      	movs	r3, #26
 800b7b4:	2218      	movs	r2, #24
 800b7b6:	189b      	adds	r3, r3, r2
 800b7b8:	19db      	adds	r3, r3, r7
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	701a      	strb	r2, [r3, #0]
        break;
 800b7be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d100      	bne.n	800b7c8 <UART_SetConfig+0x3e8>
 800b7c6:	e091      	b.n	800b8ec <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	005a      	lsls	r2, r3, #1
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	085b      	lsrs	r3, r3, #1
 800b7d2:	18d2      	adds	r2, r2, r3
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	0019      	movs	r1, r3
 800b7da:	0010      	movs	r0, r2
 800b7dc:	f7fc fc9e 	bl	800811c <__udivsi3>
 800b7e0:	0003      	movs	r3, r0
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e8:	2b0f      	cmp	r3, #15
 800b7ea:	d921      	bls.n	800b830 <UART_SetConfig+0x450>
 800b7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ee:	2380      	movs	r3, #128	; 0x80
 800b7f0:	025b      	lsls	r3, r3, #9
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d21c      	bcs.n	800b830 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	200e      	movs	r0, #14
 800b7fc:	2418      	movs	r4, #24
 800b7fe:	1903      	adds	r3, r0, r4
 800b800:	19db      	adds	r3, r3, r7
 800b802:	210f      	movs	r1, #15
 800b804:	438a      	bics	r2, r1
 800b806:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	085b      	lsrs	r3, r3, #1
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	2207      	movs	r2, #7
 800b810:	4013      	ands	r3, r2
 800b812:	b299      	uxth	r1, r3
 800b814:	1903      	adds	r3, r0, r4
 800b816:	19db      	adds	r3, r3, r7
 800b818:	1902      	adds	r2, r0, r4
 800b81a:	19d2      	adds	r2, r2, r7
 800b81c:	8812      	ldrh	r2, [r2, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	1902      	adds	r2, r0, r4
 800b828:	19d2      	adds	r2, r2, r7
 800b82a:	8812      	ldrh	r2, [r2, #0]
 800b82c:	60da      	str	r2, [r3, #12]
 800b82e:	e05d      	b.n	800b8ec <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800b830:	231a      	movs	r3, #26
 800b832:	2218      	movs	r2, #24
 800b834:	189b      	adds	r3, r3, r2
 800b836:	19db      	adds	r3, r3, r7
 800b838:	2201      	movs	r2, #1
 800b83a:	701a      	strb	r2, [r3, #0]
 800b83c:	e056      	b.n	800b8ec <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b83e:	231b      	movs	r3, #27
 800b840:	2218      	movs	r2, #24
 800b842:	189b      	adds	r3, r3, r2
 800b844:	19db      	adds	r3, r3, r7
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d822      	bhi.n	800b892 <UART_SetConfig+0x4b2>
 800b84c:	009a      	lsls	r2, r3, #2
 800b84e:	4b33      	ldr	r3, [pc, #204]	; (800b91c <UART_SetConfig+0x53c>)
 800b850:	18d3      	adds	r3, r2, r3
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b856:	f7ff f9e1 	bl	800ac1c <HAL_RCC_GetPCLK1Freq>
 800b85a:	0003      	movs	r3, r0
 800b85c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b85e:	e021      	b.n	800b8a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b860:	f7ff f9f2 	bl	800ac48 <HAL_RCC_GetPCLK2Freq>
 800b864:	0003      	movs	r3, r0
 800b866:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b868:	e01c      	b.n	800b8a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b86a:	4b29      	ldr	r3, [pc, #164]	; (800b910 <UART_SetConfig+0x530>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2210      	movs	r2, #16
 800b870:	4013      	ands	r3, r2
 800b872:	d002      	beq.n	800b87a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b874:	4b27      	ldr	r3, [pc, #156]	; (800b914 <UART_SetConfig+0x534>)
 800b876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b878:	e014      	b.n	800b8a4 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800b87a:	4b27      	ldr	r3, [pc, #156]	; (800b918 <UART_SetConfig+0x538>)
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b87e:	e011      	b.n	800b8a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b880:	f7ff f91c 	bl	800aabc <HAL_RCC_GetSysClockFreq>
 800b884:	0003      	movs	r3, r0
 800b886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b888:	e00c      	b.n	800b8a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b88a:	2380      	movs	r3, #128	; 0x80
 800b88c:	021b      	lsls	r3, r3, #8
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b890:	e008      	b.n	800b8a4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800b892:	2300      	movs	r3, #0
 800b894:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b896:	231a      	movs	r3, #26
 800b898:	2218      	movs	r2, #24
 800b89a:	189b      	adds	r3, r3, r2
 800b89c:	19db      	adds	r3, r3, r7
 800b89e:	2201      	movs	r2, #1
 800b8a0:	701a      	strb	r2, [r3, #0]
        break;
 800b8a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d020      	beq.n	800b8ec <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	085a      	lsrs	r2, r3, #1
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	18d2      	adds	r2, r2, r3
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	0019      	movs	r1, r3
 800b8ba:	0010      	movs	r0, r2
 800b8bc:	f7fc fc2e 	bl	800811c <__udivsi3>
 800b8c0:	0003      	movs	r3, r0
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c8:	2b0f      	cmp	r3, #15
 800b8ca:	d909      	bls.n	800b8e0 <UART_SetConfig+0x500>
 800b8cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ce:	2380      	movs	r3, #128	; 0x80
 800b8d0:	025b      	lsls	r3, r3, #9
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d204      	bcs.n	800b8e0 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8dc:	60da      	str	r2, [r3, #12]
 800b8de:	e005      	b.n	800b8ec <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800b8e0:	231a      	movs	r3, #26
 800b8e2:	2218      	movs	r2, #24
 800b8e4:	189b      	adds	r3, r3, r2
 800b8e6:	19db      	adds	r3, r3, r7
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b8f8:	231a      	movs	r3, #26
 800b8fa:	2218      	movs	r2, #24
 800b8fc:	189b      	adds	r3, r3, r2
 800b8fe:	19db      	adds	r3, r3, r7
 800b900:	781b      	ldrb	r3, [r3, #0]
}
 800b902:	0018      	movs	r0, r3
 800b904:	46bd      	mov	sp, r7
 800b906:	b00e      	add	sp, #56	; 0x38
 800b908:	bdb0      	pop	{r4, r5, r7, pc}
 800b90a:	46c0      	nop			; (mov r8, r8)
 800b90c:	0800d168 	.word	0x0800d168
 800b910:	40021000 	.word	0x40021000
 800b914:	003d0900 	.word	0x003d0900
 800b918:	00f42400 	.word	0x00f42400
 800b91c:	0800d18c 	.word	0x0800d18c

0800b920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	2201      	movs	r2, #1
 800b92e:	4013      	ands	r3, r2
 800b930:	d00b      	beq.n	800b94a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	4a4a      	ldr	r2, [pc, #296]	; (800ba64 <UART_AdvFeatureConfig+0x144>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	0019      	movs	r1, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	2202      	movs	r2, #2
 800b950:	4013      	ands	r3, r2
 800b952:	d00b      	beq.n	800b96c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	4a43      	ldr	r2, [pc, #268]	; (800ba68 <UART_AdvFeatureConfig+0x148>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	0019      	movs	r1, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	2204      	movs	r2, #4
 800b972:	4013      	ands	r3, r2
 800b974:	d00b      	beq.n	800b98e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	4a3b      	ldr	r2, [pc, #236]	; (800ba6c <UART_AdvFeatureConfig+0x14c>)
 800b97e:	4013      	ands	r3, r2
 800b980:	0019      	movs	r1, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	2208      	movs	r2, #8
 800b994:	4013      	ands	r3, r2
 800b996:	d00b      	beq.n	800b9b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	4a34      	ldr	r2, [pc, #208]	; (800ba70 <UART_AdvFeatureConfig+0x150>)
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	0019      	movs	r1, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	2210      	movs	r2, #16
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	d00b      	beq.n	800b9d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	4a2c      	ldr	r2, [pc, #176]	; (800ba74 <UART_AdvFeatureConfig+0x154>)
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	0019      	movs	r1, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	4013      	ands	r3, r2
 800b9da:	d00b      	beq.n	800b9f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	4a25      	ldr	r2, [pc, #148]	; (800ba78 <UART_AdvFeatureConfig+0x158>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	0019      	movs	r1, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2240      	movs	r2, #64	; 0x40
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	d01d      	beq.n	800ba3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	4a1d      	ldr	r2, [pc, #116]	; (800ba7c <UART_AdvFeatureConfig+0x15c>)
 800ba06:	4013      	ands	r3, r2
 800ba08:	0019      	movs	r1, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	430a      	orrs	r2, r1
 800ba14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba1a:	2380      	movs	r3, #128	; 0x80
 800ba1c:	035b      	lsls	r3, r3, #13
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d10b      	bne.n	800ba3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a15      	ldr	r2, [pc, #84]	; (800ba80 <UART_AdvFeatureConfig+0x160>)
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	0019      	movs	r1, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	430a      	orrs	r2, r1
 800ba38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3e:	2280      	movs	r2, #128	; 0x80
 800ba40:	4013      	ands	r3, r2
 800ba42:	d00b      	beq.n	800ba5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	4a0e      	ldr	r2, [pc, #56]	; (800ba84 <UART_AdvFeatureConfig+0x164>)
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	0019      	movs	r1, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	605a      	str	r2, [r3, #4]
  }
}
 800ba5c:	46c0      	nop			; (mov r8, r8)
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	b002      	add	sp, #8
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	fffdffff 	.word	0xfffdffff
 800ba68:	fffeffff 	.word	0xfffeffff
 800ba6c:	fffbffff 	.word	0xfffbffff
 800ba70:	ffff7fff 	.word	0xffff7fff
 800ba74:	ffffefff 	.word	0xffffefff
 800ba78:	ffffdfff 	.word	0xffffdfff
 800ba7c:	ffefffff 	.word	0xffefffff
 800ba80:	ff9fffff 	.word	0xff9fffff
 800ba84:	fff7ffff 	.word	0xfff7ffff

0800ba88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af02      	add	r7, sp, #8
 800ba8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2280      	movs	r2, #128	; 0x80
 800ba94:	2100      	movs	r1, #0
 800ba96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba98:	f7fe f87e 	bl	8009b98 <HAL_GetTick>
 800ba9c:	0003      	movs	r3, r0
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2208      	movs	r2, #8
 800baa8:	4013      	ands	r3, r2
 800baaa:	2b08      	cmp	r3, #8
 800baac:	d10c      	bne.n	800bac8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2280      	movs	r2, #128	; 0x80
 800bab2:	0391      	lsls	r1, r2, #14
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	4a17      	ldr	r2, [pc, #92]	; (800bb14 <UART_CheckIdleState+0x8c>)
 800bab8:	9200      	str	r2, [sp, #0]
 800baba:	2200      	movs	r2, #0
 800babc:	f000 f82c 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800bac0:	1e03      	subs	r3, r0, #0
 800bac2:	d001      	beq.n	800bac8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e021      	b.n	800bb0c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2204      	movs	r2, #4
 800bad0:	4013      	ands	r3, r2
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	d10c      	bne.n	800baf0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2280      	movs	r2, #128	; 0x80
 800bada:	03d1      	lsls	r1, r2, #15
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	4a0d      	ldr	r2, [pc, #52]	; (800bb14 <UART_CheckIdleState+0x8c>)
 800bae0:	9200      	str	r2, [sp, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f000 f818 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800bae8:	1e03      	subs	r3, r0, #0
 800baea:	d001      	beq.n	800baf0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baec:	2303      	movs	r3, #3
 800baee:	e00d      	b.n	800bb0c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2220      	movs	r2, #32
 800baf4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2220      	movs	r2, #32
 800bafa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2274      	movs	r2, #116	; 0x74
 800bb06:	2100      	movs	r1, #0
 800bb08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	b004      	add	sp, #16
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	01ffffff 	.word	0x01ffffff

0800bb18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b094      	sub	sp, #80	; 0x50
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	1dfb      	adds	r3, r7, #7
 800bb26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb28:	e0a3      	b.n	800bc72 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	d100      	bne.n	800bb32 <UART_WaitOnFlagUntilTimeout+0x1a>
 800bb30:	e09f      	b.n	800bc72 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb32:	f7fe f831 	bl	8009b98 <HAL_GetTick>
 800bb36:	0002      	movs	r2, r0
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d302      	bcc.n	800bb48 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d13d      	bne.n	800bbc4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb48:	f3ef 8310 	mrs	r3, PRIMASK
 800bb4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb50:	647b      	str	r3, [r7, #68]	; 0x44
 800bb52:	2301      	movs	r3, #1
 800bb54:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	f383 8810 	msr	PRIMASK, r3
}
 800bb5c:	46c0      	nop			; (mov r8, r8)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	494c      	ldr	r1, [pc, #304]	; (800bc9c <UART_WaitOnFlagUntilTimeout+0x184>)
 800bb6a:	400a      	ands	r2, r1
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb70:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	f383 8810 	msr	PRIMASK, r3
}
 800bb78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb7a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800bb80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb82:	643b      	str	r3, [r7, #64]	; 0x40
 800bb84:	2301      	movs	r3, #1
 800bb86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8a:	f383 8810 	msr	PRIMASK, r3
}
 800bb8e:	46c0      	nop			; (mov r8, r8)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	689a      	ldr	r2, [r3, #8]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	438a      	bics	r2, r1
 800bb9e:	609a      	str	r2, [r3, #8]
 800bba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba6:	f383 8810 	msr	PRIMASK, r3
}
 800bbaa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2274      	movs	r2, #116	; 0x74
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e067      	b.n	800bc94 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2204      	movs	r2, #4
 800bbcc:	4013      	ands	r3, r2
 800bbce:	d050      	beq.n	800bc72 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	69da      	ldr	r2, [r3, #28]
 800bbd6:	2380      	movs	r3, #128	; 0x80
 800bbd8:	011b      	lsls	r3, r3, #4
 800bbda:	401a      	ands	r2, r3
 800bbdc:	2380      	movs	r3, #128	; 0x80
 800bbde:	011b      	lsls	r3, r3, #4
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d146      	bne.n	800bc72 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2280      	movs	r2, #128	; 0x80
 800bbea:	0112      	lsls	r2, r2, #4
 800bbec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbee:	f3ef 8310 	mrs	r3, PRIMASK
 800bbf2:	613b      	str	r3, [r7, #16]
  return(result);
 800bbf4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f383 8810 	msr	PRIMASK, r3
}
 800bc02:	46c0      	nop			; (mov r8, r8)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4923      	ldr	r1, [pc, #140]	; (800bc9c <UART_WaitOnFlagUntilTimeout+0x184>)
 800bc10:	400a      	ands	r2, r1
 800bc12:	601a      	str	r2, [r3, #0]
 800bc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	f383 8810 	msr	PRIMASK, r3
}
 800bc1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc20:	f3ef 8310 	mrs	r3, PRIMASK
 800bc24:	61fb      	str	r3, [r7, #28]
  return(result);
 800bc26:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc28:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	f383 8810 	msr	PRIMASK, r3
}
 800bc34:	46c0      	nop			; (mov r8, r8)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2101      	movs	r1, #1
 800bc42:	438a      	bics	r2, r1
 800bc44:	609a      	str	r2, [r3, #8]
 800bc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4c:	f383 8810 	msr	PRIMASK, r3
}
 800bc50:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2220      	movs	r2, #32
 800bc56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2280      	movs	r2, #128	; 0x80
 800bc62:	2120      	movs	r1, #32
 800bc64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2274      	movs	r2, #116	; 0x74
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	e010      	b.n	800bc94 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	425a      	negs	r2, r3
 800bc82:	4153      	adcs	r3, r2
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	001a      	movs	r2, r3
 800bc88:	1dfb      	adds	r3, r7, #7
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d100      	bne.n	800bc92 <UART_WaitOnFlagUntilTimeout+0x17a>
 800bc90:	e74b      	b.n	800bb2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	0018      	movs	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b014      	add	sp, #80	; 0x50
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	fffffe5f 	.word	0xfffffe5f

0800bca0 <__errno>:
 800bca0:	4b01      	ldr	r3, [pc, #4]	; (800bca8 <__errno+0x8>)
 800bca2:	6818      	ldr	r0, [r3, #0]
 800bca4:	4770      	bx	lr
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	20000018 	.word	0x20000018

0800bcac <__libc_init_array>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	2600      	movs	r6, #0
 800bcb0:	4d0c      	ldr	r5, [pc, #48]	; (800bce4 <__libc_init_array+0x38>)
 800bcb2:	4c0d      	ldr	r4, [pc, #52]	; (800bce8 <__libc_init_array+0x3c>)
 800bcb4:	1b64      	subs	r4, r4, r5
 800bcb6:	10a4      	asrs	r4, r4, #2
 800bcb8:	42a6      	cmp	r6, r4
 800bcba:	d109      	bne.n	800bcd0 <__libc_init_array+0x24>
 800bcbc:	2600      	movs	r6, #0
 800bcbe:	f001 f903 	bl	800cec8 <_init>
 800bcc2:	4d0a      	ldr	r5, [pc, #40]	; (800bcec <__libc_init_array+0x40>)
 800bcc4:	4c0a      	ldr	r4, [pc, #40]	; (800bcf0 <__libc_init_array+0x44>)
 800bcc6:	1b64      	subs	r4, r4, r5
 800bcc8:	10a4      	asrs	r4, r4, #2
 800bcca:	42a6      	cmp	r6, r4
 800bccc:	d105      	bne.n	800bcda <__libc_init_array+0x2e>
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	00b3      	lsls	r3, r6, #2
 800bcd2:	58eb      	ldr	r3, [r5, r3]
 800bcd4:	4798      	blx	r3
 800bcd6:	3601      	adds	r6, #1
 800bcd8:	e7ee      	b.n	800bcb8 <__libc_init_array+0xc>
 800bcda:	00b3      	lsls	r3, r6, #2
 800bcdc:	58eb      	ldr	r3, [r5, r3]
 800bcde:	4798      	blx	r3
 800bce0:	3601      	adds	r6, #1
 800bce2:	e7f2      	b.n	800bcca <__libc_init_array+0x1e>
 800bce4:	0800d324 	.word	0x0800d324
 800bce8:	0800d324 	.word	0x0800d324
 800bcec:	0800d324 	.word	0x0800d324
 800bcf0:	0800d328 	.word	0x0800d328

0800bcf4 <__itoa>:
 800bcf4:	1e93      	subs	r3, r2, #2
 800bcf6:	b510      	push	{r4, lr}
 800bcf8:	000c      	movs	r4, r1
 800bcfa:	2b22      	cmp	r3, #34	; 0x22
 800bcfc:	d904      	bls.n	800bd08 <__itoa+0x14>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	001c      	movs	r4, r3
 800bd02:	700b      	strb	r3, [r1, #0]
 800bd04:	0020      	movs	r0, r4
 800bd06:	bd10      	pop	{r4, pc}
 800bd08:	2a0a      	cmp	r2, #10
 800bd0a:	d109      	bne.n	800bd20 <__itoa+0x2c>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	da07      	bge.n	800bd20 <__itoa+0x2c>
 800bd10:	232d      	movs	r3, #45	; 0x2d
 800bd12:	700b      	strb	r3, [r1, #0]
 800bd14:	2101      	movs	r1, #1
 800bd16:	4240      	negs	r0, r0
 800bd18:	1861      	adds	r1, r4, r1
 800bd1a:	f000 f84d 	bl	800bdb8 <__utoa>
 800bd1e:	e7f1      	b.n	800bd04 <__itoa+0x10>
 800bd20:	2100      	movs	r1, #0
 800bd22:	e7f9      	b.n	800bd18 <__itoa+0x24>

0800bd24 <itoa>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	f7ff ffe5 	bl	800bcf4 <__itoa>
 800bd2a:	bd10      	pop	{r4, pc}

0800bd2c <memset>:
 800bd2c:	0003      	movs	r3, r0
 800bd2e:	1882      	adds	r2, r0, r2
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d100      	bne.n	800bd36 <memset+0xa>
 800bd34:	4770      	bx	lr
 800bd36:	7019      	strb	r1, [r3, #0]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	e7f9      	b.n	800bd30 <memset+0x4>

0800bd3c <rand>:
 800bd3c:	4b16      	ldr	r3, [pc, #88]	; (800bd98 <rand+0x5c>)
 800bd3e:	b510      	push	{r4, lr}
 800bd40:	681c      	ldr	r4, [r3, #0]
 800bd42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d116      	bne.n	800bd76 <rand+0x3a>
 800bd48:	2018      	movs	r0, #24
 800bd4a:	f000 f899 	bl	800be80 <malloc>
 800bd4e:	1e02      	subs	r2, r0, #0
 800bd50:	63a0      	str	r0, [r4, #56]	; 0x38
 800bd52:	d104      	bne.n	800bd5e <rand+0x22>
 800bd54:	214e      	movs	r1, #78	; 0x4e
 800bd56:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <rand+0x60>)
 800bd58:	4811      	ldr	r0, [pc, #68]	; (800bda0 <rand+0x64>)
 800bd5a:	f000 f863 	bl	800be24 <__assert_func>
 800bd5e:	4b11      	ldr	r3, [pc, #68]	; (800bda4 <rand+0x68>)
 800bd60:	2100      	movs	r1, #0
 800bd62:	6003      	str	r3, [r0, #0]
 800bd64:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <rand+0x6c>)
 800bd66:	6043      	str	r3, [r0, #4]
 800bd68:	4b10      	ldr	r3, [pc, #64]	; (800bdac <rand+0x70>)
 800bd6a:	6083      	str	r3, [r0, #8]
 800bd6c:	230b      	movs	r3, #11
 800bd6e:	8183      	strh	r3, [r0, #12]
 800bd70:	2001      	movs	r0, #1
 800bd72:	6110      	str	r0, [r2, #16]
 800bd74:	6151      	str	r1, [r2, #20]
 800bd76:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800bd78:	4a0d      	ldr	r2, [pc, #52]	; (800bdb0 <rand+0x74>)
 800bd7a:	6920      	ldr	r0, [r4, #16]
 800bd7c:	6961      	ldr	r1, [r4, #20]
 800bd7e:	4b0d      	ldr	r3, [pc, #52]	; (800bdb4 <rand+0x78>)
 800bd80:	f7fc fb62 	bl	8008448 <__aeabi_lmul>
 800bd84:	2201      	movs	r2, #1
 800bd86:	2300      	movs	r3, #0
 800bd88:	1880      	adds	r0, r0, r2
 800bd8a:	4159      	adcs	r1, r3
 800bd8c:	6120      	str	r0, [r4, #16]
 800bd8e:	6161      	str	r1, [r4, #20]
 800bd90:	0048      	lsls	r0, r1, #1
 800bd92:	0840      	lsrs	r0, r0, #1
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	46c0      	nop			; (mov r8, r8)
 800bd98:	20000018 	.word	0x20000018
 800bd9c:	0800d1b4 	.word	0x0800d1b4
 800bda0:	0800d1cb 	.word	0x0800d1cb
 800bda4:	abcd330e 	.word	0xabcd330e
 800bda8:	e66d1234 	.word	0xe66d1234
 800bdac:	0005deec 	.word	0x0005deec
 800bdb0:	4c957f2d 	.word	0x4c957f2d
 800bdb4:	5851f42d 	.word	0x5851f42d

0800bdb8 <__utoa>:
 800bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdba:	000c      	movs	r4, r1
 800bdbc:	0016      	movs	r6, r2
 800bdbe:	b08d      	sub	sp, #52	; 0x34
 800bdc0:	2225      	movs	r2, #37	; 0x25
 800bdc2:	0007      	movs	r7, r0
 800bdc4:	4916      	ldr	r1, [pc, #88]	; (800be20 <__utoa+0x68>)
 800bdc6:	a802      	add	r0, sp, #8
 800bdc8:	f000 f864 	bl	800be94 <memcpy>
 800bdcc:	1e62      	subs	r2, r4, #1
 800bdce:	9200      	str	r2, [sp, #0]
 800bdd0:	1eb3      	subs	r3, r6, #2
 800bdd2:	aa02      	add	r2, sp, #8
 800bdd4:	2500      	movs	r5, #0
 800bdd6:	9201      	str	r2, [sp, #4]
 800bdd8:	2b22      	cmp	r3, #34	; 0x22
 800bdda:	d904      	bls.n	800bde6 <__utoa+0x2e>
 800bddc:	7025      	strb	r5, [r4, #0]
 800bdde:	002c      	movs	r4, r5
 800bde0:	0020      	movs	r0, r4
 800bde2:	b00d      	add	sp, #52	; 0x34
 800bde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde6:	0038      	movs	r0, r7
 800bde8:	0031      	movs	r1, r6
 800bdea:	f7fc fa1d 	bl	8008228 <__aeabi_uidivmod>
 800bdee:	000b      	movs	r3, r1
 800bdf0:	9a01      	ldr	r2, [sp, #4]
 800bdf2:	0029      	movs	r1, r5
 800bdf4:	5cd3      	ldrb	r3, [r2, r3]
 800bdf6:	9a00      	ldr	r2, [sp, #0]
 800bdf8:	3501      	adds	r5, #1
 800bdfa:	5553      	strb	r3, [r2, r5]
 800bdfc:	003b      	movs	r3, r7
 800bdfe:	0007      	movs	r7, r0
 800be00:	429e      	cmp	r6, r3
 800be02:	d9f0      	bls.n	800bde6 <__utoa+0x2e>
 800be04:	2300      	movs	r3, #0
 800be06:	0022      	movs	r2, r4
 800be08:	5563      	strb	r3, [r4, r5]
 800be0a:	000b      	movs	r3, r1
 800be0c:	1ac8      	subs	r0, r1, r3
 800be0e:	4283      	cmp	r3, r0
 800be10:	dde6      	ble.n	800bde0 <__utoa+0x28>
 800be12:	7810      	ldrb	r0, [r2, #0]
 800be14:	5ce5      	ldrb	r5, [r4, r3]
 800be16:	7015      	strb	r5, [r2, #0]
 800be18:	54e0      	strb	r0, [r4, r3]
 800be1a:	3201      	adds	r2, #1
 800be1c:	3b01      	subs	r3, #1
 800be1e:	e7f5      	b.n	800be0c <__utoa+0x54>
 800be20:	0800d226 	.word	0x0800d226

0800be24 <__assert_func>:
 800be24:	b530      	push	{r4, r5, lr}
 800be26:	0014      	movs	r4, r2
 800be28:	001a      	movs	r2, r3
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <__assert_func+0x2c>)
 800be2c:	0005      	movs	r5, r0
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	b085      	sub	sp, #20
 800be32:	68d8      	ldr	r0, [r3, #12]
 800be34:	4b07      	ldr	r3, [pc, #28]	; (800be54 <__assert_func+0x30>)
 800be36:	2c00      	cmp	r4, #0
 800be38:	d101      	bne.n	800be3e <__assert_func+0x1a>
 800be3a:	4b07      	ldr	r3, [pc, #28]	; (800be58 <__assert_func+0x34>)
 800be3c:	001c      	movs	r4, r3
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	9100      	str	r1, [sp, #0]
 800be42:	002b      	movs	r3, r5
 800be44:	4905      	ldr	r1, [pc, #20]	; (800be5c <__assert_func+0x38>)
 800be46:	9402      	str	r4, [sp, #8]
 800be48:	f000 f80a 	bl	800be60 <fiprintf>
 800be4c:	f000 fcd2 	bl	800c7f4 <abort>
 800be50:	20000018 	.word	0x20000018
 800be54:	0800d24b 	.word	0x0800d24b
 800be58:	0800d286 	.word	0x0800d286
 800be5c:	0800d258 	.word	0x0800d258

0800be60 <fiprintf>:
 800be60:	b40e      	push	{r1, r2, r3}
 800be62:	b503      	push	{r0, r1, lr}
 800be64:	0001      	movs	r1, r0
 800be66:	ab03      	add	r3, sp, #12
 800be68:	4804      	ldr	r0, [pc, #16]	; (800be7c <fiprintf+0x1c>)
 800be6a:	cb04      	ldmia	r3!, {r2}
 800be6c:	6800      	ldr	r0, [r0, #0]
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	f000 f924 	bl	800c0bc <_vfiprintf_r>
 800be74:	b002      	add	sp, #8
 800be76:	bc08      	pop	{r3}
 800be78:	b003      	add	sp, #12
 800be7a:	4718      	bx	r3
 800be7c:	20000018 	.word	0x20000018

0800be80 <malloc>:
 800be80:	b510      	push	{r4, lr}
 800be82:	4b03      	ldr	r3, [pc, #12]	; (800be90 <malloc+0x10>)
 800be84:	0001      	movs	r1, r0
 800be86:	6818      	ldr	r0, [r3, #0]
 800be88:	f000 f87a 	bl	800bf80 <_malloc_r>
 800be8c:	bd10      	pop	{r4, pc}
 800be8e:	46c0      	nop			; (mov r8, r8)
 800be90:	20000018 	.word	0x20000018

0800be94 <memcpy>:
 800be94:	2300      	movs	r3, #0
 800be96:	b510      	push	{r4, lr}
 800be98:	429a      	cmp	r2, r3
 800be9a:	d100      	bne.n	800be9e <memcpy+0xa>
 800be9c:	bd10      	pop	{r4, pc}
 800be9e:	5ccc      	ldrb	r4, [r1, r3]
 800bea0:	54c4      	strb	r4, [r0, r3]
 800bea2:	3301      	adds	r3, #1
 800bea4:	e7f8      	b.n	800be98 <memcpy+0x4>
	...

0800bea8 <_free_r>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	0005      	movs	r5, r0
 800beac:	2900      	cmp	r1, #0
 800beae:	d010      	beq.n	800bed2 <_free_r+0x2a>
 800beb0:	1f0c      	subs	r4, r1, #4
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da00      	bge.n	800beba <_free_r+0x12>
 800beb8:	18e4      	adds	r4, r4, r3
 800beba:	0028      	movs	r0, r5
 800bebc:	f000 feec 	bl	800cc98 <__malloc_lock>
 800bec0:	4a1d      	ldr	r2, [pc, #116]	; (800bf38 <_free_r+0x90>)
 800bec2:	6813      	ldr	r3, [r2, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d105      	bne.n	800bed4 <_free_r+0x2c>
 800bec8:	6063      	str	r3, [r4, #4]
 800beca:	6014      	str	r4, [r2, #0]
 800becc:	0028      	movs	r0, r5
 800bece:	f000 feeb 	bl	800cca8 <__malloc_unlock>
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	42a3      	cmp	r3, r4
 800bed6:	d908      	bls.n	800beea <_free_r+0x42>
 800bed8:	6821      	ldr	r1, [r4, #0]
 800beda:	1860      	adds	r0, r4, r1
 800bedc:	4283      	cmp	r3, r0
 800bede:	d1f3      	bne.n	800bec8 <_free_r+0x20>
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	1841      	adds	r1, r0, r1
 800bee6:	6021      	str	r1, [r4, #0]
 800bee8:	e7ee      	b.n	800bec8 <_free_r+0x20>
 800beea:	001a      	movs	r2, r3
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <_free_r+0x4e>
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	d9f9      	bls.n	800beea <_free_r+0x42>
 800bef6:	6811      	ldr	r1, [r2, #0]
 800bef8:	1850      	adds	r0, r2, r1
 800befa:	42a0      	cmp	r0, r4
 800befc:	d10b      	bne.n	800bf16 <_free_r+0x6e>
 800befe:	6820      	ldr	r0, [r4, #0]
 800bf00:	1809      	adds	r1, r1, r0
 800bf02:	1850      	adds	r0, r2, r1
 800bf04:	6011      	str	r1, [r2, #0]
 800bf06:	4283      	cmp	r3, r0
 800bf08:	d1e0      	bne.n	800becc <_free_r+0x24>
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	1841      	adds	r1, r0, r1
 800bf10:	6011      	str	r1, [r2, #0]
 800bf12:	6053      	str	r3, [r2, #4]
 800bf14:	e7da      	b.n	800becc <_free_r+0x24>
 800bf16:	42a0      	cmp	r0, r4
 800bf18:	d902      	bls.n	800bf20 <_free_r+0x78>
 800bf1a:	230c      	movs	r3, #12
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	e7d5      	b.n	800becc <_free_r+0x24>
 800bf20:	6821      	ldr	r1, [r4, #0]
 800bf22:	1860      	adds	r0, r4, r1
 800bf24:	4283      	cmp	r3, r0
 800bf26:	d103      	bne.n	800bf30 <_free_r+0x88>
 800bf28:	6818      	ldr	r0, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	1841      	adds	r1, r0, r1
 800bf2e:	6021      	str	r1, [r4, #0]
 800bf30:	6063      	str	r3, [r4, #4]
 800bf32:	6054      	str	r4, [r2, #4]
 800bf34:	e7ca      	b.n	800becc <_free_r+0x24>
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	20000458 	.word	0x20000458

0800bf3c <sbrk_aligned>:
 800bf3c:	b570      	push	{r4, r5, r6, lr}
 800bf3e:	4e0f      	ldr	r6, [pc, #60]	; (800bf7c <sbrk_aligned+0x40>)
 800bf40:	000d      	movs	r5, r1
 800bf42:	6831      	ldr	r1, [r6, #0]
 800bf44:	0004      	movs	r4, r0
 800bf46:	2900      	cmp	r1, #0
 800bf48:	d102      	bne.n	800bf50 <sbrk_aligned+0x14>
 800bf4a:	f000 fb73 	bl	800c634 <_sbrk_r>
 800bf4e:	6030      	str	r0, [r6, #0]
 800bf50:	0029      	movs	r1, r5
 800bf52:	0020      	movs	r0, r4
 800bf54:	f000 fb6e 	bl	800c634 <_sbrk_r>
 800bf58:	1c43      	adds	r3, r0, #1
 800bf5a:	d00a      	beq.n	800bf72 <sbrk_aligned+0x36>
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	1cc5      	adds	r5, r0, #3
 800bf60:	439d      	bics	r5, r3
 800bf62:	42a8      	cmp	r0, r5
 800bf64:	d007      	beq.n	800bf76 <sbrk_aligned+0x3a>
 800bf66:	1a29      	subs	r1, r5, r0
 800bf68:	0020      	movs	r0, r4
 800bf6a:	f000 fb63 	bl	800c634 <_sbrk_r>
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	d101      	bne.n	800bf76 <sbrk_aligned+0x3a>
 800bf72:	2501      	movs	r5, #1
 800bf74:	426d      	negs	r5, r5
 800bf76:	0028      	movs	r0, r5
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	2000045c 	.word	0x2000045c

0800bf80 <_malloc_r>:
 800bf80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf82:	2203      	movs	r2, #3
 800bf84:	1ccb      	adds	r3, r1, #3
 800bf86:	4393      	bics	r3, r2
 800bf88:	3308      	adds	r3, #8
 800bf8a:	0006      	movs	r6, r0
 800bf8c:	001f      	movs	r7, r3
 800bf8e:	2b0c      	cmp	r3, #12
 800bf90:	d232      	bcs.n	800bff8 <_malloc_r+0x78>
 800bf92:	270c      	movs	r7, #12
 800bf94:	42b9      	cmp	r1, r7
 800bf96:	d831      	bhi.n	800bffc <_malloc_r+0x7c>
 800bf98:	0030      	movs	r0, r6
 800bf9a:	f000 fe7d 	bl	800cc98 <__malloc_lock>
 800bf9e:	4d32      	ldr	r5, [pc, #200]	; (800c068 <_malloc_r+0xe8>)
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	001c      	movs	r4, r3
 800bfa4:	2c00      	cmp	r4, #0
 800bfa6:	d12e      	bne.n	800c006 <_malloc_r+0x86>
 800bfa8:	0039      	movs	r1, r7
 800bfaa:	0030      	movs	r0, r6
 800bfac:	f7ff ffc6 	bl	800bf3c <sbrk_aligned>
 800bfb0:	0004      	movs	r4, r0
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d11e      	bne.n	800bff4 <_malloc_r+0x74>
 800bfb6:	682c      	ldr	r4, [r5, #0]
 800bfb8:	0025      	movs	r5, r4
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	d14a      	bne.n	800c054 <_malloc_r+0xd4>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	0029      	movs	r1, r5
 800bfc2:	18e3      	adds	r3, r4, r3
 800bfc4:	0030      	movs	r0, r6
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	f000 fb34 	bl	800c634 <_sbrk_r>
 800bfcc:	9b01      	ldr	r3, [sp, #4]
 800bfce:	4283      	cmp	r3, r0
 800bfd0:	d143      	bne.n	800c05a <_malloc_r+0xda>
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	3703      	adds	r7, #3
 800bfd6:	1aff      	subs	r7, r7, r3
 800bfd8:	2303      	movs	r3, #3
 800bfda:	439f      	bics	r7, r3
 800bfdc:	3708      	adds	r7, #8
 800bfde:	2f0c      	cmp	r7, #12
 800bfe0:	d200      	bcs.n	800bfe4 <_malloc_r+0x64>
 800bfe2:	270c      	movs	r7, #12
 800bfe4:	0039      	movs	r1, r7
 800bfe6:	0030      	movs	r0, r6
 800bfe8:	f7ff ffa8 	bl	800bf3c <sbrk_aligned>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d034      	beq.n	800c05a <_malloc_r+0xda>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	19df      	adds	r7, r3, r7
 800bff4:	6027      	str	r7, [r4, #0]
 800bff6:	e013      	b.n	800c020 <_malloc_r+0xa0>
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dacb      	bge.n	800bf94 <_malloc_r+0x14>
 800bffc:	230c      	movs	r3, #12
 800bffe:	2500      	movs	r5, #0
 800c000:	6033      	str	r3, [r6, #0]
 800c002:	0028      	movs	r0, r5
 800c004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c006:	6822      	ldr	r2, [r4, #0]
 800c008:	1bd1      	subs	r1, r2, r7
 800c00a:	d420      	bmi.n	800c04e <_malloc_r+0xce>
 800c00c:	290b      	cmp	r1, #11
 800c00e:	d917      	bls.n	800c040 <_malloc_r+0xc0>
 800c010:	19e2      	adds	r2, r4, r7
 800c012:	6027      	str	r7, [r4, #0]
 800c014:	42a3      	cmp	r3, r4
 800c016:	d111      	bne.n	800c03c <_malloc_r+0xbc>
 800c018:	602a      	str	r2, [r5, #0]
 800c01a:	6863      	ldr	r3, [r4, #4]
 800c01c:	6011      	str	r1, [r2, #0]
 800c01e:	6053      	str	r3, [r2, #4]
 800c020:	0030      	movs	r0, r6
 800c022:	0025      	movs	r5, r4
 800c024:	f000 fe40 	bl	800cca8 <__malloc_unlock>
 800c028:	2207      	movs	r2, #7
 800c02a:	350b      	adds	r5, #11
 800c02c:	1d23      	adds	r3, r4, #4
 800c02e:	4395      	bics	r5, r2
 800c030:	1aea      	subs	r2, r5, r3
 800c032:	429d      	cmp	r5, r3
 800c034:	d0e5      	beq.n	800c002 <_malloc_r+0x82>
 800c036:	1b5b      	subs	r3, r3, r5
 800c038:	50a3      	str	r3, [r4, r2]
 800c03a:	e7e2      	b.n	800c002 <_malloc_r+0x82>
 800c03c:	605a      	str	r2, [r3, #4]
 800c03e:	e7ec      	b.n	800c01a <_malloc_r+0x9a>
 800c040:	6862      	ldr	r2, [r4, #4]
 800c042:	42a3      	cmp	r3, r4
 800c044:	d101      	bne.n	800c04a <_malloc_r+0xca>
 800c046:	602a      	str	r2, [r5, #0]
 800c048:	e7ea      	b.n	800c020 <_malloc_r+0xa0>
 800c04a:	605a      	str	r2, [r3, #4]
 800c04c:	e7e8      	b.n	800c020 <_malloc_r+0xa0>
 800c04e:	0023      	movs	r3, r4
 800c050:	6864      	ldr	r4, [r4, #4]
 800c052:	e7a7      	b.n	800bfa4 <_malloc_r+0x24>
 800c054:	002c      	movs	r4, r5
 800c056:	686d      	ldr	r5, [r5, #4]
 800c058:	e7af      	b.n	800bfba <_malloc_r+0x3a>
 800c05a:	230c      	movs	r3, #12
 800c05c:	0030      	movs	r0, r6
 800c05e:	6033      	str	r3, [r6, #0]
 800c060:	f000 fe22 	bl	800cca8 <__malloc_unlock>
 800c064:	e7cd      	b.n	800c002 <_malloc_r+0x82>
 800c066:	46c0      	nop			; (mov r8, r8)
 800c068:	20000458 	.word	0x20000458

0800c06c <__sfputc_r>:
 800c06c:	6893      	ldr	r3, [r2, #8]
 800c06e:	b510      	push	{r4, lr}
 800c070:	3b01      	subs	r3, #1
 800c072:	6093      	str	r3, [r2, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	da04      	bge.n	800c082 <__sfputc_r+0x16>
 800c078:	6994      	ldr	r4, [r2, #24]
 800c07a:	42a3      	cmp	r3, r4
 800c07c:	db07      	blt.n	800c08e <__sfputc_r+0x22>
 800c07e:	290a      	cmp	r1, #10
 800c080:	d005      	beq.n	800c08e <__sfputc_r+0x22>
 800c082:	6813      	ldr	r3, [r2, #0]
 800c084:	1c58      	adds	r0, r3, #1
 800c086:	6010      	str	r0, [r2, #0]
 800c088:	7019      	strb	r1, [r3, #0]
 800c08a:	0008      	movs	r0, r1
 800c08c:	bd10      	pop	{r4, pc}
 800c08e:	f000 fae3 	bl	800c658 <__swbuf_r>
 800c092:	0001      	movs	r1, r0
 800c094:	e7f9      	b.n	800c08a <__sfputc_r+0x1e>

0800c096 <__sfputs_r>:
 800c096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c098:	0006      	movs	r6, r0
 800c09a:	000f      	movs	r7, r1
 800c09c:	0014      	movs	r4, r2
 800c09e:	18d5      	adds	r5, r2, r3
 800c0a0:	42ac      	cmp	r4, r5
 800c0a2:	d101      	bne.n	800c0a8 <__sfputs_r+0x12>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	e007      	b.n	800c0b8 <__sfputs_r+0x22>
 800c0a8:	7821      	ldrb	r1, [r4, #0]
 800c0aa:	003a      	movs	r2, r7
 800c0ac:	0030      	movs	r0, r6
 800c0ae:	f7ff ffdd 	bl	800c06c <__sfputc_r>
 800c0b2:	3401      	adds	r4, #1
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d1f3      	bne.n	800c0a0 <__sfputs_r+0xa>
 800c0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0bc <_vfiprintf_r>:
 800c0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0be:	b0a1      	sub	sp, #132	; 0x84
 800c0c0:	0006      	movs	r6, r0
 800c0c2:	000c      	movs	r4, r1
 800c0c4:	001f      	movs	r7, r3
 800c0c6:	9203      	str	r2, [sp, #12]
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d004      	beq.n	800c0d6 <_vfiprintf_r+0x1a>
 800c0cc:	6983      	ldr	r3, [r0, #24]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <_vfiprintf_r+0x1a>
 800c0d2:	f000 fcc5 	bl	800ca60 <__sinit>
 800c0d6:	4b8e      	ldr	r3, [pc, #568]	; (800c310 <_vfiprintf_r+0x254>)
 800c0d8:	429c      	cmp	r4, r3
 800c0da:	d11c      	bne.n	800c116 <_vfiprintf_r+0x5a>
 800c0dc:	6874      	ldr	r4, [r6, #4]
 800c0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0e0:	07db      	lsls	r3, r3, #31
 800c0e2:	d405      	bmi.n	800c0f0 <_vfiprintf_r+0x34>
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	059b      	lsls	r3, r3, #22
 800c0e8:	d402      	bmi.n	800c0f0 <_vfiprintf_r+0x34>
 800c0ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ec:	f000 fd59 	bl	800cba2 <__retarget_lock_acquire_recursive>
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	071b      	lsls	r3, r3, #28
 800c0f4:	d502      	bpl.n	800c0fc <_vfiprintf_r+0x40>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d11d      	bne.n	800c138 <_vfiprintf_r+0x7c>
 800c0fc:	0021      	movs	r1, r4
 800c0fe:	0030      	movs	r0, r6
 800c100:	f000 fb00 	bl	800c704 <__swsetup_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	d017      	beq.n	800c138 <_vfiprintf_r+0x7c>
 800c108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c10a:	07db      	lsls	r3, r3, #31
 800c10c:	d50d      	bpl.n	800c12a <_vfiprintf_r+0x6e>
 800c10e:	2001      	movs	r0, #1
 800c110:	4240      	negs	r0, r0
 800c112:	b021      	add	sp, #132	; 0x84
 800c114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c116:	4b7f      	ldr	r3, [pc, #508]	; (800c314 <_vfiprintf_r+0x258>)
 800c118:	429c      	cmp	r4, r3
 800c11a:	d101      	bne.n	800c120 <_vfiprintf_r+0x64>
 800c11c:	68b4      	ldr	r4, [r6, #8]
 800c11e:	e7de      	b.n	800c0de <_vfiprintf_r+0x22>
 800c120:	4b7d      	ldr	r3, [pc, #500]	; (800c318 <_vfiprintf_r+0x25c>)
 800c122:	429c      	cmp	r4, r3
 800c124:	d1db      	bne.n	800c0de <_vfiprintf_r+0x22>
 800c126:	68f4      	ldr	r4, [r6, #12]
 800c128:	e7d9      	b.n	800c0de <_vfiprintf_r+0x22>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	059b      	lsls	r3, r3, #22
 800c12e:	d4ee      	bmi.n	800c10e <_vfiprintf_r+0x52>
 800c130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c132:	f000 fd37 	bl	800cba4 <__retarget_lock_release_recursive>
 800c136:	e7ea      	b.n	800c10e <_vfiprintf_r+0x52>
 800c138:	2300      	movs	r3, #0
 800c13a:	ad08      	add	r5, sp, #32
 800c13c:	616b      	str	r3, [r5, #20]
 800c13e:	3320      	adds	r3, #32
 800c140:	766b      	strb	r3, [r5, #25]
 800c142:	3310      	adds	r3, #16
 800c144:	76ab      	strb	r3, [r5, #26]
 800c146:	9707      	str	r7, [sp, #28]
 800c148:	9f03      	ldr	r7, [sp, #12]
 800c14a:	783b      	ldrb	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <_vfiprintf_r+0x98>
 800c150:	2b25      	cmp	r3, #37	; 0x25
 800c152:	d14e      	bne.n	800c1f2 <_vfiprintf_r+0x136>
 800c154:	9b03      	ldr	r3, [sp, #12]
 800c156:	1afb      	subs	r3, r7, r3
 800c158:	9305      	str	r3, [sp, #20]
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	429f      	cmp	r7, r3
 800c15e:	d00d      	beq.n	800c17c <_vfiprintf_r+0xc0>
 800c160:	9b05      	ldr	r3, [sp, #20]
 800c162:	0021      	movs	r1, r4
 800c164:	0030      	movs	r0, r6
 800c166:	9a03      	ldr	r2, [sp, #12]
 800c168:	f7ff ff95 	bl	800c096 <__sfputs_r>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d100      	bne.n	800c172 <_vfiprintf_r+0xb6>
 800c170:	e0b5      	b.n	800c2de <_vfiprintf_r+0x222>
 800c172:	696a      	ldr	r2, [r5, #20]
 800c174:	9b05      	ldr	r3, [sp, #20]
 800c176:	4694      	mov	ip, r2
 800c178:	4463      	add	r3, ip
 800c17a:	616b      	str	r3, [r5, #20]
 800c17c:	783b      	ldrb	r3, [r7, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d100      	bne.n	800c184 <_vfiprintf_r+0xc8>
 800c182:	e0ac      	b.n	800c2de <_vfiprintf_r+0x222>
 800c184:	2201      	movs	r2, #1
 800c186:	1c7b      	adds	r3, r7, #1
 800c188:	9303      	str	r3, [sp, #12]
 800c18a:	2300      	movs	r3, #0
 800c18c:	4252      	negs	r2, r2
 800c18e:	606a      	str	r2, [r5, #4]
 800c190:	a904      	add	r1, sp, #16
 800c192:	3254      	adds	r2, #84	; 0x54
 800c194:	1852      	adds	r2, r2, r1
 800c196:	602b      	str	r3, [r5, #0]
 800c198:	60eb      	str	r3, [r5, #12]
 800c19a:	60ab      	str	r3, [r5, #8]
 800c19c:	7013      	strb	r3, [r2, #0]
 800c19e:	65ab      	str	r3, [r5, #88]	; 0x58
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	2205      	movs	r2, #5
 800c1a4:	7819      	ldrb	r1, [r3, #0]
 800c1a6:	485d      	ldr	r0, [pc, #372]	; (800c31c <_vfiprintf_r+0x260>)
 800c1a8:	f000 fd6a 	bl	800cc80 <memchr>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	1c5f      	adds	r7, r3, #1
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d120      	bne.n	800c1f6 <_vfiprintf_r+0x13a>
 800c1b4:	682a      	ldr	r2, [r5, #0]
 800c1b6:	06d3      	lsls	r3, r2, #27
 800c1b8:	d504      	bpl.n	800c1c4 <_vfiprintf_r+0x108>
 800c1ba:	2353      	movs	r3, #83	; 0x53
 800c1bc:	a904      	add	r1, sp, #16
 800c1be:	185b      	adds	r3, r3, r1
 800c1c0:	2120      	movs	r1, #32
 800c1c2:	7019      	strb	r1, [r3, #0]
 800c1c4:	0713      	lsls	r3, r2, #28
 800c1c6:	d504      	bpl.n	800c1d2 <_vfiprintf_r+0x116>
 800c1c8:	2353      	movs	r3, #83	; 0x53
 800c1ca:	a904      	add	r1, sp, #16
 800c1cc:	185b      	adds	r3, r3, r1
 800c1ce:	212b      	movs	r1, #43	; 0x2b
 800c1d0:	7019      	strb	r1, [r3, #0]
 800c1d2:	9b03      	ldr	r3, [sp, #12]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c1d8:	d016      	beq.n	800c208 <_vfiprintf_r+0x14c>
 800c1da:	2100      	movs	r1, #0
 800c1dc:	68eb      	ldr	r3, [r5, #12]
 800c1de:	9f03      	ldr	r7, [sp, #12]
 800c1e0:	783a      	ldrb	r2, [r7, #0]
 800c1e2:	1c78      	adds	r0, r7, #1
 800c1e4:	3a30      	subs	r2, #48	; 0x30
 800c1e6:	4684      	mov	ip, r0
 800c1e8:	2a09      	cmp	r2, #9
 800c1ea:	d94f      	bls.n	800c28c <_vfiprintf_r+0x1d0>
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	d111      	bne.n	800c214 <_vfiprintf_r+0x158>
 800c1f0:	e017      	b.n	800c222 <_vfiprintf_r+0x166>
 800c1f2:	3701      	adds	r7, #1
 800c1f4:	e7a9      	b.n	800c14a <_vfiprintf_r+0x8e>
 800c1f6:	4b49      	ldr	r3, [pc, #292]	; (800c31c <_vfiprintf_r+0x260>)
 800c1f8:	682a      	ldr	r2, [r5, #0]
 800c1fa:	1ac0      	subs	r0, r0, r3
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	4083      	lsls	r3, r0
 800c200:	4313      	orrs	r3, r2
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	9703      	str	r7, [sp, #12]
 800c206:	e7cb      	b.n	800c1a0 <_vfiprintf_r+0xe4>
 800c208:	9b07      	ldr	r3, [sp, #28]
 800c20a:	1d19      	adds	r1, r3, #4
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	9107      	str	r1, [sp, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	db01      	blt.n	800c218 <_vfiprintf_r+0x15c>
 800c214:	930b      	str	r3, [sp, #44]	; 0x2c
 800c216:	e004      	b.n	800c222 <_vfiprintf_r+0x166>
 800c218:	425b      	negs	r3, r3
 800c21a:	60eb      	str	r3, [r5, #12]
 800c21c:	2302      	movs	r3, #2
 800c21e:	4313      	orrs	r3, r2
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	783b      	ldrb	r3, [r7, #0]
 800c224:	2b2e      	cmp	r3, #46	; 0x2e
 800c226:	d10a      	bne.n	800c23e <_vfiprintf_r+0x182>
 800c228:	787b      	ldrb	r3, [r7, #1]
 800c22a:	2b2a      	cmp	r3, #42	; 0x2a
 800c22c:	d137      	bne.n	800c29e <_vfiprintf_r+0x1e2>
 800c22e:	9b07      	ldr	r3, [sp, #28]
 800c230:	3702      	adds	r7, #2
 800c232:	1d1a      	adds	r2, r3, #4
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	9207      	str	r2, [sp, #28]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	db2d      	blt.n	800c298 <_vfiprintf_r+0x1dc>
 800c23c:	9309      	str	r3, [sp, #36]	; 0x24
 800c23e:	2203      	movs	r2, #3
 800c240:	7839      	ldrb	r1, [r7, #0]
 800c242:	4837      	ldr	r0, [pc, #220]	; (800c320 <_vfiprintf_r+0x264>)
 800c244:	f000 fd1c 	bl	800cc80 <memchr>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d007      	beq.n	800c25c <_vfiprintf_r+0x1a0>
 800c24c:	4b34      	ldr	r3, [pc, #208]	; (800c320 <_vfiprintf_r+0x264>)
 800c24e:	682a      	ldr	r2, [r5, #0]
 800c250:	1ac0      	subs	r0, r0, r3
 800c252:	2340      	movs	r3, #64	; 0x40
 800c254:	4083      	lsls	r3, r0
 800c256:	4313      	orrs	r3, r2
 800c258:	3701      	adds	r7, #1
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	7839      	ldrb	r1, [r7, #0]
 800c25e:	1c7b      	adds	r3, r7, #1
 800c260:	2206      	movs	r2, #6
 800c262:	4830      	ldr	r0, [pc, #192]	; (800c324 <_vfiprintf_r+0x268>)
 800c264:	9303      	str	r3, [sp, #12]
 800c266:	7629      	strb	r1, [r5, #24]
 800c268:	f000 fd0a 	bl	800cc80 <memchr>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d045      	beq.n	800c2fc <_vfiprintf_r+0x240>
 800c270:	4b2d      	ldr	r3, [pc, #180]	; (800c328 <_vfiprintf_r+0x26c>)
 800c272:	2b00      	cmp	r3, #0
 800c274:	d127      	bne.n	800c2c6 <_vfiprintf_r+0x20a>
 800c276:	2207      	movs	r2, #7
 800c278:	9b07      	ldr	r3, [sp, #28]
 800c27a:	3307      	adds	r3, #7
 800c27c:	4393      	bics	r3, r2
 800c27e:	3308      	adds	r3, #8
 800c280:	9307      	str	r3, [sp, #28]
 800c282:	696b      	ldr	r3, [r5, #20]
 800c284:	9a04      	ldr	r2, [sp, #16]
 800c286:	189b      	adds	r3, r3, r2
 800c288:	616b      	str	r3, [r5, #20]
 800c28a:	e75d      	b.n	800c148 <_vfiprintf_r+0x8c>
 800c28c:	210a      	movs	r1, #10
 800c28e:	434b      	muls	r3, r1
 800c290:	4667      	mov	r7, ip
 800c292:	189b      	adds	r3, r3, r2
 800c294:	3909      	subs	r1, #9
 800c296:	e7a3      	b.n	800c1e0 <_vfiprintf_r+0x124>
 800c298:	2301      	movs	r3, #1
 800c29a:	425b      	negs	r3, r3
 800c29c:	e7ce      	b.n	800c23c <_vfiprintf_r+0x180>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	001a      	movs	r2, r3
 800c2a2:	3701      	adds	r7, #1
 800c2a4:	606b      	str	r3, [r5, #4]
 800c2a6:	7839      	ldrb	r1, [r7, #0]
 800c2a8:	1c78      	adds	r0, r7, #1
 800c2aa:	3930      	subs	r1, #48	; 0x30
 800c2ac:	4684      	mov	ip, r0
 800c2ae:	2909      	cmp	r1, #9
 800c2b0:	d903      	bls.n	800c2ba <_vfiprintf_r+0x1fe>
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d0c3      	beq.n	800c23e <_vfiprintf_r+0x182>
 800c2b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c2b8:	e7c1      	b.n	800c23e <_vfiprintf_r+0x182>
 800c2ba:	230a      	movs	r3, #10
 800c2bc:	435a      	muls	r2, r3
 800c2be:	4667      	mov	r7, ip
 800c2c0:	1852      	adds	r2, r2, r1
 800c2c2:	3b09      	subs	r3, #9
 800c2c4:	e7ef      	b.n	800c2a6 <_vfiprintf_r+0x1ea>
 800c2c6:	ab07      	add	r3, sp, #28
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	0022      	movs	r2, r4
 800c2cc:	0029      	movs	r1, r5
 800c2ce:	0030      	movs	r0, r6
 800c2d0:	4b16      	ldr	r3, [pc, #88]	; (800c32c <_vfiprintf_r+0x270>)
 800c2d2:	e000      	b.n	800c2d6 <_vfiprintf_r+0x21a>
 800c2d4:	bf00      	nop
 800c2d6:	9004      	str	r0, [sp, #16]
 800c2d8:	9b04      	ldr	r3, [sp, #16]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	d1d1      	bne.n	800c282 <_vfiprintf_r+0x1c6>
 800c2de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e0:	07db      	lsls	r3, r3, #31
 800c2e2:	d405      	bmi.n	800c2f0 <_vfiprintf_r+0x234>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	059b      	lsls	r3, r3, #22
 800c2e8:	d402      	bmi.n	800c2f0 <_vfiprintf_r+0x234>
 800c2ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ec:	f000 fc5a 	bl	800cba4 <__retarget_lock_release_recursive>
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	065b      	lsls	r3, r3, #25
 800c2f4:	d500      	bpl.n	800c2f8 <_vfiprintf_r+0x23c>
 800c2f6:	e70a      	b.n	800c10e <_vfiprintf_r+0x52>
 800c2f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c2fa:	e70a      	b.n	800c112 <_vfiprintf_r+0x56>
 800c2fc:	ab07      	add	r3, sp, #28
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	0022      	movs	r2, r4
 800c302:	0029      	movs	r1, r5
 800c304:	0030      	movs	r0, r6
 800c306:	4b09      	ldr	r3, [pc, #36]	; (800c32c <_vfiprintf_r+0x270>)
 800c308:	f000 f882 	bl	800c410 <_printf_i>
 800c30c:	e7e3      	b.n	800c2d6 <_vfiprintf_r+0x21a>
 800c30e:	46c0      	nop			; (mov r8, r8)
 800c310:	0800d2dc 	.word	0x0800d2dc
 800c314:	0800d2fc 	.word	0x0800d2fc
 800c318:	0800d2bc 	.word	0x0800d2bc
 800c31c:	0800d287 	.word	0x0800d287
 800c320:	0800d28d 	.word	0x0800d28d
 800c324:	0800d291 	.word	0x0800d291
 800c328:	00000000 	.word	0x00000000
 800c32c:	0800c097 	.word	0x0800c097

0800c330 <_printf_common>:
 800c330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c332:	0015      	movs	r5, r2
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	688a      	ldr	r2, [r1, #8]
 800c338:	690b      	ldr	r3, [r1, #16]
 800c33a:	000c      	movs	r4, r1
 800c33c:	9000      	str	r0, [sp, #0]
 800c33e:	4293      	cmp	r3, r2
 800c340:	da00      	bge.n	800c344 <_printf_common+0x14>
 800c342:	0013      	movs	r3, r2
 800c344:	0022      	movs	r2, r4
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	3243      	adds	r2, #67	; 0x43
 800c34a:	7812      	ldrb	r2, [r2, #0]
 800c34c:	2a00      	cmp	r2, #0
 800c34e:	d001      	beq.n	800c354 <_printf_common+0x24>
 800c350:	3301      	adds	r3, #1
 800c352:	602b      	str	r3, [r5, #0]
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	069b      	lsls	r3, r3, #26
 800c358:	d502      	bpl.n	800c360 <_printf_common+0x30>
 800c35a:	682b      	ldr	r3, [r5, #0]
 800c35c:	3302      	adds	r3, #2
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	6822      	ldr	r2, [r4, #0]
 800c362:	2306      	movs	r3, #6
 800c364:	0017      	movs	r7, r2
 800c366:	401f      	ands	r7, r3
 800c368:	421a      	tst	r2, r3
 800c36a:	d027      	beq.n	800c3bc <_printf_common+0x8c>
 800c36c:	0023      	movs	r3, r4
 800c36e:	3343      	adds	r3, #67	; 0x43
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	1e5a      	subs	r2, r3, #1
 800c374:	4193      	sbcs	r3, r2
 800c376:	6822      	ldr	r2, [r4, #0]
 800c378:	0692      	lsls	r2, r2, #26
 800c37a:	d430      	bmi.n	800c3de <_printf_common+0xae>
 800c37c:	0022      	movs	r2, r4
 800c37e:	9901      	ldr	r1, [sp, #4]
 800c380:	9800      	ldr	r0, [sp, #0]
 800c382:	9e08      	ldr	r6, [sp, #32]
 800c384:	3243      	adds	r2, #67	; 0x43
 800c386:	47b0      	blx	r6
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d025      	beq.n	800c3d8 <_printf_common+0xa8>
 800c38c:	2306      	movs	r3, #6
 800c38e:	6820      	ldr	r0, [r4, #0]
 800c390:	682a      	ldr	r2, [r5, #0]
 800c392:	68e1      	ldr	r1, [r4, #12]
 800c394:	2500      	movs	r5, #0
 800c396:	4003      	ands	r3, r0
 800c398:	2b04      	cmp	r3, #4
 800c39a:	d103      	bne.n	800c3a4 <_printf_common+0x74>
 800c39c:	1a8d      	subs	r5, r1, r2
 800c39e:	43eb      	mvns	r3, r5
 800c3a0:	17db      	asrs	r3, r3, #31
 800c3a2:	401d      	ands	r5, r3
 800c3a4:	68a3      	ldr	r3, [r4, #8]
 800c3a6:	6922      	ldr	r2, [r4, #16]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	dd01      	ble.n	800c3b0 <_printf_common+0x80>
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	18ed      	adds	r5, r5, r3
 800c3b0:	2700      	movs	r7, #0
 800c3b2:	42bd      	cmp	r5, r7
 800c3b4:	d120      	bne.n	800c3f8 <_printf_common+0xc8>
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	e010      	b.n	800c3dc <_printf_common+0xac>
 800c3ba:	3701      	adds	r7, #1
 800c3bc:	68e3      	ldr	r3, [r4, #12]
 800c3be:	682a      	ldr	r2, [r5, #0]
 800c3c0:	1a9b      	subs	r3, r3, r2
 800c3c2:	42bb      	cmp	r3, r7
 800c3c4:	ddd2      	ble.n	800c36c <_printf_common+0x3c>
 800c3c6:	0022      	movs	r2, r4
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	9901      	ldr	r1, [sp, #4]
 800c3cc:	9800      	ldr	r0, [sp, #0]
 800c3ce:	9e08      	ldr	r6, [sp, #32]
 800c3d0:	3219      	adds	r2, #25
 800c3d2:	47b0      	blx	r6
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d1f0      	bne.n	800c3ba <_printf_common+0x8a>
 800c3d8:	2001      	movs	r0, #1
 800c3da:	4240      	negs	r0, r0
 800c3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3de:	2030      	movs	r0, #48	; 0x30
 800c3e0:	18e1      	adds	r1, r4, r3
 800c3e2:	3143      	adds	r1, #67	; 0x43
 800c3e4:	7008      	strb	r0, [r1, #0]
 800c3e6:	0021      	movs	r1, r4
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	3145      	adds	r1, #69	; 0x45
 800c3ec:	7809      	ldrb	r1, [r1, #0]
 800c3ee:	18a2      	adds	r2, r4, r2
 800c3f0:	3243      	adds	r2, #67	; 0x43
 800c3f2:	3302      	adds	r3, #2
 800c3f4:	7011      	strb	r1, [r2, #0]
 800c3f6:	e7c1      	b.n	800c37c <_printf_common+0x4c>
 800c3f8:	0022      	movs	r2, r4
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	9901      	ldr	r1, [sp, #4]
 800c3fe:	9800      	ldr	r0, [sp, #0]
 800c400:	9e08      	ldr	r6, [sp, #32]
 800c402:	321a      	adds	r2, #26
 800c404:	47b0      	blx	r6
 800c406:	1c43      	adds	r3, r0, #1
 800c408:	d0e6      	beq.n	800c3d8 <_printf_common+0xa8>
 800c40a:	3701      	adds	r7, #1
 800c40c:	e7d1      	b.n	800c3b2 <_printf_common+0x82>
	...

0800c410 <_printf_i>:
 800c410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c412:	b08b      	sub	sp, #44	; 0x2c
 800c414:	9206      	str	r2, [sp, #24]
 800c416:	000a      	movs	r2, r1
 800c418:	3243      	adds	r2, #67	; 0x43
 800c41a:	9307      	str	r3, [sp, #28]
 800c41c:	9005      	str	r0, [sp, #20]
 800c41e:	9204      	str	r2, [sp, #16]
 800c420:	7e0a      	ldrb	r2, [r1, #24]
 800c422:	000c      	movs	r4, r1
 800c424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c426:	2a78      	cmp	r2, #120	; 0x78
 800c428:	d807      	bhi.n	800c43a <_printf_i+0x2a>
 800c42a:	2a62      	cmp	r2, #98	; 0x62
 800c42c:	d809      	bhi.n	800c442 <_printf_i+0x32>
 800c42e:	2a00      	cmp	r2, #0
 800c430:	d100      	bne.n	800c434 <_printf_i+0x24>
 800c432:	e0c1      	b.n	800c5b8 <_printf_i+0x1a8>
 800c434:	2a58      	cmp	r2, #88	; 0x58
 800c436:	d100      	bne.n	800c43a <_printf_i+0x2a>
 800c438:	e08c      	b.n	800c554 <_printf_i+0x144>
 800c43a:	0026      	movs	r6, r4
 800c43c:	3642      	adds	r6, #66	; 0x42
 800c43e:	7032      	strb	r2, [r6, #0]
 800c440:	e022      	b.n	800c488 <_printf_i+0x78>
 800c442:	0010      	movs	r0, r2
 800c444:	3863      	subs	r0, #99	; 0x63
 800c446:	2815      	cmp	r0, #21
 800c448:	d8f7      	bhi.n	800c43a <_printf_i+0x2a>
 800c44a:	f7fb fe5d 	bl	8008108 <__gnu_thumb1_case_shi>
 800c44e:	0016      	.short	0x0016
 800c450:	fff6001f 	.word	0xfff6001f
 800c454:	fff6fff6 	.word	0xfff6fff6
 800c458:	001ffff6 	.word	0x001ffff6
 800c45c:	fff6fff6 	.word	0xfff6fff6
 800c460:	fff6fff6 	.word	0xfff6fff6
 800c464:	003600a8 	.word	0x003600a8
 800c468:	fff6009a 	.word	0xfff6009a
 800c46c:	00b9fff6 	.word	0x00b9fff6
 800c470:	0036fff6 	.word	0x0036fff6
 800c474:	fff6fff6 	.word	0xfff6fff6
 800c478:	009e      	.short	0x009e
 800c47a:	0026      	movs	r6, r4
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	3642      	adds	r6, #66	; 0x42
 800c480:	1d11      	adds	r1, r2, #4
 800c482:	6019      	str	r1, [r3, #0]
 800c484:	6813      	ldr	r3, [r2, #0]
 800c486:	7033      	strb	r3, [r6, #0]
 800c488:	2301      	movs	r3, #1
 800c48a:	e0a7      	b.n	800c5dc <_printf_i+0x1cc>
 800c48c:	6808      	ldr	r0, [r1, #0]
 800c48e:	6819      	ldr	r1, [r3, #0]
 800c490:	1d0a      	adds	r2, r1, #4
 800c492:	0605      	lsls	r5, r0, #24
 800c494:	d50b      	bpl.n	800c4ae <_printf_i+0x9e>
 800c496:	680d      	ldr	r5, [r1, #0]
 800c498:	601a      	str	r2, [r3, #0]
 800c49a:	2d00      	cmp	r5, #0
 800c49c:	da03      	bge.n	800c4a6 <_printf_i+0x96>
 800c49e:	232d      	movs	r3, #45	; 0x2d
 800c4a0:	9a04      	ldr	r2, [sp, #16]
 800c4a2:	426d      	negs	r5, r5
 800c4a4:	7013      	strb	r3, [r2, #0]
 800c4a6:	4b61      	ldr	r3, [pc, #388]	; (800c62c <_printf_i+0x21c>)
 800c4a8:	270a      	movs	r7, #10
 800c4aa:	9303      	str	r3, [sp, #12]
 800c4ac:	e01b      	b.n	800c4e6 <_printf_i+0xd6>
 800c4ae:	680d      	ldr	r5, [r1, #0]
 800c4b0:	601a      	str	r2, [r3, #0]
 800c4b2:	0641      	lsls	r1, r0, #25
 800c4b4:	d5f1      	bpl.n	800c49a <_printf_i+0x8a>
 800c4b6:	b22d      	sxth	r5, r5
 800c4b8:	e7ef      	b.n	800c49a <_printf_i+0x8a>
 800c4ba:	680d      	ldr	r5, [r1, #0]
 800c4bc:	6819      	ldr	r1, [r3, #0]
 800c4be:	1d08      	adds	r0, r1, #4
 800c4c0:	6018      	str	r0, [r3, #0]
 800c4c2:	062e      	lsls	r6, r5, #24
 800c4c4:	d501      	bpl.n	800c4ca <_printf_i+0xba>
 800c4c6:	680d      	ldr	r5, [r1, #0]
 800c4c8:	e003      	b.n	800c4d2 <_printf_i+0xc2>
 800c4ca:	066d      	lsls	r5, r5, #25
 800c4cc:	d5fb      	bpl.n	800c4c6 <_printf_i+0xb6>
 800c4ce:	680d      	ldr	r5, [r1, #0]
 800c4d0:	b2ad      	uxth	r5, r5
 800c4d2:	4b56      	ldr	r3, [pc, #344]	; (800c62c <_printf_i+0x21c>)
 800c4d4:	2708      	movs	r7, #8
 800c4d6:	9303      	str	r3, [sp, #12]
 800c4d8:	2a6f      	cmp	r2, #111	; 0x6f
 800c4da:	d000      	beq.n	800c4de <_printf_i+0xce>
 800c4dc:	3702      	adds	r7, #2
 800c4de:	0023      	movs	r3, r4
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	3343      	adds	r3, #67	; 0x43
 800c4e4:	701a      	strb	r2, [r3, #0]
 800c4e6:	6863      	ldr	r3, [r4, #4]
 800c4e8:	60a3      	str	r3, [r4, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	db03      	blt.n	800c4f6 <_printf_i+0xe6>
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	6821      	ldr	r1, [r4, #0]
 800c4f2:	4391      	bics	r1, r2
 800c4f4:	6021      	str	r1, [r4, #0]
 800c4f6:	2d00      	cmp	r5, #0
 800c4f8:	d102      	bne.n	800c500 <_printf_i+0xf0>
 800c4fa:	9e04      	ldr	r6, [sp, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00c      	beq.n	800c51a <_printf_i+0x10a>
 800c500:	9e04      	ldr	r6, [sp, #16]
 800c502:	0028      	movs	r0, r5
 800c504:	0039      	movs	r1, r7
 800c506:	f7fb fe8f 	bl	8008228 <__aeabi_uidivmod>
 800c50a:	9b03      	ldr	r3, [sp, #12]
 800c50c:	3e01      	subs	r6, #1
 800c50e:	5c5b      	ldrb	r3, [r3, r1]
 800c510:	7033      	strb	r3, [r6, #0]
 800c512:	002b      	movs	r3, r5
 800c514:	0005      	movs	r5, r0
 800c516:	429f      	cmp	r7, r3
 800c518:	d9f3      	bls.n	800c502 <_printf_i+0xf2>
 800c51a:	2f08      	cmp	r7, #8
 800c51c:	d109      	bne.n	800c532 <_printf_i+0x122>
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	07db      	lsls	r3, r3, #31
 800c522:	d506      	bpl.n	800c532 <_printf_i+0x122>
 800c524:	6863      	ldr	r3, [r4, #4]
 800c526:	6922      	ldr	r2, [r4, #16]
 800c528:	4293      	cmp	r3, r2
 800c52a:	dc02      	bgt.n	800c532 <_printf_i+0x122>
 800c52c:	2330      	movs	r3, #48	; 0x30
 800c52e:	3e01      	subs	r6, #1
 800c530:	7033      	strb	r3, [r6, #0]
 800c532:	9b04      	ldr	r3, [sp, #16]
 800c534:	1b9b      	subs	r3, r3, r6
 800c536:	6123      	str	r3, [r4, #16]
 800c538:	9b07      	ldr	r3, [sp, #28]
 800c53a:	0021      	movs	r1, r4
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	9805      	ldr	r0, [sp, #20]
 800c540:	9b06      	ldr	r3, [sp, #24]
 800c542:	aa09      	add	r2, sp, #36	; 0x24
 800c544:	f7ff fef4 	bl	800c330 <_printf_common>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d14c      	bne.n	800c5e6 <_printf_i+0x1d6>
 800c54c:	2001      	movs	r0, #1
 800c54e:	4240      	negs	r0, r0
 800c550:	b00b      	add	sp, #44	; 0x2c
 800c552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c554:	3145      	adds	r1, #69	; 0x45
 800c556:	700a      	strb	r2, [r1, #0]
 800c558:	4a34      	ldr	r2, [pc, #208]	; (800c62c <_printf_i+0x21c>)
 800c55a:	9203      	str	r2, [sp, #12]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	6821      	ldr	r1, [r4, #0]
 800c560:	ca20      	ldmia	r2!, {r5}
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	0608      	lsls	r0, r1, #24
 800c566:	d516      	bpl.n	800c596 <_printf_i+0x186>
 800c568:	07cb      	lsls	r3, r1, #31
 800c56a:	d502      	bpl.n	800c572 <_printf_i+0x162>
 800c56c:	2320      	movs	r3, #32
 800c56e:	4319      	orrs	r1, r3
 800c570:	6021      	str	r1, [r4, #0]
 800c572:	2710      	movs	r7, #16
 800c574:	2d00      	cmp	r5, #0
 800c576:	d1b2      	bne.n	800c4de <_printf_i+0xce>
 800c578:	2320      	movs	r3, #32
 800c57a:	6822      	ldr	r2, [r4, #0]
 800c57c:	439a      	bics	r2, r3
 800c57e:	6022      	str	r2, [r4, #0]
 800c580:	e7ad      	b.n	800c4de <_printf_i+0xce>
 800c582:	2220      	movs	r2, #32
 800c584:	6809      	ldr	r1, [r1, #0]
 800c586:	430a      	orrs	r2, r1
 800c588:	6022      	str	r2, [r4, #0]
 800c58a:	0022      	movs	r2, r4
 800c58c:	2178      	movs	r1, #120	; 0x78
 800c58e:	3245      	adds	r2, #69	; 0x45
 800c590:	7011      	strb	r1, [r2, #0]
 800c592:	4a27      	ldr	r2, [pc, #156]	; (800c630 <_printf_i+0x220>)
 800c594:	e7e1      	b.n	800c55a <_printf_i+0x14a>
 800c596:	0648      	lsls	r0, r1, #25
 800c598:	d5e6      	bpl.n	800c568 <_printf_i+0x158>
 800c59a:	b2ad      	uxth	r5, r5
 800c59c:	e7e4      	b.n	800c568 <_printf_i+0x158>
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	680d      	ldr	r5, [r1, #0]
 800c5a2:	1d10      	adds	r0, r2, #4
 800c5a4:	6949      	ldr	r1, [r1, #20]
 800c5a6:	6018      	str	r0, [r3, #0]
 800c5a8:	6813      	ldr	r3, [r2, #0]
 800c5aa:	062e      	lsls	r6, r5, #24
 800c5ac:	d501      	bpl.n	800c5b2 <_printf_i+0x1a2>
 800c5ae:	6019      	str	r1, [r3, #0]
 800c5b0:	e002      	b.n	800c5b8 <_printf_i+0x1a8>
 800c5b2:	066d      	lsls	r5, r5, #25
 800c5b4:	d5fb      	bpl.n	800c5ae <_printf_i+0x19e>
 800c5b6:	8019      	strh	r1, [r3, #0]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9e04      	ldr	r6, [sp, #16]
 800c5bc:	6123      	str	r3, [r4, #16]
 800c5be:	e7bb      	b.n	800c538 <_printf_i+0x128>
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	1d11      	adds	r1, r2, #4
 800c5c4:	6019      	str	r1, [r3, #0]
 800c5c6:	6816      	ldr	r6, [r2, #0]
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	0030      	movs	r0, r6
 800c5cc:	6862      	ldr	r2, [r4, #4]
 800c5ce:	f000 fb57 	bl	800cc80 <memchr>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d001      	beq.n	800c5da <_printf_i+0x1ca>
 800c5d6:	1b80      	subs	r0, r0, r6
 800c5d8:	6060      	str	r0, [r4, #4]
 800c5da:	6863      	ldr	r3, [r4, #4]
 800c5dc:	6123      	str	r3, [r4, #16]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9a04      	ldr	r2, [sp, #16]
 800c5e2:	7013      	strb	r3, [r2, #0]
 800c5e4:	e7a8      	b.n	800c538 <_printf_i+0x128>
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	0032      	movs	r2, r6
 800c5ea:	9906      	ldr	r1, [sp, #24]
 800c5ec:	9805      	ldr	r0, [sp, #20]
 800c5ee:	9d07      	ldr	r5, [sp, #28]
 800c5f0:	47a8      	blx	r5
 800c5f2:	1c43      	adds	r3, r0, #1
 800c5f4:	d0aa      	beq.n	800c54c <_printf_i+0x13c>
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	079b      	lsls	r3, r3, #30
 800c5fa:	d415      	bmi.n	800c628 <_printf_i+0x218>
 800c5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5fe:	68e0      	ldr	r0, [r4, #12]
 800c600:	4298      	cmp	r0, r3
 800c602:	daa5      	bge.n	800c550 <_printf_i+0x140>
 800c604:	0018      	movs	r0, r3
 800c606:	e7a3      	b.n	800c550 <_printf_i+0x140>
 800c608:	0022      	movs	r2, r4
 800c60a:	2301      	movs	r3, #1
 800c60c:	9906      	ldr	r1, [sp, #24]
 800c60e:	9805      	ldr	r0, [sp, #20]
 800c610:	9e07      	ldr	r6, [sp, #28]
 800c612:	3219      	adds	r2, #25
 800c614:	47b0      	blx	r6
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	d098      	beq.n	800c54c <_printf_i+0x13c>
 800c61a:	3501      	adds	r5, #1
 800c61c:	68e3      	ldr	r3, [r4, #12]
 800c61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c620:	1a9b      	subs	r3, r3, r2
 800c622:	42ab      	cmp	r3, r5
 800c624:	dcf0      	bgt.n	800c608 <_printf_i+0x1f8>
 800c626:	e7e9      	b.n	800c5fc <_printf_i+0x1ec>
 800c628:	2500      	movs	r5, #0
 800c62a:	e7f7      	b.n	800c61c <_printf_i+0x20c>
 800c62c:	0800d298 	.word	0x0800d298
 800c630:	0800d2a9 	.word	0x0800d2a9

0800c634 <_sbrk_r>:
 800c634:	2300      	movs	r3, #0
 800c636:	b570      	push	{r4, r5, r6, lr}
 800c638:	4d06      	ldr	r5, [pc, #24]	; (800c654 <_sbrk_r+0x20>)
 800c63a:	0004      	movs	r4, r0
 800c63c:	0008      	movs	r0, r1
 800c63e:	602b      	str	r3, [r5, #0]
 800c640:	f7fd f9d8 	bl	80099f4 <_sbrk>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d103      	bne.n	800c650 <_sbrk_r+0x1c>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d000      	beq.n	800c650 <_sbrk_r+0x1c>
 800c64e:	6023      	str	r3, [r4, #0]
 800c650:	bd70      	pop	{r4, r5, r6, pc}
 800c652:	46c0      	nop			; (mov r8, r8)
 800c654:	20000464 	.word	0x20000464

0800c658 <__swbuf_r>:
 800c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65a:	0005      	movs	r5, r0
 800c65c:	000e      	movs	r6, r1
 800c65e:	0014      	movs	r4, r2
 800c660:	2800      	cmp	r0, #0
 800c662:	d004      	beq.n	800c66e <__swbuf_r+0x16>
 800c664:	6983      	ldr	r3, [r0, #24]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <__swbuf_r+0x16>
 800c66a:	f000 f9f9 	bl	800ca60 <__sinit>
 800c66e:	4b22      	ldr	r3, [pc, #136]	; (800c6f8 <__swbuf_r+0xa0>)
 800c670:	429c      	cmp	r4, r3
 800c672:	d12e      	bne.n	800c6d2 <__swbuf_r+0x7a>
 800c674:	686c      	ldr	r4, [r5, #4]
 800c676:	69a3      	ldr	r3, [r4, #24]
 800c678:	60a3      	str	r3, [r4, #8]
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	071b      	lsls	r3, r3, #28
 800c67e:	d532      	bpl.n	800c6e6 <__swbuf_r+0x8e>
 800c680:	6923      	ldr	r3, [r4, #16]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d02f      	beq.n	800c6e6 <__swbuf_r+0x8e>
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	6922      	ldr	r2, [r4, #16]
 800c68a:	b2f7      	uxtb	r7, r6
 800c68c:	1a98      	subs	r0, r3, r2
 800c68e:	6963      	ldr	r3, [r4, #20]
 800c690:	b2f6      	uxtb	r6, r6
 800c692:	4283      	cmp	r3, r0
 800c694:	dc05      	bgt.n	800c6a2 <__swbuf_r+0x4a>
 800c696:	0021      	movs	r1, r4
 800c698:	0028      	movs	r0, r5
 800c69a:	f000 f93f 	bl	800c91c <_fflush_r>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d127      	bne.n	800c6f2 <__swbuf_r+0x9a>
 800c6a2:	68a3      	ldr	r3, [r4, #8]
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	60a3      	str	r3, [r4, #8]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	6022      	str	r2, [r4, #0]
 800c6b0:	701f      	strb	r7, [r3, #0]
 800c6b2:	6963      	ldr	r3, [r4, #20]
 800c6b4:	4283      	cmp	r3, r0
 800c6b6:	d004      	beq.n	800c6c2 <__swbuf_r+0x6a>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	07db      	lsls	r3, r3, #31
 800c6bc:	d507      	bpl.n	800c6ce <__swbuf_r+0x76>
 800c6be:	2e0a      	cmp	r6, #10
 800c6c0:	d105      	bne.n	800c6ce <__swbuf_r+0x76>
 800c6c2:	0021      	movs	r1, r4
 800c6c4:	0028      	movs	r0, r5
 800c6c6:	f000 f929 	bl	800c91c <_fflush_r>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d111      	bne.n	800c6f2 <__swbuf_r+0x9a>
 800c6ce:	0030      	movs	r0, r6
 800c6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d2:	4b0a      	ldr	r3, [pc, #40]	; (800c6fc <__swbuf_r+0xa4>)
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	d101      	bne.n	800c6dc <__swbuf_r+0x84>
 800c6d8:	68ac      	ldr	r4, [r5, #8]
 800c6da:	e7cc      	b.n	800c676 <__swbuf_r+0x1e>
 800c6dc:	4b08      	ldr	r3, [pc, #32]	; (800c700 <__swbuf_r+0xa8>)
 800c6de:	429c      	cmp	r4, r3
 800c6e0:	d1c9      	bne.n	800c676 <__swbuf_r+0x1e>
 800c6e2:	68ec      	ldr	r4, [r5, #12]
 800c6e4:	e7c7      	b.n	800c676 <__swbuf_r+0x1e>
 800c6e6:	0021      	movs	r1, r4
 800c6e8:	0028      	movs	r0, r5
 800c6ea:	f000 f80b 	bl	800c704 <__swsetup_r>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d0c9      	beq.n	800c686 <__swbuf_r+0x2e>
 800c6f2:	2601      	movs	r6, #1
 800c6f4:	4276      	negs	r6, r6
 800c6f6:	e7ea      	b.n	800c6ce <__swbuf_r+0x76>
 800c6f8:	0800d2dc 	.word	0x0800d2dc
 800c6fc:	0800d2fc 	.word	0x0800d2fc
 800c700:	0800d2bc 	.word	0x0800d2bc

0800c704 <__swsetup_r>:
 800c704:	4b37      	ldr	r3, [pc, #220]	; (800c7e4 <__swsetup_r+0xe0>)
 800c706:	b570      	push	{r4, r5, r6, lr}
 800c708:	681d      	ldr	r5, [r3, #0]
 800c70a:	0006      	movs	r6, r0
 800c70c:	000c      	movs	r4, r1
 800c70e:	2d00      	cmp	r5, #0
 800c710:	d005      	beq.n	800c71e <__swsetup_r+0x1a>
 800c712:	69ab      	ldr	r3, [r5, #24]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d102      	bne.n	800c71e <__swsetup_r+0x1a>
 800c718:	0028      	movs	r0, r5
 800c71a:	f000 f9a1 	bl	800ca60 <__sinit>
 800c71e:	4b32      	ldr	r3, [pc, #200]	; (800c7e8 <__swsetup_r+0xe4>)
 800c720:	429c      	cmp	r4, r3
 800c722:	d10f      	bne.n	800c744 <__swsetup_r+0x40>
 800c724:	686c      	ldr	r4, [r5, #4]
 800c726:	230c      	movs	r3, #12
 800c728:	5ee2      	ldrsh	r2, [r4, r3]
 800c72a:	b293      	uxth	r3, r2
 800c72c:	0711      	lsls	r1, r2, #28
 800c72e:	d42d      	bmi.n	800c78c <__swsetup_r+0x88>
 800c730:	06d9      	lsls	r1, r3, #27
 800c732:	d411      	bmi.n	800c758 <__swsetup_r+0x54>
 800c734:	2309      	movs	r3, #9
 800c736:	2001      	movs	r0, #1
 800c738:	6033      	str	r3, [r6, #0]
 800c73a:	3337      	adds	r3, #55	; 0x37
 800c73c:	4313      	orrs	r3, r2
 800c73e:	81a3      	strh	r3, [r4, #12]
 800c740:	4240      	negs	r0, r0
 800c742:	bd70      	pop	{r4, r5, r6, pc}
 800c744:	4b29      	ldr	r3, [pc, #164]	; (800c7ec <__swsetup_r+0xe8>)
 800c746:	429c      	cmp	r4, r3
 800c748:	d101      	bne.n	800c74e <__swsetup_r+0x4a>
 800c74a:	68ac      	ldr	r4, [r5, #8]
 800c74c:	e7eb      	b.n	800c726 <__swsetup_r+0x22>
 800c74e:	4b28      	ldr	r3, [pc, #160]	; (800c7f0 <__swsetup_r+0xec>)
 800c750:	429c      	cmp	r4, r3
 800c752:	d1e8      	bne.n	800c726 <__swsetup_r+0x22>
 800c754:	68ec      	ldr	r4, [r5, #12]
 800c756:	e7e6      	b.n	800c726 <__swsetup_r+0x22>
 800c758:	075b      	lsls	r3, r3, #29
 800c75a:	d513      	bpl.n	800c784 <__swsetup_r+0x80>
 800c75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c75e:	2900      	cmp	r1, #0
 800c760:	d008      	beq.n	800c774 <__swsetup_r+0x70>
 800c762:	0023      	movs	r3, r4
 800c764:	3344      	adds	r3, #68	; 0x44
 800c766:	4299      	cmp	r1, r3
 800c768:	d002      	beq.n	800c770 <__swsetup_r+0x6c>
 800c76a:	0030      	movs	r0, r6
 800c76c:	f7ff fb9c 	bl	800bea8 <_free_r>
 800c770:	2300      	movs	r3, #0
 800c772:	6363      	str	r3, [r4, #52]	; 0x34
 800c774:	2224      	movs	r2, #36	; 0x24
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	4393      	bics	r3, r2
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	2300      	movs	r3, #0
 800c77e:	6063      	str	r3, [r4, #4]
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	2308      	movs	r3, #8
 800c786:	89a2      	ldrh	r2, [r4, #12]
 800c788:	4313      	orrs	r3, r2
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10b      	bne.n	800c7aa <__swsetup_r+0xa6>
 800c792:	21a0      	movs	r1, #160	; 0xa0
 800c794:	2280      	movs	r2, #128	; 0x80
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	0089      	lsls	r1, r1, #2
 800c79a:	0092      	lsls	r2, r2, #2
 800c79c:	400b      	ands	r3, r1
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d003      	beq.n	800c7aa <__swsetup_r+0xa6>
 800c7a2:	0021      	movs	r1, r4
 800c7a4:	0030      	movs	r0, r6
 800c7a6:	f000 fa27 	bl	800cbf8 <__smakebuf_r>
 800c7aa:	220c      	movs	r2, #12
 800c7ac:	5ea3      	ldrsh	r3, [r4, r2]
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	001a      	movs	r2, r3
 800c7b2:	b299      	uxth	r1, r3
 800c7b4:	4002      	ands	r2, r0
 800c7b6:	4203      	tst	r3, r0
 800c7b8:	d00f      	beq.n	800c7da <__swsetup_r+0xd6>
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	60a2      	str	r2, [r4, #8]
 800c7be:	6962      	ldr	r2, [r4, #20]
 800c7c0:	4252      	negs	r2, r2
 800c7c2:	61a2      	str	r2, [r4, #24]
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	6922      	ldr	r2, [r4, #16]
 800c7c8:	4282      	cmp	r2, r0
 800c7ca:	d1ba      	bne.n	800c742 <__swsetup_r+0x3e>
 800c7cc:	060a      	lsls	r2, r1, #24
 800c7ce:	d5b8      	bpl.n	800c742 <__swsetup_r+0x3e>
 800c7d0:	2240      	movs	r2, #64	; 0x40
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	81a3      	strh	r3, [r4, #12]
 800c7d6:	3801      	subs	r0, #1
 800c7d8:	e7b3      	b.n	800c742 <__swsetup_r+0x3e>
 800c7da:	0788      	lsls	r0, r1, #30
 800c7dc:	d400      	bmi.n	800c7e0 <__swsetup_r+0xdc>
 800c7de:	6962      	ldr	r2, [r4, #20]
 800c7e0:	60a2      	str	r2, [r4, #8]
 800c7e2:	e7ef      	b.n	800c7c4 <__swsetup_r+0xc0>
 800c7e4:	20000018 	.word	0x20000018
 800c7e8:	0800d2dc 	.word	0x0800d2dc
 800c7ec:	0800d2fc 	.word	0x0800d2fc
 800c7f0:	0800d2bc 	.word	0x0800d2bc

0800c7f4 <abort>:
 800c7f4:	2006      	movs	r0, #6
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	f000 fa88 	bl	800cd0c <raise>
 800c7fc:	2001      	movs	r0, #1
 800c7fe:	f7fd f888 	bl	8009912 <_exit>
	...

0800c804 <__sflush_r>:
 800c804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c806:	898b      	ldrh	r3, [r1, #12]
 800c808:	0005      	movs	r5, r0
 800c80a:	000c      	movs	r4, r1
 800c80c:	071a      	lsls	r2, r3, #28
 800c80e:	d45f      	bmi.n	800c8d0 <__sflush_r+0xcc>
 800c810:	684a      	ldr	r2, [r1, #4]
 800c812:	2a00      	cmp	r2, #0
 800c814:	dc04      	bgt.n	800c820 <__sflush_r+0x1c>
 800c816:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c818:	2a00      	cmp	r2, #0
 800c81a:	dc01      	bgt.n	800c820 <__sflush_r+0x1c>
 800c81c:	2000      	movs	r0, #0
 800c81e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c820:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c822:	2f00      	cmp	r7, #0
 800c824:	d0fa      	beq.n	800c81c <__sflush_r+0x18>
 800c826:	2200      	movs	r2, #0
 800c828:	2180      	movs	r1, #128	; 0x80
 800c82a:	682e      	ldr	r6, [r5, #0]
 800c82c:	602a      	str	r2, [r5, #0]
 800c82e:	001a      	movs	r2, r3
 800c830:	0149      	lsls	r1, r1, #5
 800c832:	400a      	ands	r2, r1
 800c834:	420b      	tst	r3, r1
 800c836:	d034      	beq.n	800c8a2 <__sflush_r+0x9e>
 800c838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	075b      	lsls	r3, r3, #29
 800c83e:	d506      	bpl.n	800c84e <__sflush_r+0x4a>
 800c840:	6863      	ldr	r3, [r4, #4]
 800c842:	1ac0      	subs	r0, r0, r3
 800c844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <__sflush_r+0x4a>
 800c84a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c84c:	1ac0      	subs	r0, r0, r3
 800c84e:	0002      	movs	r2, r0
 800c850:	6a21      	ldr	r1, [r4, #32]
 800c852:	2300      	movs	r3, #0
 800c854:	0028      	movs	r0, r5
 800c856:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c858:	47b8      	blx	r7
 800c85a:	89a1      	ldrh	r1, [r4, #12]
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d106      	bne.n	800c86e <__sflush_r+0x6a>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	2b1d      	cmp	r3, #29
 800c864:	d831      	bhi.n	800c8ca <__sflush_r+0xc6>
 800c866:	4a2c      	ldr	r2, [pc, #176]	; (800c918 <__sflush_r+0x114>)
 800c868:	40da      	lsrs	r2, r3
 800c86a:	07d3      	lsls	r3, r2, #31
 800c86c:	d52d      	bpl.n	800c8ca <__sflush_r+0xc6>
 800c86e:	2300      	movs	r3, #0
 800c870:	6063      	str	r3, [r4, #4]
 800c872:	6923      	ldr	r3, [r4, #16]
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	04cb      	lsls	r3, r1, #19
 800c878:	d505      	bpl.n	800c886 <__sflush_r+0x82>
 800c87a:	1c43      	adds	r3, r0, #1
 800c87c:	d102      	bne.n	800c884 <__sflush_r+0x80>
 800c87e:	682b      	ldr	r3, [r5, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d100      	bne.n	800c886 <__sflush_r+0x82>
 800c884:	6560      	str	r0, [r4, #84]	; 0x54
 800c886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c888:	602e      	str	r6, [r5, #0]
 800c88a:	2900      	cmp	r1, #0
 800c88c:	d0c6      	beq.n	800c81c <__sflush_r+0x18>
 800c88e:	0023      	movs	r3, r4
 800c890:	3344      	adds	r3, #68	; 0x44
 800c892:	4299      	cmp	r1, r3
 800c894:	d002      	beq.n	800c89c <__sflush_r+0x98>
 800c896:	0028      	movs	r0, r5
 800c898:	f7ff fb06 	bl	800bea8 <_free_r>
 800c89c:	2000      	movs	r0, #0
 800c89e:	6360      	str	r0, [r4, #52]	; 0x34
 800c8a0:	e7bd      	b.n	800c81e <__sflush_r+0x1a>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	0028      	movs	r0, r5
 800c8a6:	6a21      	ldr	r1, [r4, #32]
 800c8a8:	47b8      	blx	r7
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d1c5      	bne.n	800c83a <__sflush_r+0x36>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d0c2      	beq.n	800c83a <__sflush_r+0x36>
 800c8b4:	2b1d      	cmp	r3, #29
 800c8b6:	d001      	beq.n	800c8bc <__sflush_r+0xb8>
 800c8b8:	2b16      	cmp	r3, #22
 800c8ba:	d101      	bne.n	800c8c0 <__sflush_r+0xbc>
 800c8bc:	602e      	str	r6, [r5, #0]
 800c8be:	e7ad      	b.n	800c81c <__sflush_r+0x18>
 800c8c0:	2340      	movs	r3, #64	; 0x40
 800c8c2:	89a2      	ldrh	r2, [r4, #12]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	e7a9      	b.n	800c81e <__sflush_r+0x1a>
 800c8ca:	2340      	movs	r3, #64	; 0x40
 800c8cc:	430b      	orrs	r3, r1
 800c8ce:	e7fa      	b.n	800c8c6 <__sflush_r+0xc2>
 800c8d0:	690f      	ldr	r7, [r1, #16]
 800c8d2:	2f00      	cmp	r7, #0
 800c8d4:	d0a2      	beq.n	800c81c <__sflush_r+0x18>
 800c8d6:	680a      	ldr	r2, [r1, #0]
 800c8d8:	600f      	str	r7, [r1, #0]
 800c8da:	1bd2      	subs	r2, r2, r7
 800c8dc:	9201      	str	r2, [sp, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	079b      	lsls	r3, r3, #30
 800c8e2:	d100      	bne.n	800c8e6 <__sflush_r+0xe2>
 800c8e4:	694a      	ldr	r2, [r1, #20]
 800c8e6:	60a2      	str	r2, [r4, #8]
 800c8e8:	9b01      	ldr	r3, [sp, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dc00      	bgt.n	800c8f0 <__sflush_r+0xec>
 800c8ee:	e795      	b.n	800c81c <__sflush_r+0x18>
 800c8f0:	003a      	movs	r2, r7
 800c8f2:	0028      	movs	r0, r5
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	6a21      	ldr	r1, [r4, #32]
 800c8f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8fa:	47b0      	blx	r6
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	dc06      	bgt.n	800c90e <__sflush_r+0x10a>
 800c900:	2340      	movs	r3, #64	; 0x40
 800c902:	2001      	movs	r0, #1
 800c904:	89a2      	ldrh	r2, [r4, #12]
 800c906:	4240      	negs	r0, r0
 800c908:	4313      	orrs	r3, r2
 800c90a:	81a3      	strh	r3, [r4, #12]
 800c90c:	e787      	b.n	800c81e <__sflush_r+0x1a>
 800c90e:	9b01      	ldr	r3, [sp, #4]
 800c910:	183f      	adds	r7, r7, r0
 800c912:	1a1b      	subs	r3, r3, r0
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	e7e7      	b.n	800c8e8 <__sflush_r+0xe4>
 800c918:	20400001 	.word	0x20400001

0800c91c <_fflush_r>:
 800c91c:	690b      	ldr	r3, [r1, #16]
 800c91e:	b570      	push	{r4, r5, r6, lr}
 800c920:	0005      	movs	r5, r0
 800c922:	000c      	movs	r4, r1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <_fflush_r+0x12>
 800c928:	2500      	movs	r5, #0
 800c92a:	0028      	movs	r0, r5
 800c92c:	bd70      	pop	{r4, r5, r6, pc}
 800c92e:	2800      	cmp	r0, #0
 800c930:	d004      	beq.n	800c93c <_fflush_r+0x20>
 800c932:	6983      	ldr	r3, [r0, #24]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <_fflush_r+0x20>
 800c938:	f000 f892 	bl	800ca60 <__sinit>
 800c93c:	4b14      	ldr	r3, [pc, #80]	; (800c990 <_fflush_r+0x74>)
 800c93e:	429c      	cmp	r4, r3
 800c940:	d11b      	bne.n	800c97a <_fflush_r+0x5e>
 800c942:	686c      	ldr	r4, [r5, #4]
 800c944:	220c      	movs	r2, #12
 800c946:	5ea3      	ldrsh	r3, [r4, r2]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0ed      	beq.n	800c928 <_fflush_r+0xc>
 800c94c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c94e:	07d2      	lsls	r2, r2, #31
 800c950:	d404      	bmi.n	800c95c <_fflush_r+0x40>
 800c952:	059b      	lsls	r3, r3, #22
 800c954:	d402      	bmi.n	800c95c <_fflush_r+0x40>
 800c956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c958:	f000 f923 	bl	800cba2 <__retarget_lock_acquire_recursive>
 800c95c:	0028      	movs	r0, r5
 800c95e:	0021      	movs	r1, r4
 800c960:	f7ff ff50 	bl	800c804 <__sflush_r>
 800c964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c966:	0005      	movs	r5, r0
 800c968:	07db      	lsls	r3, r3, #31
 800c96a:	d4de      	bmi.n	800c92a <_fflush_r+0xe>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	059b      	lsls	r3, r3, #22
 800c970:	d4db      	bmi.n	800c92a <_fflush_r+0xe>
 800c972:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c974:	f000 f916 	bl	800cba4 <__retarget_lock_release_recursive>
 800c978:	e7d7      	b.n	800c92a <_fflush_r+0xe>
 800c97a:	4b06      	ldr	r3, [pc, #24]	; (800c994 <_fflush_r+0x78>)
 800c97c:	429c      	cmp	r4, r3
 800c97e:	d101      	bne.n	800c984 <_fflush_r+0x68>
 800c980:	68ac      	ldr	r4, [r5, #8]
 800c982:	e7df      	b.n	800c944 <_fflush_r+0x28>
 800c984:	4b04      	ldr	r3, [pc, #16]	; (800c998 <_fflush_r+0x7c>)
 800c986:	429c      	cmp	r4, r3
 800c988:	d1dc      	bne.n	800c944 <_fflush_r+0x28>
 800c98a:	68ec      	ldr	r4, [r5, #12]
 800c98c:	e7da      	b.n	800c944 <_fflush_r+0x28>
 800c98e:	46c0      	nop			; (mov r8, r8)
 800c990:	0800d2dc 	.word	0x0800d2dc
 800c994:	0800d2fc 	.word	0x0800d2fc
 800c998:	0800d2bc 	.word	0x0800d2bc

0800c99c <std>:
 800c99c:	2300      	movs	r3, #0
 800c99e:	b510      	push	{r4, lr}
 800c9a0:	0004      	movs	r4, r0
 800c9a2:	6003      	str	r3, [r0, #0]
 800c9a4:	6043      	str	r3, [r0, #4]
 800c9a6:	6083      	str	r3, [r0, #8]
 800c9a8:	8181      	strh	r1, [r0, #12]
 800c9aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c9ac:	0019      	movs	r1, r3
 800c9ae:	81c2      	strh	r2, [r0, #14]
 800c9b0:	6103      	str	r3, [r0, #16]
 800c9b2:	6143      	str	r3, [r0, #20]
 800c9b4:	6183      	str	r3, [r0, #24]
 800c9b6:	2208      	movs	r2, #8
 800c9b8:	305c      	adds	r0, #92	; 0x5c
 800c9ba:	f7ff f9b7 	bl	800bd2c <memset>
 800c9be:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <std+0x38>)
 800c9c0:	6224      	str	r4, [r4, #32]
 800c9c2:	6263      	str	r3, [r4, #36]	; 0x24
 800c9c4:	4b04      	ldr	r3, [pc, #16]	; (800c9d8 <std+0x3c>)
 800c9c6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9c8:	4b04      	ldr	r3, [pc, #16]	; (800c9dc <std+0x40>)
 800c9ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9cc:	4b04      	ldr	r3, [pc, #16]	; (800c9e0 <std+0x44>)
 800c9ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c9d0:	bd10      	pop	{r4, pc}
 800c9d2:	46c0      	nop			; (mov r8, r8)
 800c9d4:	0800cd4d 	.word	0x0800cd4d
 800c9d8:	0800cd75 	.word	0x0800cd75
 800c9dc:	0800cdad 	.word	0x0800cdad
 800c9e0:	0800cdd9 	.word	0x0800cdd9

0800c9e4 <_cleanup_r>:
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	4902      	ldr	r1, [pc, #8]	; (800c9f0 <_cleanup_r+0xc>)
 800c9e8:	f000 f8ba 	bl	800cb60 <_fwalk_reent>
 800c9ec:	bd10      	pop	{r4, pc}
 800c9ee:	46c0      	nop			; (mov r8, r8)
 800c9f0:	0800c91d 	.word	0x0800c91d

0800c9f4 <__sfmoreglue>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	2568      	movs	r5, #104	; 0x68
 800c9f8:	1e4a      	subs	r2, r1, #1
 800c9fa:	4355      	muls	r5, r2
 800c9fc:	000e      	movs	r6, r1
 800c9fe:	0029      	movs	r1, r5
 800ca00:	3174      	adds	r1, #116	; 0x74
 800ca02:	f7ff fabd 	bl	800bf80 <_malloc_r>
 800ca06:	1e04      	subs	r4, r0, #0
 800ca08:	d008      	beq.n	800ca1c <__sfmoreglue+0x28>
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	002a      	movs	r2, r5
 800ca0e:	6001      	str	r1, [r0, #0]
 800ca10:	6046      	str	r6, [r0, #4]
 800ca12:	300c      	adds	r0, #12
 800ca14:	60a0      	str	r0, [r4, #8]
 800ca16:	3268      	adds	r2, #104	; 0x68
 800ca18:	f7ff f988 	bl	800bd2c <memset>
 800ca1c:	0020      	movs	r0, r4
 800ca1e:	bd70      	pop	{r4, r5, r6, pc}

0800ca20 <__sfp_lock_acquire>:
 800ca20:	b510      	push	{r4, lr}
 800ca22:	4802      	ldr	r0, [pc, #8]	; (800ca2c <__sfp_lock_acquire+0xc>)
 800ca24:	f000 f8bd 	bl	800cba2 <__retarget_lock_acquire_recursive>
 800ca28:	bd10      	pop	{r4, pc}
 800ca2a:	46c0      	nop			; (mov r8, r8)
 800ca2c:	20000461 	.word	0x20000461

0800ca30 <__sfp_lock_release>:
 800ca30:	b510      	push	{r4, lr}
 800ca32:	4802      	ldr	r0, [pc, #8]	; (800ca3c <__sfp_lock_release+0xc>)
 800ca34:	f000 f8b6 	bl	800cba4 <__retarget_lock_release_recursive>
 800ca38:	bd10      	pop	{r4, pc}
 800ca3a:	46c0      	nop			; (mov r8, r8)
 800ca3c:	20000461 	.word	0x20000461

0800ca40 <__sinit_lock_acquire>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	4802      	ldr	r0, [pc, #8]	; (800ca4c <__sinit_lock_acquire+0xc>)
 800ca44:	f000 f8ad 	bl	800cba2 <__retarget_lock_acquire_recursive>
 800ca48:	bd10      	pop	{r4, pc}
 800ca4a:	46c0      	nop			; (mov r8, r8)
 800ca4c:	20000462 	.word	0x20000462

0800ca50 <__sinit_lock_release>:
 800ca50:	b510      	push	{r4, lr}
 800ca52:	4802      	ldr	r0, [pc, #8]	; (800ca5c <__sinit_lock_release+0xc>)
 800ca54:	f000 f8a6 	bl	800cba4 <__retarget_lock_release_recursive>
 800ca58:	bd10      	pop	{r4, pc}
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	20000462 	.word	0x20000462

0800ca60 <__sinit>:
 800ca60:	b513      	push	{r0, r1, r4, lr}
 800ca62:	0004      	movs	r4, r0
 800ca64:	f7ff ffec 	bl	800ca40 <__sinit_lock_acquire>
 800ca68:	69a3      	ldr	r3, [r4, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <__sinit+0x14>
 800ca6e:	f7ff ffef 	bl	800ca50 <__sinit_lock_release>
 800ca72:	bd13      	pop	{r0, r1, r4, pc}
 800ca74:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca76:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ca78:	6523      	str	r3, [r4, #80]	; 0x50
 800ca7a:	4b13      	ldr	r3, [pc, #76]	; (800cac8 <__sinit+0x68>)
 800ca7c:	4a13      	ldr	r2, [pc, #76]	; (800cacc <__sinit+0x6c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca82:	9301      	str	r3, [sp, #4]
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	d101      	bne.n	800ca8c <__sinit+0x2c>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	61a3      	str	r3, [r4, #24]
 800ca8c:	0020      	movs	r0, r4
 800ca8e:	f000 f81f 	bl	800cad0 <__sfp>
 800ca92:	6060      	str	r0, [r4, #4]
 800ca94:	0020      	movs	r0, r4
 800ca96:	f000 f81b 	bl	800cad0 <__sfp>
 800ca9a:	60a0      	str	r0, [r4, #8]
 800ca9c:	0020      	movs	r0, r4
 800ca9e:	f000 f817 	bl	800cad0 <__sfp>
 800caa2:	2200      	movs	r2, #0
 800caa4:	2104      	movs	r1, #4
 800caa6:	60e0      	str	r0, [r4, #12]
 800caa8:	6860      	ldr	r0, [r4, #4]
 800caaa:	f7ff ff77 	bl	800c99c <std>
 800caae:	2201      	movs	r2, #1
 800cab0:	2109      	movs	r1, #9
 800cab2:	68a0      	ldr	r0, [r4, #8]
 800cab4:	f7ff ff72 	bl	800c99c <std>
 800cab8:	2202      	movs	r2, #2
 800caba:	2112      	movs	r1, #18
 800cabc:	68e0      	ldr	r0, [r4, #12]
 800cabe:	f7ff ff6d 	bl	800c99c <std>
 800cac2:	2301      	movs	r3, #1
 800cac4:	61a3      	str	r3, [r4, #24]
 800cac6:	e7d2      	b.n	800ca6e <__sinit+0xe>
 800cac8:	0800d1b0 	.word	0x0800d1b0
 800cacc:	0800c9e5 	.word	0x0800c9e5

0800cad0 <__sfp>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	0007      	movs	r7, r0
 800cad4:	f7ff ffa4 	bl	800ca20 <__sfp_lock_acquire>
 800cad8:	4b1f      	ldr	r3, [pc, #124]	; (800cb58 <__sfp+0x88>)
 800cada:	681e      	ldr	r6, [r3, #0]
 800cadc:	69b3      	ldr	r3, [r6, #24]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d102      	bne.n	800cae8 <__sfp+0x18>
 800cae2:	0030      	movs	r0, r6
 800cae4:	f7ff ffbc 	bl	800ca60 <__sinit>
 800cae8:	3648      	adds	r6, #72	; 0x48
 800caea:	68b4      	ldr	r4, [r6, #8]
 800caec:	6873      	ldr	r3, [r6, #4]
 800caee:	3b01      	subs	r3, #1
 800caf0:	d504      	bpl.n	800cafc <__sfp+0x2c>
 800caf2:	6833      	ldr	r3, [r6, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d022      	beq.n	800cb3e <__sfp+0x6e>
 800caf8:	6836      	ldr	r6, [r6, #0]
 800cafa:	e7f6      	b.n	800caea <__sfp+0x1a>
 800cafc:	220c      	movs	r2, #12
 800cafe:	5ea5      	ldrsh	r5, [r4, r2]
 800cb00:	2d00      	cmp	r5, #0
 800cb02:	d11a      	bne.n	800cb3a <__sfp+0x6a>
 800cb04:	0020      	movs	r0, r4
 800cb06:	4b15      	ldr	r3, [pc, #84]	; (800cb5c <__sfp+0x8c>)
 800cb08:	3058      	adds	r0, #88	; 0x58
 800cb0a:	60e3      	str	r3, [r4, #12]
 800cb0c:	6665      	str	r5, [r4, #100]	; 0x64
 800cb0e:	f000 f847 	bl	800cba0 <__retarget_lock_init_recursive>
 800cb12:	f7ff ff8d 	bl	800ca30 <__sfp_lock_release>
 800cb16:	0020      	movs	r0, r4
 800cb18:	2208      	movs	r2, #8
 800cb1a:	0029      	movs	r1, r5
 800cb1c:	6025      	str	r5, [r4, #0]
 800cb1e:	60a5      	str	r5, [r4, #8]
 800cb20:	6065      	str	r5, [r4, #4]
 800cb22:	6125      	str	r5, [r4, #16]
 800cb24:	6165      	str	r5, [r4, #20]
 800cb26:	61a5      	str	r5, [r4, #24]
 800cb28:	305c      	adds	r0, #92	; 0x5c
 800cb2a:	f7ff f8ff 	bl	800bd2c <memset>
 800cb2e:	6365      	str	r5, [r4, #52]	; 0x34
 800cb30:	63a5      	str	r5, [r4, #56]	; 0x38
 800cb32:	64a5      	str	r5, [r4, #72]	; 0x48
 800cb34:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cb36:	0020      	movs	r0, r4
 800cb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb3a:	3468      	adds	r4, #104	; 0x68
 800cb3c:	e7d7      	b.n	800caee <__sfp+0x1e>
 800cb3e:	2104      	movs	r1, #4
 800cb40:	0038      	movs	r0, r7
 800cb42:	f7ff ff57 	bl	800c9f4 <__sfmoreglue>
 800cb46:	1e04      	subs	r4, r0, #0
 800cb48:	6030      	str	r0, [r6, #0]
 800cb4a:	d1d5      	bne.n	800caf8 <__sfp+0x28>
 800cb4c:	f7ff ff70 	bl	800ca30 <__sfp_lock_release>
 800cb50:	230c      	movs	r3, #12
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	e7ef      	b.n	800cb36 <__sfp+0x66>
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	0800d1b0 	.word	0x0800d1b0
 800cb5c:	ffff0001 	.word	0xffff0001

0800cb60 <_fwalk_reent>:
 800cb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb62:	0004      	movs	r4, r0
 800cb64:	0006      	movs	r6, r0
 800cb66:	2700      	movs	r7, #0
 800cb68:	9101      	str	r1, [sp, #4]
 800cb6a:	3448      	adds	r4, #72	; 0x48
 800cb6c:	6863      	ldr	r3, [r4, #4]
 800cb6e:	68a5      	ldr	r5, [r4, #8]
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	d504      	bpl.n	800cb84 <_fwalk_reent+0x24>
 800cb7a:	6824      	ldr	r4, [r4, #0]
 800cb7c:	2c00      	cmp	r4, #0
 800cb7e:	d1f5      	bne.n	800cb6c <_fwalk_reent+0xc>
 800cb80:	0038      	movs	r0, r7
 800cb82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb84:	89ab      	ldrh	r3, [r5, #12]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d908      	bls.n	800cb9c <_fwalk_reent+0x3c>
 800cb8a:	220e      	movs	r2, #14
 800cb8c:	5eab      	ldrsh	r3, [r5, r2]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	d004      	beq.n	800cb9c <_fwalk_reent+0x3c>
 800cb92:	0029      	movs	r1, r5
 800cb94:	0030      	movs	r0, r6
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	4798      	blx	r3
 800cb9a:	4307      	orrs	r7, r0
 800cb9c:	3568      	adds	r5, #104	; 0x68
 800cb9e:	e7e8      	b.n	800cb72 <_fwalk_reent+0x12>

0800cba0 <__retarget_lock_init_recursive>:
 800cba0:	4770      	bx	lr

0800cba2 <__retarget_lock_acquire_recursive>:
 800cba2:	4770      	bx	lr

0800cba4 <__retarget_lock_release_recursive>:
 800cba4:	4770      	bx	lr
	...

0800cba8 <__swhatbuf_r>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	000e      	movs	r6, r1
 800cbac:	001d      	movs	r5, r3
 800cbae:	230e      	movs	r3, #14
 800cbb0:	5ec9      	ldrsh	r1, [r1, r3]
 800cbb2:	0014      	movs	r4, r2
 800cbb4:	b096      	sub	sp, #88	; 0x58
 800cbb6:	2900      	cmp	r1, #0
 800cbb8:	da08      	bge.n	800cbcc <__swhatbuf_r+0x24>
 800cbba:	220c      	movs	r2, #12
 800cbbc:	5eb3      	ldrsh	r3, [r6, r2]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	602a      	str	r2, [r5, #0]
 800cbc2:	061b      	lsls	r3, r3, #24
 800cbc4:	d411      	bmi.n	800cbea <__swhatbuf_r+0x42>
 800cbc6:	2380      	movs	r3, #128	; 0x80
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	e00f      	b.n	800cbec <__swhatbuf_r+0x44>
 800cbcc:	466a      	mov	r2, sp
 800cbce:	f000 f92f 	bl	800ce30 <_fstat_r>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	dbf1      	blt.n	800cbba <__swhatbuf_r+0x12>
 800cbd6:	23f0      	movs	r3, #240	; 0xf0
 800cbd8:	9901      	ldr	r1, [sp, #4]
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	4019      	ands	r1, r3
 800cbde:	4b05      	ldr	r3, [pc, #20]	; (800cbf4 <__swhatbuf_r+0x4c>)
 800cbe0:	18c9      	adds	r1, r1, r3
 800cbe2:	424b      	negs	r3, r1
 800cbe4:	4159      	adcs	r1, r3
 800cbe6:	6029      	str	r1, [r5, #0]
 800cbe8:	e7ed      	b.n	800cbc6 <__swhatbuf_r+0x1e>
 800cbea:	2340      	movs	r3, #64	; 0x40
 800cbec:	2000      	movs	r0, #0
 800cbee:	6023      	str	r3, [r4, #0]
 800cbf0:	b016      	add	sp, #88	; 0x58
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	ffffe000 	.word	0xffffe000

0800cbf8 <__smakebuf_r>:
 800cbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbfa:	2602      	movs	r6, #2
 800cbfc:	898b      	ldrh	r3, [r1, #12]
 800cbfe:	0005      	movs	r5, r0
 800cc00:	000c      	movs	r4, r1
 800cc02:	4233      	tst	r3, r6
 800cc04:	d006      	beq.n	800cc14 <__smakebuf_r+0x1c>
 800cc06:	0023      	movs	r3, r4
 800cc08:	3347      	adds	r3, #71	; 0x47
 800cc0a:	6023      	str	r3, [r4, #0]
 800cc0c:	6123      	str	r3, [r4, #16]
 800cc0e:	2301      	movs	r3, #1
 800cc10:	6163      	str	r3, [r4, #20]
 800cc12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cc14:	466a      	mov	r2, sp
 800cc16:	ab01      	add	r3, sp, #4
 800cc18:	f7ff ffc6 	bl	800cba8 <__swhatbuf_r>
 800cc1c:	9900      	ldr	r1, [sp, #0]
 800cc1e:	0007      	movs	r7, r0
 800cc20:	0028      	movs	r0, r5
 800cc22:	f7ff f9ad 	bl	800bf80 <_malloc_r>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d108      	bne.n	800cc3c <__smakebuf_r+0x44>
 800cc2a:	220c      	movs	r2, #12
 800cc2c:	5ea3      	ldrsh	r3, [r4, r2]
 800cc2e:	059a      	lsls	r2, r3, #22
 800cc30:	d4ef      	bmi.n	800cc12 <__smakebuf_r+0x1a>
 800cc32:	2203      	movs	r2, #3
 800cc34:	4393      	bics	r3, r2
 800cc36:	431e      	orrs	r6, r3
 800cc38:	81a6      	strh	r6, [r4, #12]
 800cc3a:	e7e4      	b.n	800cc06 <__smakebuf_r+0xe>
 800cc3c:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <__smakebuf_r+0x84>)
 800cc3e:	62ab      	str	r3, [r5, #40]	; 0x28
 800cc40:	2380      	movs	r3, #128	; 0x80
 800cc42:	89a2      	ldrh	r2, [r4, #12]
 800cc44:	6020      	str	r0, [r4, #0]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	81a3      	strh	r3, [r4, #12]
 800cc4a:	9b00      	ldr	r3, [sp, #0]
 800cc4c:	6120      	str	r0, [r4, #16]
 800cc4e:	6163      	str	r3, [r4, #20]
 800cc50:	9b01      	ldr	r3, [sp, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00d      	beq.n	800cc72 <__smakebuf_r+0x7a>
 800cc56:	0028      	movs	r0, r5
 800cc58:	230e      	movs	r3, #14
 800cc5a:	5ee1      	ldrsh	r1, [r4, r3]
 800cc5c:	f000 f8fa 	bl	800ce54 <_isatty_r>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d006      	beq.n	800cc72 <__smakebuf_r+0x7a>
 800cc64:	2203      	movs	r2, #3
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	4393      	bics	r3, r2
 800cc6a:	001a      	movs	r2, r3
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	81a3      	strh	r3, [r4, #12]
 800cc72:	89a0      	ldrh	r0, [r4, #12]
 800cc74:	4307      	orrs	r7, r0
 800cc76:	81a7      	strh	r7, [r4, #12]
 800cc78:	e7cb      	b.n	800cc12 <__smakebuf_r+0x1a>
 800cc7a:	46c0      	nop			; (mov r8, r8)
 800cc7c:	0800c9e5 	.word	0x0800c9e5

0800cc80 <memchr>:
 800cc80:	b2c9      	uxtb	r1, r1
 800cc82:	1882      	adds	r2, r0, r2
 800cc84:	4290      	cmp	r0, r2
 800cc86:	d101      	bne.n	800cc8c <memchr+0xc>
 800cc88:	2000      	movs	r0, #0
 800cc8a:	4770      	bx	lr
 800cc8c:	7803      	ldrb	r3, [r0, #0]
 800cc8e:	428b      	cmp	r3, r1
 800cc90:	d0fb      	beq.n	800cc8a <memchr+0xa>
 800cc92:	3001      	adds	r0, #1
 800cc94:	e7f6      	b.n	800cc84 <memchr+0x4>
	...

0800cc98 <__malloc_lock>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	4802      	ldr	r0, [pc, #8]	; (800cca4 <__malloc_lock+0xc>)
 800cc9c:	f7ff ff81 	bl	800cba2 <__retarget_lock_acquire_recursive>
 800cca0:	bd10      	pop	{r4, pc}
 800cca2:	46c0      	nop			; (mov r8, r8)
 800cca4:	20000460 	.word	0x20000460

0800cca8 <__malloc_unlock>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	4802      	ldr	r0, [pc, #8]	; (800ccb4 <__malloc_unlock+0xc>)
 800ccac:	f7ff ff7a 	bl	800cba4 <__retarget_lock_release_recursive>
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	46c0      	nop			; (mov r8, r8)
 800ccb4:	20000460 	.word	0x20000460

0800ccb8 <_raise_r>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	0004      	movs	r4, r0
 800ccbc:	000d      	movs	r5, r1
 800ccbe:	291f      	cmp	r1, #31
 800ccc0:	d904      	bls.n	800cccc <_raise_r+0x14>
 800ccc2:	2316      	movs	r3, #22
 800ccc4:	6003      	str	r3, [r0, #0]
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	4240      	negs	r0, r0
 800ccca:	bd70      	pop	{r4, r5, r6, pc}
 800cccc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d004      	beq.n	800ccdc <_raise_r+0x24>
 800ccd2:	008a      	lsls	r2, r1, #2
 800ccd4:	189b      	adds	r3, r3, r2
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	2a00      	cmp	r2, #0
 800ccda:	d108      	bne.n	800ccee <_raise_r+0x36>
 800ccdc:	0020      	movs	r0, r4
 800ccde:	f000 f831 	bl	800cd44 <_getpid_r>
 800cce2:	002a      	movs	r2, r5
 800cce4:	0001      	movs	r1, r0
 800cce6:	0020      	movs	r0, r4
 800cce8:	f000 f81a 	bl	800cd20 <_kill_r>
 800ccec:	e7ed      	b.n	800ccca <_raise_r+0x12>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	2a01      	cmp	r2, #1
 800ccf2:	d0ea      	beq.n	800ccca <_raise_r+0x12>
 800ccf4:	1c51      	adds	r1, r2, #1
 800ccf6:	d103      	bne.n	800cd00 <_raise_r+0x48>
 800ccf8:	2316      	movs	r3, #22
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	e7e4      	b.n	800ccca <_raise_r+0x12>
 800cd00:	2400      	movs	r4, #0
 800cd02:	0028      	movs	r0, r5
 800cd04:	601c      	str	r4, [r3, #0]
 800cd06:	4790      	blx	r2
 800cd08:	0020      	movs	r0, r4
 800cd0a:	e7de      	b.n	800ccca <_raise_r+0x12>

0800cd0c <raise>:
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	4b03      	ldr	r3, [pc, #12]	; (800cd1c <raise+0x10>)
 800cd10:	0001      	movs	r1, r0
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	f7ff ffd0 	bl	800ccb8 <_raise_r>
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	46c0      	nop			; (mov r8, r8)
 800cd1c:	20000018 	.word	0x20000018

0800cd20 <_kill_r>:
 800cd20:	2300      	movs	r3, #0
 800cd22:	b570      	push	{r4, r5, r6, lr}
 800cd24:	4d06      	ldr	r5, [pc, #24]	; (800cd40 <_kill_r+0x20>)
 800cd26:	0004      	movs	r4, r0
 800cd28:	0008      	movs	r0, r1
 800cd2a:	0011      	movs	r1, r2
 800cd2c:	602b      	str	r3, [r5, #0]
 800cd2e:	f7fc fde0 	bl	80098f2 <_kill>
 800cd32:	1c43      	adds	r3, r0, #1
 800cd34:	d103      	bne.n	800cd3e <_kill_r+0x1e>
 800cd36:	682b      	ldr	r3, [r5, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d000      	beq.n	800cd3e <_kill_r+0x1e>
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	20000464 	.word	0x20000464

0800cd44 <_getpid_r>:
 800cd44:	b510      	push	{r4, lr}
 800cd46:	f7fc fdce 	bl	80098e6 <_getpid>
 800cd4a:	bd10      	pop	{r4, pc}

0800cd4c <__sread>:
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	000c      	movs	r4, r1
 800cd50:	250e      	movs	r5, #14
 800cd52:	5f49      	ldrsh	r1, [r1, r5]
 800cd54:	f000 f8a4 	bl	800cea0 <_read_r>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	db03      	blt.n	800cd64 <__sread+0x18>
 800cd5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cd5e:	181b      	adds	r3, r3, r0
 800cd60:	6563      	str	r3, [r4, #84]	; 0x54
 800cd62:	bd70      	pop	{r4, r5, r6, pc}
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	4a02      	ldr	r2, [pc, #8]	; (800cd70 <__sread+0x24>)
 800cd68:	4013      	ands	r3, r2
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	e7f9      	b.n	800cd62 <__sread+0x16>
 800cd6e:	46c0      	nop			; (mov r8, r8)
 800cd70:	ffffefff 	.word	0xffffefff

0800cd74 <__swrite>:
 800cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd76:	001f      	movs	r7, r3
 800cd78:	898b      	ldrh	r3, [r1, #12]
 800cd7a:	0005      	movs	r5, r0
 800cd7c:	000c      	movs	r4, r1
 800cd7e:	0016      	movs	r6, r2
 800cd80:	05db      	lsls	r3, r3, #23
 800cd82:	d505      	bpl.n	800cd90 <__swrite+0x1c>
 800cd84:	230e      	movs	r3, #14
 800cd86:	5ec9      	ldrsh	r1, [r1, r3]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2302      	movs	r3, #2
 800cd8c:	f000 f874 	bl	800ce78 <_lseek_r>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	4a05      	ldr	r2, [pc, #20]	; (800cda8 <__swrite+0x34>)
 800cd94:	0028      	movs	r0, r5
 800cd96:	4013      	ands	r3, r2
 800cd98:	81a3      	strh	r3, [r4, #12]
 800cd9a:	0032      	movs	r2, r6
 800cd9c:	230e      	movs	r3, #14
 800cd9e:	5ee1      	ldrsh	r1, [r4, r3]
 800cda0:	003b      	movs	r3, r7
 800cda2:	f000 f81f 	bl	800cde4 <_write_r>
 800cda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda8:	ffffefff 	.word	0xffffefff

0800cdac <__sseek>:
 800cdac:	b570      	push	{r4, r5, r6, lr}
 800cdae:	000c      	movs	r4, r1
 800cdb0:	250e      	movs	r5, #14
 800cdb2:	5f49      	ldrsh	r1, [r1, r5]
 800cdb4:	f000 f860 	bl	800ce78 <_lseek_r>
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	1c42      	adds	r2, r0, #1
 800cdbc:	d103      	bne.n	800cdc6 <__sseek+0x1a>
 800cdbe:	4a05      	ldr	r2, [pc, #20]	; (800cdd4 <__sseek+0x28>)
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
 800cdc6:	2280      	movs	r2, #128	; 0x80
 800cdc8:	0152      	lsls	r2, r2, #5
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	6560      	str	r0, [r4, #84]	; 0x54
 800cdd0:	e7f8      	b.n	800cdc4 <__sseek+0x18>
 800cdd2:	46c0      	nop			; (mov r8, r8)
 800cdd4:	ffffefff 	.word	0xffffefff

0800cdd8 <__sclose>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	230e      	movs	r3, #14
 800cddc:	5ec9      	ldrsh	r1, [r1, r3]
 800cdde:	f000 f815 	bl	800ce0c <_close_r>
 800cde2:	bd10      	pop	{r4, pc}

0800cde4 <_write_r>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	0004      	movs	r4, r0
 800cde8:	0008      	movs	r0, r1
 800cdea:	0011      	movs	r1, r2
 800cdec:	001a      	movs	r2, r3
 800cdee:	2300      	movs	r3, #0
 800cdf0:	4d05      	ldr	r5, [pc, #20]	; (800ce08 <_write_r+0x24>)
 800cdf2:	602b      	str	r3, [r5, #0]
 800cdf4:	f7fc fdb6 	bl	8009964 <_write>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d103      	bne.n	800ce04 <_write_r+0x20>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d000      	beq.n	800ce04 <_write_r+0x20>
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	bd70      	pop	{r4, r5, r6, pc}
 800ce06:	46c0      	nop			; (mov r8, r8)
 800ce08:	20000464 	.word	0x20000464

0800ce0c <_close_r>:
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	b570      	push	{r4, r5, r6, lr}
 800ce10:	4d06      	ldr	r5, [pc, #24]	; (800ce2c <_close_r+0x20>)
 800ce12:	0004      	movs	r4, r0
 800ce14:	0008      	movs	r0, r1
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	f7fc fdc0 	bl	800999c <_close>
 800ce1c:	1c43      	adds	r3, r0, #1
 800ce1e:	d103      	bne.n	800ce28 <_close_r+0x1c>
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d000      	beq.n	800ce28 <_close_r+0x1c>
 800ce26:	6023      	str	r3, [r4, #0]
 800ce28:	bd70      	pop	{r4, r5, r6, pc}
 800ce2a:	46c0      	nop			; (mov r8, r8)
 800ce2c:	20000464 	.word	0x20000464

0800ce30 <_fstat_r>:
 800ce30:	2300      	movs	r3, #0
 800ce32:	b570      	push	{r4, r5, r6, lr}
 800ce34:	4d06      	ldr	r5, [pc, #24]	; (800ce50 <_fstat_r+0x20>)
 800ce36:	0004      	movs	r4, r0
 800ce38:	0008      	movs	r0, r1
 800ce3a:	0011      	movs	r1, r2
 800ce3c:	602b      	str	r3, [r5, #0]
 800ce3e:	f7fc fdb7 	bl	80099b0 <_fstat>
 800ce42:	1c43      	adds	r3, r0, #1
 800ce44:	d103      	bne.n	800ce4e <_fstat_r+0x1e>
 800ce46:	682b      	ldr	r3, [r5, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d000      	beq.n	800ce4e <_fstat_r+0x1e>
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	20000464 	.word	0x20000464

0800ce54 <_isatty_r>:
 800ce54:	2300      	movs	r3, #0
 800ce56:	b570      	push	{r4, r5, r6, lr}
 800ce58:	4d06      	ldr	r5, [pc, #24]	; (800ce74 <_isatty_r+0x20>)
 800ce5a:	0004      	movs	r4, r0
 800ce5c:	0008      	movs	r0, r1
 800ce5e:	602b      	str	r3, [r5, #0]
 800ce60:	f7fc fdb4 	bl	80099cc <_isatty>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d103      	bne.n	800ce70 <_isatty_r+0x1c>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d000      	beq.n	800ce70 <_isatty_r+0x1c>
 800ce6e:	6023      	str	r3, [r4, #0]
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
 800ce72:	46c0      	nop			; (mov r8, r8)
 800ce74:	20000464 	.word	0x20000464

0800ce78 <_lseek_r>:
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	0004      	movs	r4, r0
 800ce7c:	0008      	movs	r0, r1
 800ce7e:	0011      	movs	r1, r2
 800ce80:	001a      	movs	r2, r3
 800ce82:	2300      	movs	r3, #0
 800ce84:	4d05      	ldr	r5, [pc, #20]	; (800ce9c <_lseek_r+0x24>)
 800ce86:	602b      	str	r3, [r5, #0]
 800ce88:	f7fc fda9 	bl	80099de <_lseek>
 800ce8c:	1c43      	adds	r3, r0, #1
 800ce8e:	d103      	bne.n	800ce98 <_lseek_r+0x20>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d000      	beq.n	800ce98 <_lseek_r+0x20>
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	bd70      	pop	{r4, r5, r6, pc}
 800ce9a:	46c0      	nop			; (mov r8, r8)
 800ce9c:	20000464 	.word	0x20000464

0800cea0 <_read_r>:
 800cea0:	b570      	push	{r4, r5, r6, lr}
 800cea2:	0004      	movs	r4, r0
 800cea4:	0008      	movs	r0, r1
 800cea6:	0011      	movs	r1, r2
 800cea8:	001a      	movs	r2, r3
 800ceaa:	2300      	movs	r3, #0
 800ceac:	4d05      	ldr	r5, [pc, #20]	; (800cec4 <_read_r+0x24>)
 800ceae:	602b      	str	r3, [r5, #0]
 800ceb0:	f7fc fd3b 	bl	800992a <_read>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d103      	bne.n	800cec0 <_read_r+0x20>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d000      	beq.n	800cec0 <_read_r+0x20>
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	bd70      	pop	{r4, r5, r6, pc}
 800cec2:	46c0      	nop			; (mov r8, r8)
 800cec4:	20000464 	.word	0x20000464

0800cec8 <_init>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	46c0      	nop			; (mov r8, r8)
 800cecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cece:	bc08      	pop	{r3}
 800ced0:	469e      	mov	lr, r3
 800ced2:	4770      	bx	lr

0800ced4 <_fini>:
 800ced4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced6:	46c0      	nop			; (mov r8, r8)
 800ced8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceda:	bc08      	pop	{r3}
 800cedc:	469e      	mov	lr, r3
 800cede:	4770      	bx	lr
