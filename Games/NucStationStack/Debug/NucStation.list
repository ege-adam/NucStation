
NucStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  080080c0  080080c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800b170  0800b170  0000b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4c4  0800b4c4  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4c4  0800b4c4  0000b4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4cc  0800b4cc  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4cc  0800b4cc  0000b4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d0  0800b4d0  0000b4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800b4d4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  0800b4e0  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800b4e0  000102d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009676  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a25  00000000  00000000  000196aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0001b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0001b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014bfc  00000000  00000000  0001bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e0b  00000000  00000000  00030bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079ed7  00000000  00000000  0003a9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b48ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  000b4900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080c0 <__do_global_dtors_aux>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4c06      	ldr	r4, [pc, #24]	; (80080dc <__do_global_dtors_aux+0x1c>)
 80080c4:	7823      	ldrb	r3, [r4, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <__do_global_dtors_aux+0x1a>
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <__do_global_dtors_aux+0x20>)
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d0:	4804      	ldr	r0, [pc, #16]	; (80080e4 <__do_global_dtors_aux+0x24>)
 80080d2:	e000      	b.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d4:	bf00      	nop
 80080d6:	2301      	movs	r3, #1
 80080d8:	7023      	strb	r3, [r4, #0]
 80080da:	bd10      	pop	{r4, pc}
 80080dc:	2000000c 	.word	0x2000000c
 80080e0:	00000000 	.word	0x00000000
 80080e4:	0800b158 	.word	0x0800b158

080080e8 <frame_dummy>:
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <frame_dummy+0x14>)
 80080ea:	b510      	push	{r4, lr}
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <frame_dummy+0x10>
 80080f0:	4903      	ldr	r1, [pc, #12]	; (8008100 <frame_dummy+0x18>)
 80080f2:	4804      	ldr	r0, [pc, #16]	; (8008104 <frame_dummy+0x1c>)
 80080f4:	e000      	b.n	80080f8 <frame_dummy+0x10>
 80080f6:	bf00      	nop
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	00000000 	.word	0x00000000
 8008100:	20000010 	.word	0x20000010
 8008104:	0800b158 	.word	0x0800b158

08008108 <__udivsi3>:
 8008108:	2200      	movs	r2, #0
 800810a:	0843      	lsrs	r3, r0, #1
 800810c:	428b      	cmp	r3, r1
 800810e:	d374      	bcc.n	80081fa <__udivsi3+0xf2>
 8008110:	0903      	lsrs	r3, r0, #4
 8008112:	428b      	cmp	r3, r1
 8008114:	d35f      	bcc.n	80081d6 <__udivsi3+0xce>
 8008116:	0a03      	lsrs	r3, r0, #8
 8008118:	428b      	cmp	r3, r1
 800811a:	d344      	bcc.n	80081a6 <__udivsi3+0x9e>
 800811c:	0b03      	lsrs	r3, r0, #12
 800811e:	428b      	cmp	r3, r1
 8008120:	d328      	bcc.n	8008174 <__udivsi3+0x6c>
 8008122:	0c03      	lsrs	r3, r0, #16
 8008124:	428b      	cmp	r3, r1
 8008126:	d30d      	bcc.n	8008144 <__udivsi3+0x3c>
 8008128:	22ff      	movs	r2, #255	; 0xff
 800812a:	0209      	lsls	r1, r1, #8
 800812c:	ba12      	rev	r2, r2
 800812e:	0c03      	lsrs	r3, r0, #16
 8008130:	428b      	cmp	r3, r1
 8008132:	d302      	bcc.n	800813a <__udivsi3+0x32>
 8008134:	1212      	asrs	r2, r2, #8
 8008136:	0209      	lsls	r1, r1, #8
 8008138:	d065      	beq.n	8008206 <__udivsi3+0xfe>
 800813a:	0b03      	lsrs	r3, r0, #12
 800813c:	428b      	cmp	r3, r1
 800813e:	d319      	bcc.n	8008174 <__udivsi3+0x6c>
 8008140:	e000      	b.n	8008144 <__udivsi3+0x3c>
 8008142:	0a09      	lsrs	r1, r1, #8
 8008144:	0bc3      	lsrs	r3, r0, #15
 8008146:	428b      	cmp	r3, r1
 8008148:	d301      	bcc.n	800814e <__udivsi3+0x46>
 800814a:	03cb      	lsls	r3, r1, #15
 800814c:	1ac0      	subs	r0, r0, r3
 800814e:	4152      	adcs	r2, r2
 8008150:	0b83      	lsrs	r3, r0, #14
 8008152:	428b      	cmp	r3, r1
 8008154:	d301      	bcc.n	800815a <__udivsi3+0x52>
 8008156:	038b      	lsls	r3, r1, #14
 8008158:	1ac0      	subs	r0, r0, r3
 800815a:	4152      	adcs	r2, r2
 800815c:	0b43      	lsrs	r3, r0, #13
 800815e:	428b      	cmp	r3, r1
 8008160:	d301      	bcc.n	8008166 <__udivsi3+0x5e>
 8008162:	034b      	lsls	r3, r1, #13
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	4152      	adcs	r2, r2
 8008168:	0b03      	lsrs	r3, r0, #12
 800816a:	428b      	cmp	r3, r1
 800816c:	d301      	bcc.n	8008172 <__udivsi3+0x6a>
 800816e:	030b      	lsls	r3, r1, #12
 8008170:	1ac0      	subs	r0, r0, r3
 8008172:	4152      	adcs	r2, r2
 8008174:	0ac3      	lsrs	r3, r0, #11
 8008176:	428b      	cmp	r3, r1
 8008178:	d301      	bcc.n	800817e <__udivsi3+0x76>
 800817a:	02cb      	lsls	r3, r1, #11
 800817c:	1ac0      	subs	r0, r0, r3
 800817e:	4152      	adcs	r2, r2
 8008180:	0a83      	lsrs	r3, r0, #10
 8008182:	428b      	cmp	r3, r1
 8008184:	d301      	bcc.n	800818a <__udivsi3+0x82>
 8008186:	028b      	lsls	r3, r1, #10
 8008188:	1ac0      	subs	r0, r0, r3
 800818a:	4152      	adcs	r2, r2
 800818c:	0a43      	lsrs	r3, r0, #9
 800818e:	428b      	cmp	r3, r1
 8008190:	d301      	bcc.n	8008196 <__udivsi3+0x8e>
 8008192:	024b      	lsls	r3, r1, #9
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	4152      	adcs	r2, r2
 8008198:	0a03      	lsrs	r3, r0, #8
 800819a:	428b      	cmp	r3, r1
 800819c:	d301      	bcc.n	80081a2 <__udivsi3+0x9a>
 800819e:	020b      	lsls	r3, r1, #8
 80081a0:	1ac0      	subs	r0, r0, r3
 80081a2:	4152      	adcs	r2, r2
 80081a4:	d2cd      	bcs.n	8008142 <__udivsi3+0x3a>
 80081a6:	09c3      	lsrs	r3, r0, #7
 80081a8:	428b      	cmp	r3, r1
 80081aa:	d301      	bcc.n	80081b0 <__udivsi3+0xa8>
 80081ac:	01cb      	lsls	r3, r1, #7
 80081ae:	1ac0      	subs	r0, r0, r3
 80081b0:	4152      	adcs	r2, r2
 80081b2:	0983      	lsrs	r3, r0, #6
 80081b4:	428b      	cmp	r3, r1
 80081b6:	d301      	bcc.n	80081bc <__udivsi3+0xb4>
 80081b8:	018b      	lsls	r3, r1, #6
 80081ba:	1ac0      	subs	r0, r0, r3
 80081bc:	4152      	adcs	r2, r2
 80081be:	0943      	lsrs	r3, r0, #5
 80081c0:	428b      	cmp	r3, r1
 80081c2:	d301      	bcc.n	80081c8 <__udivsi3+0xc0>
 80081c4:	014b      	lsls	r3, r1, #5
 80081c6:	1ac0      	subs	r0, r0, r3
 80081c8:	4152      	adcs	r2, r2
 80081ca:	0903      	lsrs	r3, r0, #4
 80081cc:	428b      	cmp	r3, r1
 80081ce:	d301      	bcc.n	80081d4 <__udivsi3+0xcc>
 80081d0:	010b      	lsls	r3, r1, #4
 80081d2:	1ac0      	subs	r0, r0, r3
 80081d4:	4152      	adcs	r2, r2
 80081d6:	08c3      	lsrs	r3, r0, #3
 80081d8:	428b      	cmp	r3, r1
 80081da:	d301      	bcc.n	80081e0 <__udivsi3+0xd8>
 80081dc:	00cb      	lsls	r3, r1, #3
 80081de:	1ac0      	subs	r0, r0, r3
 80081e0:	4152      	adcs	r2, r2
 80081e2:	0883      	lsrs	r3, r0, #2
 80081e4:	428b      	cmp	r3, r1
 80081e6:	d301      	bcc.n	80081ec <__udivsi3+0xe4>
 80081e8:	008b      	lsls	r3, r1, #2
 80081ea:	1ac0      	subs	r0, r0, r3
 80081ec:	4152      	adcs	r2, r2
 80081ee:	0843      	lsrs	r3, r0, #1
 80081f0:	428b      	cmp	r3, r1
 80081f2:	d301      	bcc.n	80081f8 <__udivsi3+0xf0>
 80081f4:	004b      	lsls	r3, r1, #1
 80081f6:	1ac0      	subs	r0, r0, r3
 80081f8:	4152      	adcs	r2, r2
 80081fa:	1a41      	subs	r1, r0, r1
 80081fc:	d200      	bcs.n	8008200 <__udivsi3+0xf8>
 80081fe:	4601      	mov	r1, r0
 8008200:	4152      	adcs	r2, r2
 8008202:	4610      	mov	r0, r2
 8008204:	4770      	bx	lr
 8008206:	e7ff      	b.n	8008208 <__udivsi3+0x100>
 8008208:	b501      	push	{r0, lr}
 800820a:	2000      	movs	r0, #0
 800820c:	f000 f806 	bl	800821c <__aeabi_idiv0>
 8008210:	bd02      	pop	{r1, pc}
 8008212:	46c0      	nop			; (mov r8, r8)

08008214 <__aeabi_uidivmod>:
 8008214:	2900      	cmp	r1, #0
 8008216:	d0f7      	beq.n	8008208 <__udivsi3+0x100>
 8008218:	e776      	b.n	8008108 <__udivsi3>
 800821a:	4770      	bx	lr

0800821c <__aeabi_idiv0>:
 800821c:	4770      	bx	lr
 800821e:	46c0      	nop			; (mov r8, r8)

08008220 <__aeabi_uldivmod>:
 8008220:	2b00      	cmp	r3, #0
 8008222:	d111      	bne.n	8008248 <__aeabi_uldivmod+0x28>
 8008224:	2a00      	cmp	r2, #0
 8008226:	d10f      	bne.n	8008248 <__aeabi_uldivmod+0x28>
 8008228:	2900      	cmp	r1, #0
 800822a:	d100      	bne.n	800822e <__aeabi_uldivmod+0xe>
 800822c:	2800      	cmp	r0, #0
 800822e:	d002      	beq.n	8008236 <__aeabi_uldivmod+0x16>
 8008230:	2100      	movs	r1, #0
 8008232:	43c9      	mvns	r1, r1
 8008234:	0008      	movs	r0, r1
 8008236:	b407      	push	{r0, r1, r2}
 8008238:	4802      	ldr	r0, [pc, #8]	; (8008244 <__aeabi_uldivmod+0x24>)
 800823a:	a102      	add	r1, pc, #8	; (adr r1, 8008244 <__aeabi_uldivmod+0x24>)
 800823c:	1840      	adds	r0, r0, r1
 800823e:	9002      	str	r0, [sp, #8]
 8008240:	bd03      	pop	{r0, r1, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	ffffffd9 	.word	0xffffffd9
 8008248:	b403      	push	{r0, r1}
 800824a:	4668      	mov	r0, sp
 800824c:	b501      	push	{r0, lr}
 800824e:	9802      	ldr	r0, [sp, #8]
 8008250:	f000 f834 	bl	80082bc <__udivmoddi4>
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	469e      	mov	lr, r3
 8008258:	b002      	add	sp, #8
 800825a:	bc0c      	pop	{r2, r3}
 800825c:	4770      	bx	lr
 800825e:	46c0      	nop			; (mov r8, r8)

08008260 <__aeabi_lmul>:
 8008260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008262:	46ce      	mov	lr, r9
 8008264:	4647      	mov	r7, r8
 8008266:	b580      	push	{r7, lr}
 8008268:	0007      	movs	r7, r0
 800826a:	4699      	mov	r9, r3
 800826c:	0c3b      	lsrs	r3, r7, #16
 800826e:	469c      	mov	ip, r3
 8008270:	0413      	lsls	r3, r2, #16
 8008272:	0c1b      	lsrs	r3, r3, #16
 8008274:	001d      	movs	r5, r3
 8008276:	000e      	movs	r6, r1
 8008278:	4661      	mov	r1, ip
 800827a:	0400      	lsls	r0, r0, #16
 800827c:	0c14      	lsrs	r4, r2, #16
 800827e:	0c00      	lsrs	r0, r0, #16
 8008280:	4345      	muls	r5, r0
 8008282:	434b      	muls	r3, r1
 8008284:	4360      	muls	r0, r4
 8008286:	4361      	muls	r1, r4
 8008288:	18c0      	adds	r0, r0, r3
 800828a:	0c2c      	lsrs	r4, r5, #16
 800828c:	1820      	adds	r0, r4, r0
 800828e:	468c      	mov	ip, r1
 8008290:	4283      	cmp	r3, r0
 8008292:	d903      	bls.n	800829c <__aeabi_lmul+0x3c>
 8008294:	2380      	movs	r3, #128	; 0x80
 8008296:	025b      	lsls	r3, r3, #9
 8008298:	4698      	mov	r8, r3
 800829a:	44c4      	add	ip, r8
 800829c:	4649      	mov	r1, r9
 800829e:	4379      	muls	r1, r7
 80082a0:	4372      	muls	r2, r6
 80082a2:	0c03      	lsrs	r3, r0, #16
 80082a4:	4463      	add	r3, ip
 80082a6:	042d      	lsls	r5, r5, #16
 80082a8:	0c2d      	lsrs	r5, r5, #16
 80082aa:	18c9      	adds	r1, r1, r3
 80082ac:	0400      	lsls	r0, r0, #16
 80082ae:	1940      	adds	r0, r0, r5
 80082b0:	1889      	adds	r1, r1, r2
 80082b2:	bcc0      	pop	{r6, r7}
 80082b4:	46b9      	mov	r9, r7
 80082b6:	46b0      	mov	r8, r6
 80082b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ba:	46c0      	nop			; (mov r8, r8)

080082bc <__udivmoddi4>:
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	4657      	mov	r7, sl
 80082c0:	464e      	mov	r6, r9
 80082c2:	4645      	mov	r5, r8
 80082c4:	46de      	mov	lr, fp
 80082c6:	b5e0      	push	{r5, r6, r7, lr}
 80082c8:	0004      	movs	r4, r0
 80082ca:	000d      	movs	r5, r1
 80082cc:	4692      	mov	sl, r2
 80082ce:	4699      	mov	r9, r3
 80082d0:	b083      	sub	sp, #12
 80082d2:	428b      	cmp	r3, r1
 80082d4:	d830      	bhi.n	8008338 <__udivmoddi4+0x7c>
 80082d6:	d02d      	beq.n	8008334 <__udivmoddi4+0x78>
 80082d8:	4649      	mov	r1, r9
 80082da:	4650      	mov	r0, sl
 80082dc:	f000 f8d8 	bl	8008490 <__clzdi2>
 80082e0:	0029      	movs	r1, r5
 80082e2:	0006      	movs	r6, r0
 80082e4:	0020      	movs	r0, r4
 80082e6:	f000 f8d3 	bl	8008490 <__clzdi2>
 80082ea:	1a33      	subs	r3, r6, r0
 80082ec:	4698      	mov	r8, r3
 80082ee:	3b20      	subs	r3, #32
 80082f0:	469b      	mov	fp, r3
 80082f2:	d433      	bmi.n	800835c <__udivmoddi4+0xa0>
 80082f4:	465a      	mov	r2, fp
 80082f6:	4653      	mov	r3, sl
 80082f8:	4093      	lsls	r3, r2
 80082fa:	4642      	mov	r2, r8
 80082fc:	001f      	movs	r7, r3
 80082fe:	4653      	mov	r3, sl
 8008300:	4093      	lsls	r3, r2
 8008302:	001e      	movs	r6, r3
 8008304:	42af      	cmp	r7, r5
 8008306:	d83a      	bhi.n	800837e <__udivmoddi4+0xc2>
 8008308:	42af      	cmp	r7, r5
 800830a:	d100      	bne.n	800830e <__udivmoddi4+0x52>
 800830c:	e078      	b.n	8008400 <__udivmoddi4+0x144>
 800830e:	465b      	mov	r3, fp
 8008310:	1ba4      	subs	r4, r4, r6
 8008312:	41bd      	sbcs	r5, r7
 8008314:	2b00      	cmp	r3, #0
 8008316:	da00      	bge.n	800831a <__udivmoddi4+0x5e>
 8008318:	e075      	b.n	8008406 <__udivmoddi4+0x14a>
 800831a:	2200      	movs	r2, #0
 800831c:	2300      	movs	r3, #0
 800831e:	9200      	str	r2, [sp, #0]
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	2301      	movs	r3, #1
 8008324:	465a      	mov	r2, fp
 8008326:	4093      	lsls	r3, r2
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	2301      	movs	r3, #1
 800832c:	4642      	mov	r2, r8
 800832e:	4093      	lsls	r3, r2
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	e028      	b.n	8008386 <__udivmoddi4+0xca>
 8008334:	4282      	cmp	r2, r0
 8008336:	d9cf      	bls.n	80082d8 <__udivmoddi4+0x1c>
 8008338:	2200      	movs	r2, #0
 800833a:	2300      	movs	r3, #0
 800833c:	9200      	str	r2, [sp, #0]
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <__udivmoddi4+0x8e>
 8008346:	601c      	str	r4, [r3, #0]
 8008348:	605d      	str	r5, [r3, #4]
 800834a:	9800      	ldr	r0, [sp, #0]
 800834c:	9901      	ldr	r1, [sp, #4]
 800834e:	b003      	add	sp, #12
 8008350:	bcf0      	pop	{r4, r5, r6, r7}
 8008352:	46bb      	mov	fp, r7
 8008354:	46b2      	mov	sl, r6
 8008356:	46a9      	mov	r9, r5
 8008358:	46a0      	mov	r8, r4
 800835a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800835c:	4642      	mov	r2, r8
 800835e:	2320      	movs	r3, #32
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	4652      	mov	r2, sl
 8008364:	40da      	lsrs	r2, r3
 8008366:	4641      	mov	r1, r8
 8008368:	0013      	movs	r3, r2
 800836a:	464a      	mov	r2, r9
 800836c:	408a      	lsls	r2, r1
 800836e:	0017      	movs	r7, r2
 8008370:	4642      	mov	r2, r8
 8008372:	431f      	orrs	r7, r3
 8008374:	4653      	mov	r3, sl
 8008376:	4093      	lsls	r3, r2
 8008378:	001e      	movs	r6, r3
 800837a:	42af      	cmp	r7, r5
 800837c:	d9c4      	bls.n	8008308 <__udivmoddi4+0x4c>
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	9200      	str	r2, [sp, #0]
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	4643      	mov	r3, r8
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0d9      	beq.n	8008340 <__udivmoddi4+0x84>
 800838c:	07fb      	lsls	r3, r7, #31
 800838e:	0872      	lsrs	r2, r6, #1
 8008390:	431a      	orrs	r2, r3
 8008392:	4646      	mov	r6, r8
 8008394:	087b      	lsrs	r3, r7, #1
 8008396:	e00e      	b.n	80083b6 <__udivmoddi4+0xfa>
 8008398:	42ab      	cmp	r3, r5
 800839a:	d101      	bne.n	80083a0 <__udivmoddi4+0xe4>
 800839c:	42a2      	cmp	r2, r4
 800839e:	d80c      	bhi.n	80083ba <__udivmoddi4+0xfe>
 80083a0:	1aa4      	subs	r4, r4, r2
 80083a2:	419d      	sbcs	r5, r3
 80083a4:	2001      	movs	r0, #1
 80083a6:	1924      	adds	r4, r4, r4
 80083a8:	416d      	adcs	r5, r5
 80083aa:	2100      	movs	r1, #0
 80083ac:	3e01      	subs	r6, #1
 80083ae:	1824      	adds	r4, r4, r0
 80083b0:	414d      	adcs	r5, r1
 80083b2:	2e00      	cmp	r6, #0
 80083b4:	d006      	beq.n	80083c4 <__udivmoddi4+0x108>
 80083b6:	42ab      	cmp	r3, r5
 80083b8:	d9ee      	bls.n	8008398 <__udivmoddi4+0xdc>
 80083ba:	3e01      	subs	r6, #1
 80083bc:	1924      	adds	r4, r4, r4
 80083be:	416d      	adcs	r5, r5
 80083c0:	2e00      	cmp	r6, #0
 80083c2:	d1f8      	bne.n	80083b6 <__udivmoddi4+0xfa>
 80083c4:	9800      	ldr	r0, [sp, #0]
 80083c6:	9901      	ldr	r1, [sp, #4]
 80083c8:	465b      	mov	r3, fp
 80083ca:	1900      	adds	r0, r0, r4
 80083cc:	4169      	adcs	r1, r5
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	db24      	blt.n	800841c <__udivmoddi4+0x160>
 80083d2:	002b      	movs	r3, r5
 80083d4:	465a      	mov	r2, fp
 80083d6:	4644      	mov	r4, r8
 80083d8:	40d3      	lsrs	r3, r2
 80083da:	002a      	movs	r2, r5
 80083dc:	40e2      	lsrs	r2, r4
 80083de:	001c      	movs	r4, r3
 80083e0:	465b      	mov	r3, fp
 80083e2:	0015      	movs	r5, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db2a      	blt.n	800843e <__udivmoddi4+0x182>
 80083e8:	0026      	movs	r6, r4
 80083ea:	409e      	lsls	r6, r3
 80083ec:	0033      	movs	r3, r6
 80083ee:	0026      	movs	r6, r4
 80083f0:	4647      	mov	r7, r8
 80083f2:	40be      	lsls	r6, r7
 80083f4:	0032      	movs	r2, r6
 80083f6:	1a80      	subs	r0, r0, r2
 80083f8:	4199      	sbcs	r1, r3
 80083fa:	9000      	str	r0, [sp, #0]
 80083fc:	9101      	str	r1, [sp, #4]
 80083fe:	e79f      	b.n	8008340 <__udivmoddi4+0x84>
 8008400:	42a3      	cmp	r3, r4
 8008402:	d8bc      	bhi.n	800837e <__udivmoddi4+0xc2>
 8008404:	e783      	b.n	800830e <__udivmoddi4+0x52>
 8008406:	4642      	mov	r2, r8
 8008408:	2320      	movs	r3, #32
 800840a:	2100      	movs	r1, #0
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	2200      	movs	r2, #0
 8008410:	9100      	str	r1, [sp, #0]
 8008412:	9201      	str	r2, [sp, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	40da      	lsrs	r2, r3
 8008418:	9201      	str	r2, [sp, #4]
 800841a:	e786      	b.n	800832a <__udivmoddi4+0x6e>
 800841c:	4642      	mov	r2, r8
 800841e:	2320      	movs	r3, #32
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	002a      	movs	r2, r5
 8008424:	4646      	mov	r6, r8
 8008426:	409a      	lsls	r2, r3
 8008428:	0023      	movs	r3, r4
 800842a:	40f3      	lsrs	r3, r6
 800842c:	4644      	mov	r4, r8
 800842e:	4313      	orrs	r3, r2
 8008430:	002a      	movs	r2, r5
 8008432:	40e2      	lsrs	r2, r4
 8008434:	001c      	movs	r4, r3
 8008436:	465b      	mov	r3, fp
 8008438:	0015      	movs	r5, r2
 800843a:	2b00      	cmp	r3, #0
 800843c:	dad4      	bge.n	80083e8 <__udivmoddi4+0x12c>
 800843e:	4642      	mov	r2, r8
 8008440:	002f      	movs	r7, r5
 8008442:	2320      	movs	r3, #32
 8008444:	0026      	movs	r6, r4
 8008446:	4097      	lsls	r7, r2
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	40de      	lsrs	r6, r3
 800844c:	003b      	movs	r3, r7
 800844e:	4333      	orrs	r3, r6
 8008450:	e7cd      	b.n	80083ee <__udivmoddi4+0x132>
 8008452:	46c0      	nop			; (mov r8, r8)

08008454 <__clzsi2>:
 8008454:	211c      	movs	r1, #28
 8008456:	2301      	movs	r3, #1
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	4298      	cmp	r0, r3
 800845c:	d301      	bcc.n	8008462 <__clzsi2+0xe>
 800845e:	0c00      	lsrs	r0, r0, #16
 8008460:	3910      	subs	r1, #16
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	4298      	cmp	r0, r3
 8008466:	d301      	bcc.n	800846c <__clzsi2+0x18>
 8008468:	0a00      	lsrs	r0, r0, #8
 800846a:	3908      	subs	r1, #8
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	4298      	cmp	r0, r3
 8008470:	d301      	bcc.n	8008476 <__clzsi2+0x22>
 8008472:	0900      	lsrs	r0, r0, #4
 8008474:	3904      	subs	r1, #4
 8008476:	a202      	add	r2, pc, #8	; (adr r2, 8008480 <__clzsi2+0x2c>)
 8008478:	5c10      	ldrb	r0, [r2, r0]
 800847a:	1840      	adds	r0, r0, r1
 800847c:	4770      	bx	lr
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	02020304 	.word	0x02020304
 8008484:	01010101 	.word	0x01010101
	...

08008490 <__clzdi2>:
 8008490:	b510      	push	{r4, lr}
 8008492:	2900      	cmp	r1, #0
 8008494:	d103      	bne.n	800849e <__clzdi2+0xe>
 8008496:	f7ff ffdd 	bl	8008454 <__clzsi2>
 800849a:	3020      	adds	r0, #32
 800849c:	e002      	b.n	80084a4 <__clzdi2+0x14>
 800849e:	0008      	movs	r0, r1
 80084a0:	f7ff ffd8 	bl	8008454 <__clzsi2>
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	46c0      	nop			; (mov r8, r8)

080084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>:
 */

#include <GamepadButton.hpp>


GamepadButton::GamepadButton(GPIO_TypeDef* _PORT, uint16_t _PIN) {
 80084a8:	b590      	push	{r4, r7, lr}
 80084aa:	b08b      	sub	sp, #44	; 0x2c
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	1dbb      	adds	r3, r7, #6
 80084b4:	801a      	strh	r2, [r3, #0]
	but_pin = _PIN;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	1dba      	adds	r2, r7, #6
 80084ba:	8812      	ldrh	r2, [r2, #0]
 80084bc:	809a      	strh	r2, [r3, #4]
	but_port = _PORT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c4:	2414      	movs	r4, #20
 80084c6:	193b      	adds	r3, r7, r4
 80084c8:	0018      	movs	r0, r3
 80084ca:	2314      	movs	r3, #20
 80084cc:	001a      	movs	r2, r3
 80084ce:	2100      	movs	r1, #0
 80084d0:	f002 fe3a 	bl	800b148 <memset>

	/*Configure GPIO pins */
	GPIO_InitStruct.Pin = _PIN;
 80084d4:	1dbb      	adds	r3, r7, #6
 80084d6:	881a      	ldrh	r2, [r3, #0]
 80084d8:	193b      	adds	r3, r7, r4
 80084da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084dc:	193b      	adds	r3, r7, r4
 80084de:	2200      	movs	r2, #0
 80084e0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084e2:	193b      	adds	r3, r7, r4
 80084e4:	2201      	movs	r2, #1
 80084e6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(_PORT, &GPIO_InitStruct);
 80084e8:	193a      	adds	r2, r7, r4
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	0011      	movs	r1, r2
 80084ee:	0018      	movs	r0, r3
 80084f0:	f000 ff86 	bl	8009400 <HAL_GPIO_Init>
}
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	0018      	movs	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b00b      	add	sp, #44	; 0x2c
 80084fc:	bd90      	pop	{r4, r7, pc}

080084fe <_ZN13GamepadButton12UpdateButtonEv>:

void GamepadButton::UpdateButton()
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(but_port, but_pin) == GPIO_PIN_RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	889b      	ldrh	r3, [r3, #4]
 800850e:	0019      	movs	r1, r3
 8008510:	0010      	movs	r0, r2
 8008512:	f001 f8f3 	bl	80096fc <HAL_GPIO_ReadPin>
 8008516:	0003      	movs	r3, r0
 8008518:	425a      	negs	r2, r3
 800851a:	4153      	adcs	r3, r2
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <_ZN13GamepadButton12UpdateButtonEv+0x2c>
	{
		IsPressing = true;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	71da      	strb	r2, [r3, #7]
 8008528:	e002      	b.n	8008530 <_ZN13GamepadButton12UpdateButtonEv+0x32>
	}
	else
	{
		IsPressing = false;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	71da      	strb	r2, [r3, #7]
	}

	if(IsPressing != lastStatus)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	79da      	ldrb	r2, [r3, #7]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	799b      	ldrb	r3, [r3, #6]
 8008538:	429a      	cmp	r2, r3
 800853a:	d003      	beq.n	8008544 <_ZN13GamepadButton12UpdateButtonEv+0x46>
		else
		{
			//OnDown.Execute(this);
		}

		lastStatus = IsPressing;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	79da      	ldrb	r2, [r3, #7]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	719a      	strb	r2, [r3, #6]
	}
}
 8008544:	46c0      	nop			; (mov r8, r8)
 8008546:	46bd      	mov	sp, r7
 8008548:	b002      	add	sp, #8
 800854a:	bd80      	pop	{r7, pc}

0800854c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800854c:	b590      	push	{r4, r7, lr}
 800854e:	b08d      	sub	sp, #52	; 0x34
 8008550:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008552:	f000 fe31 	bl	80091b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008556:	f000 f8af 	bl	80086b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800855a:	f000 f959 	bl	8008810 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800855e:	f000 f923 	bl	80087a8 <_ZL19MX_USART2_UART_Initv>


  /* USER CODE BEGIN 2 */
#ifdef __cplusplus
  UPrint("Setting up game... \r\n");
 8008562:	4b51      	ldr	r3, [pc, #324]	; (80086a8 <main+0x15c>)
 8008564:	0018      	movs	r0, r3
 8008566:	f000 f9ff 	bl	8008968 <_Z6UPrintPc>
  LCD_setRST(GPIOB, GPIO_PIN_13);
 800856a:	2380      	movs	r3, #128	; 0x80
 800856c:	019b      	lsls	r3, r3, #6
 800856e:	4a4f      	ldr	r2, [pc, #316]	; (80086ac <main+0x160>)
 8008570:	0019      	movs	r1, r3
 8008572:	0010      	movs	r0, r2
 8008574:	f000 fa2a 	bl	80089cc <LCD_setRST>
  LCD_setCE(GPIOB, GPIO_PIN_14);
 8008578:	2380      	movs	r3, #128	; 0x80
 800857a:	01db      	lsls	r3, r3, #7
 800857c:	4a4b      	ldr	r2, [pc, #300]	; (80086ac <main+0x160>)
 800857e:	0019      	movs	r1, r3
 8008580:	0010      	movs	r0, r2
 8008582:	f000 fa37 	bl	80089f4 <LCD_setCE>
  LCD_setDC(GPIOB, GPIO_PIN_15);
 8008586:	2380      	movs	r3, #128	; 0x80
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	4a48      	ldr	r2, [pc, #288]	; (80086ac <main+0x160>)
 800858c:	0019      	movs	r1, r3
 800858e:	0010      	movs	r0, r2
 8008590:	f000 fa44 	bl	8008a1c <LCD_setDC>
  LCD_setDIN(GPIOB, GPIO_PIN_1);
 8008594:	4b45      	ldr	r3, [pc, #276]	; (80086ac <main+0x160>)
 8008596:	2102      	movs	r1, #2
 8008598:	0018      	movs	r0, r3
 800859a:	f000 fa53 	bl	8008a44 <LCD_setDIN>
  LCD_setCLK(GPIOB, GPIO_PIN_2);
 800859e:	4b43      	ldr	r3, [pc, #268]	; (80086ac <main+0x160>)
 80085a0:	2104      	movs	r1, #4
 80085a2:	0018      	movs	r0, r3
 80085a4:	f000 fa62 	bl	8008a6c <LCD_setCLK>
  LCD_init();
 80085a8:	f000 fb94 	bl	8008cd4 <LCD_init>

  LCD_refreshScr();
 80085ac:	f000 fc74 	bl	8008e98 <LCD_refreshScr>

  //DrawLCD(mario_bros_nes_sprite_sheet_2, sizeof(mario_bros_nes_sprite_sheet_2) / sizeof(mario_bros_nes_sprite_sheet_2[0]), 18, 0);
  //LCD_refreshScr();

  GamepadButton BUTTON_Left(GPIOA, GPIO_PIN_7);
 80085b0:	23a0      	movs	r3, #160	; 0xa0
 80085b2:	05d9      	lsls	r1, r3, #23
 80085b4:	2318      	movs	r3, #24
 80085b6:	18fb      	adds	r3, r7, r3
 80085b8:	2280      	movs	r2, #128	; 0x80
 80085ba:	0018      	movs	r0, r3
 80085bc:	f7ff ff74 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_Right(GPIOA, GPIO_PIN_6);
 80085c0:	23a0      	movs	r3, #160	; 0xa0
 80085c2:	05d9      	lsls	r1, r3, #23
 80085c4:	2310      	movs	r3, #16
 80085c6:	18fb      	adds	r3, r7, r3
 80085c8:	2240      	movs	r2, #64	; 0x40
 80085ca:	0018      	movs	r0, r3
 80085cc:	f7ff ff6c 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  GamepadButton BUTTON_Up(GPIOA, GPIO_PIN_12);
 80085d0:	2380      	movs	r3, #128	; 0x80
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	23a0      	movs	r3, #160	; 0xa0
 80085d6:	05d9      	lsls	r1, r3, #23
 80085d8:	2308      	movs	r3, #8
 80085da:	18fb      	adds	r3, r7, r3
 80085dc:	0018      	movs	r0, r3
 80085de:	f7ff ff63 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_Down(GPIOA, GPIO_PIN_11);
 80085e2:	2380      	movs	r3, #128	; 0x80
 80085e4:	011a      	lsls	r2, r3, #4
 80085e6:	23a0      	movs	r3, #160	; 0xa0
 80085e8:	05d9      	lsls	r1, r3, #23
 80085ea:	003b      	movs	r3, r7
 80085ec:	0018      	movs	r0, r3
 80085ee:	f7ff ff5b 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  unsigned int count = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
  unsigned int count1 = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	623b      	str	r3, [r7, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD_draw(mario_bros_nes_sprite_sheet_2, count, count1, 32, 32);
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	b2d9      	uxtb	r1, r3
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	482b      	ldr	r0, [pc, #172]	; (80086b0 <main+0x164>)
 8008604:	2320      	movs	r3, #32
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2320      	movs	r3, #32
 800860a:	f000 fa85 	bl	8008b18 <LCD_draw>
	  LCD_refreshArea(count, count1, count + 32, count1 + 32);
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	b2d8      	uxtb	r0, r3
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	b2d9      	uxtb	r1, r3
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	b2db      	uxtb	r3, r3
 800861a:	3320      	adds	r3, #32
 800861c:	b2da      	uxtb	r2, r3
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	3320      	adds	r3, #32
 8008624:	b2db      	uxtb	r3, r3
 8008626:	f000 fc63 	bl	8008ef0 <LCD_refreshArea>
	  LCD_print("hello worldddd", 0, 0);
 800862a:	4b22      	ldr	r3, [pc, #136]	; (80086b4 <main+0x168>)
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	0018      	movs	r0, r3
 8008632:	f000 fbcd 	bl	8008dd0 <LCD_print>
    /* USER CODE END WHILE */



    /* USER CODE BEGIN 3 */
	BUTTON_Left.UpdateButton();
 8008636:	2418      	movs	r4, #24
 8008638:	193b      	adds	r3, r7, r4
 800863a:	0018      	movs	r0, r3
 800863c:	f7ff ff5f 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
	BUTTON_Right.UpdateButton();
 8008640:	2310      	movs	r3, #16
 8008642:	18fb      	adds	r3, r7, r3
 8008644:	0018      	movs	r0, r3
 8008646:	f7ff ff5a 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
	BUTTON_Up.UpdateButton();
 800864a:	2308      	movs	r3, #8
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	0018      	movs	r0, r3
 8008650:	f7ff ff55 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
	BUTTON_Down.UpdateButton();
 8008654:	003b      	movs	r3, r7
 8008656:	0018      	movs	r0, r3
 8008658:	f7ff ff51 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>

	if(BUTTON_Left.IsPressing)
 800865c:	193b      	adds	r3, r7, r4
 800865e:	79db      	ldrb	r3, [r3, #7]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <main+0x11e>
	{
		count--;
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	3b01      	subs	r3, #1
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(BUTTON_Right.IsPressing)
 800866a:	2310      	movs	r3, #16
 800866c:	18fb      	adds	r3, r7, r3
 800866e:	79db      	ldrb	r3, [r3, #7]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <main+0x12e>
	{
		count++;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	3301      	adds	r3, #1
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(BUTTON_Up.IsPressing)
 800867a:	2308      	movs	r3, #8
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	79db      	ldrb	r3, [r3, #7]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <main+0x13e>
	{
		count1--;
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	3b01      	subs	r3, #1
 8008688:	623b      	str	r3, [r7, #32]
	}

	if(BUTTON_Down.IsPressing)
 800868a:	003b      	movs	r3, r7
 800868c:	79db      	ldrb	r3, [r3, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <main+0x14c>
	{
		count1++;
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	3301      	adds	r3, #1
 8008696:	623b      	str	r3, [r7, #32]
	}

	count = count % (LCD_WIDTH - 18);
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	2142      	movs	r1, #66	; 0x42
 800869c:	0018      	movs	r0, r3
 800869e:	f7ff fdb9 	bl	8008214 <__aeabi_uidivmod>
 80086a2:	000b      	movs	r3, r1
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
	  LCD_draw(mario_bros_nes_sprite_sheet_2, count, count1, 32, 32);
 80086a6:	e7a8      	b.n	80085fa <main+0xae>
 80086a8:	0800b170 	.word	0x0800b170
 80086ac:	50000400 	.word	0x50000400
 80086b0:	0800b198 	.word	0x0800b198
 80086b4:	0800b188 	.word	0x0800b188

080086b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80086b8:	b590      	push	{r4, r7, lr}
 80086ba:	b09f      	sub	sp, #124	; 0x7c
 80086bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086be:	2440      	movs	r4, #64	; 0x40
 80086c0:	193b      	adds	r3, r7, r4
 80086c2:	0018      	movs	r0, r3
 80086c4:	2338      	movs	r3, #56	; 0x38
 80086c6:	001a      	movs	r2, r3
 80086c8:	2100      	movs	r1, #0
 80086ca:	f002 fd3d 	bl	800b148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80086ce:	232c      	movs	r3, #44	; 0x2c
 80086d0:	18fb      	adds	r3, r7, r3
 80086d2:	0018      	movs	r0, r3
 80086d4:	2314      	movs	r3, #20
 80086d6:	001a      	movs	r2, r3
 80086d8:	2100      	movs	r1, #0
 80086da:	f002 fd35 	bl	800b148 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	0018      	movs	r0, r3
 80086e2:	2328      	movs	r3, #40	; 0x28
 80086e4:	001a      	movs	r2, r3
 80086e6:	2100      	movs	r1, #0
 80086e8:	f002 fd2e 	bl	800b148 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80086ec:	4b2c      	ldr	r3, [pc, #176]	; (80087a0 <_Z18SystemClock_Configv+0xe8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a2c      	ldr	r2, [pc, #176]	; (80087a4 <_Z18SystemClock_Configv+0xec>)
 80086f2:	401a      	ands	r2, r3
 80086f4:	4b2a      	ldr	r3, [pc, #168]	; (80087a0 <_Z18SystemClock_Configv+0xe8>)
 80086f6:	2180      	movs	r1, #128	; 0x80
 80086f8:	0109      	lsls	r1, r1, #4
 80086fa:	430a      	orrs	r2, r1
 80086fc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80086fe:	0021      	movs	r1, r4
 8008700:	187b      	adds	r3, r7, r1
 8008702:	2210      	movs	r2, #16
 8008704:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008706:	187b      	adds	r3, r7, r1
 8008708:	2201      	movs	r2, #1
 800870a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800870c:	187b      	adds	r3, r7, r1
 800870e:	2200      	movs	r2, #0
 8008710:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8008712:	187b      	adds	r3, r7, r1
 8008714:	22a0      	movs	r2, #160	; 0xa0
 8008716:	0212      	lsls	r2, r2, #8
 8008718:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800871a:	187b      	adds	r3, r7, r1
 800871c:	2200      	movs	r2, #0
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008720:	187b      	adds	r3, r7, r1
 8008722:	0018      	movs	r0, r3
 8008724:	f001 f824 	bl	8009770 <HAL_RCC_OscConfig>
 8008728:	0003      	movs	r3, r0
 800872a:	1e5a      	subs	r2, r3, #1
 800872c:	4193      	sbcs	r3, r2
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8008734:	f000 f944 	bl	80089c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008738:	212c      	movs	r1, #44	; 0x2c
 800873a:	187b      	adds	r3, r7, r1
 800873c:	220f      	movs	r2, #15
 800873e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8008740:	187b      	adds	r3, r7, r1
 8008742:	2200      	movs	r2, #0
 8008744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008746:	187b      	adds	r3, r7, r1
 8008748:	2200      	movs	r2, #0
 800874a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800874c:	187b      	adds	r3, r7, r1
 800874e:	2200      	movs	r2, #0
 8008750:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008752:	187b      	adds	r3, r7, r1
 8008754:	2200      	movs	r2, #0
 8008756:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008758:	187b      	adds	r3, r7, r1
 800875a:	2100      	movs	r1, #0
 800875c:	0018      	movs	r0, r3
 800875e:	f001 fbdb 	bl	8009f18 <HAL_RCC_ClockConfig>
 8008762:	0003      	movs	r3, r0
 8008764:	1e5a      	subs	r2, r3, #1
 8008766:	4193      	sbcs	r3, r2
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800876e:	f000 f927 	bl	80089c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	2202      	movs	r2, #2
 8008776:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	2200      	movs	r2, #0
 800877c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800877e:	1d3b      	adds	r3, r7, #4
 8008780:	0018      	movs	r0, r3
 8008782:	f001 fded 	bl	800a360 <HAL_RCCEx_PeriphCLKConfig>
 8008786:	0003      	movs	r3, r0
 8008788:	1e5a      	subs	r2, r3, #1
 800878a:	4193      	sbcs	r3, r2
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8008792:	f000 f915 	bl	80089c0 <Error_Handler>
  }
}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	46bd      	mov	sp, r7
 800879a:	b01f      	add	sp, #124	; 0x7c
 800879c:	bd90      	pop	{r4, r7, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	40007000 	.word	0x40007000
 80087a4:	ffffe7ff 	.word	0xffffe7ff

080087a8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80087ac:	4b16      	ldr	r3, [pc, #88]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087ae:	4a17      	ldr	r2, [pc, #92]	; (800880c <_ZL19MX_USART2_UART_Initv+0x64>)
 80087b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80087b2:	4b15      	ldr	r3, [pc, #84]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087b4:	22e1      	movs	r2, #225	; 0xe1
 80087b6:	0252      	lsls	r2, r2, #9
 80087b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80087ba:	4b13      	ldr	r3, [pc, #76]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087bc:	2200      	movs	r2, #0
 80087be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80087c0:	4b11      	ldr	r3, [pc, #68]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80087cc:	4b0e      	ldr	r3, [pc, #56]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087ce:	220c      	movs	r2, #12
 80087d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087d2:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80087d8:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087da:	2200      	movs	r2, #0
 80087dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087de:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087e4:	4b08      	ldr	r3, [pc, #32]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <_ZL19MX_USART2_UART_Initv+0x60>)
 80087ec:	0018      	movs	r0, r3
 80087ee:	f001 ff2b 	bl	800a648 <HAL_UART_Init>
 80087f2:	0003      	movs	r3, r0
 80087f4:	1e5a      	subs	r2, r3, #1
 80087f6:	4193      	sbcs	r3, r2
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 80087fe:	f000 f8df 	bl	80089c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000028 	.word	0x20000028
 800880c:	40004400 	.word	0x40004400

08008810 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008810:	b590      	push	{r4, r7, lr}
 8008812:	b08b      	sub	sp, #44	; 0x2c
 8008814:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008816:	2414      	movs	r4, #20
 8008818:	193b      	adds	r3, r7, r4
 800881a:	0018      	movs	r0, r3
 800881c:	2314      	movs	r3, #20
 800881e:	001a      	movs	r2, r3
 8008820:	2100      	movs	r1, #0
 8008822:	f002 fc91 	bl	800b148 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008826:	4b4c      	ldr	r3, [pc, #304]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882a:	4b4b      	ldr	r3, [pc, #300]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 800882c:	2104      	movs	r1, #4
 800882e:	430a      	orrs	r2, r1
 8008830:	62da      	str	r2, [r3, #44]	; 0x2c
 8008832:	4b49      	ldr	r3, [pc, #292]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	2204      	movs	r2, #4
 8008838:	4013      	ands	r3, r2
 800883a:	613b      	str	r3, [r7, #16]
 800883c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800883e:	4b46      	ldr	r3, [pc, #280]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	4b45      	ldr	r3, [pc, #276]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008844:	2180      	movs	r1, #128	; 0x80
 8008846:	430a      	orrs	r2, r1
 8008848:	62da      	str	r2, [r3, #44]	; 0x2c
 800884a:	4b43      	ldr	r3, [pc, #268]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	2280      	movs	r2, #128	; 0x80
 8008850:	4013      	ands	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008856:	4b40      	ldr	r3, [pc, #256]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885a:	4b3f      	ldr	r3, [pc, #252]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 800885c:	2101      	movs	r1, #1
 800885e:	430a      	orrs	r2, r1
 8008860:	62da      	str	r2, [r3, #44]	; 0x2c
 8008862:	4b3d      	ldr	r3, [pc, #244]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	2201      	movs	r2, #1
 8008868:	4013      	ands	r3, r2
 800886a:	60bb      	str	r3, [r7, #8]
 800886c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800886e:	4b3a      	ldr	r3, [pc, #232]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008872:	4b39      	ldr	r3, [pc, #228]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 8008874:	2102      	movs	r1, #2
 8008876:	430a      	orrs	r2, r1
 8008878:	62da      	str	r2, [r3, #44]	; 0x2c
 800887a:	4b37      	ldr	r3, [pc, #220]	; (8008958 <_ZL12MX_GPIO_Initv+0x148>)
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	2202      	movs	r2, #2
 8008880:	4013      	ands	r3, r2
 8008882:	607b      	str	r3, [r7, #4]
 8008884:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008886:	23a0      	movs	r3, #160	; 0xa0
 8008888:	05db      	lsls	r3, r3, #23
 800888a:	2200      	movs	r2, #0
 800888c:	2120      	movs	r1, #32
 800888e:	0018      	movs	r0, r3
 8008890:	f000 ff51 	bl	8009736 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8008894:	4931      	ldr	r1, [pc, #196]	; (800895c <_ZL12MX_GPIO_Initv+0x14c>)
 8008896:	4b32      	ldr	r3, [pc, #200]	; (8008960 <_ZL12MX_GPIO_Initv+0x150>)
 8008898:	2200      	movs	r2, #0
 800889a:	0018      	movs	r0, r3
 800889c:	f000 ff4b 	bl	8009736 <HAL_GPIO_WritePin>
	                          |GPIO_PIN_15, GPIO_PIN_RESET);

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 80088a0:	193b      	adds	r3, r7, r4
 80088a2:	2280      	movs	r2, #128	; 0x80
 80088a4:	0192      	lsls	r2, r2, #6
 80088a6:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80088a8:	193b      	adds	r3, r7, r4
 80088aa:	2284      	movs	r2, #132	; 0x84
 80088ac:	0392      	lsls	r2, r2, #14
 80088ae:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b0:	193b      	adds	r3, r7, r4
 80088b2:	2200      	movs	r2, #0
 80088b4:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80088b6:	193b      	adds	r3, r7, r4
 80088b8:	4a2a      	ldr	r2, [pc, #168]	; (8008964 <_ZL12MX_GPIO_Initv+0x154>)
 80088ba:	0019      	movs	r1, r3
 80088bc:	0010      	movs	r0, r2
 80088be:	f000 fd9f 	bl	8009400 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PC1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80088c2:	193b      	adds	r3, r7, r4
 80088c4:	2202      	movs	r2, #2
 80088c6:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088c8:	193b      	adds	r3, r7, r4
 80088ca:	2200      	movs	r2, #0
 80088cc:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088ce:	193b      	adds	r3, r7, r4
 80088d0:	2201      	movs	r2, #1
 80088d2:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088d4:	193b      	adds	r3, r7, r4
 80088d6:	4a23      	ldr	r2, [pc, #140]	; (8008964 <_ZL12MX_GPIO_Initv+0x154>)
 80088d8:	0019      	movs	r1, r3
 80088da:	0010      	movs	r0, r2
 80088dc:	f000 fd90 	bl	8009400 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 80088e0:	193b      	adds	r3, r7, r4
 80088e2:	2220      	movs	r2, #32
 80088e4:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088e6:	193b      	adds	r3, r7, r4
 80088e8:	2201      	movs	r2, #1
 80088ea:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ec:	193b      	adds	r3, r7, r4
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088f2:	193b      	adds	r3, r7, r4
 80088f4:	2200      	movs	r2, #0
 80088f6:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80088f8:	193a      	adds	r2, r7, r4
 80088fa:	23a0      	movs	r3, #160	; 0xa0
 80088fc:	05db      	lsls	r3, r3, #23
 80088fe:	0011      	movs	r1, r2
 8008900:	0018      	movs	r0, r3
 8008902:	f000 fd7d 	bl	8009400 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB1 PB2 PB13 PB14
	                           PB15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8008906:	193b      	adds	r3, r7, r4
 8008908:	4a14      	ldr	r2, [pc, #80]	; (800895c <_ZL12MX_GPIO_Initv+0x14c>)
 800890a:	601a      	str	r2, [r3, #0]
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800890c:	193b      	adds	r3, r7, r4
 800890e:	2201      	movs	r2, #1
 8008910:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008912:	193b      	adds	r3, r7, r4
 8008914:	2200      	movs	r2, #0
 8008916:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008918:	193b      	adds	r3, r7, r4
 800891a:	2203      	movs	r2, #3
 800891c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800891e:	193b      	adds	r3, r7, r4
 8008920:	4a0f      	ldr	r2, [pc, #60]	; (8008960 <_ZL12MX_GPIO_Initv+0x150>)
 8008922:	0019      	movs	r1, r3
 8008924:	0010      	movs	r0, r2
 8008926:	f000 fd6b 	bl	8009400 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA8 PA9 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 800892a:	0021      	movs	r1, r4
 800892c:	187b      	adds	r3, r7, r1
 800892e:	2283      	movs	r2, #131	; 0x83
 8008930:	0212      	lsls	r2, r2, #8
 8008932:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008934:	187b      	adds	r3, r7, r1
 8008936:	2200      	movs	r2, #0
 8008938:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893a:	187b      	adds	r3, r7, r1
 800893c:	2200      	movs	r2, #0
 800893e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008940:	187a      	adds	r2, r7, r1
 8008942:	23a0      	movs	r3, #160	; 0xa0
 8008944:	05db      	lsls	r3, r3, #23
 8008946:	0011      	movs	r1, r2
 8008948:	0018      	movs	r0, r3
 800894a:	f000 fd59 	bl	8009400 <HAL_GPIO_Init>

}
 800894e:	46c0      	nop			; (mov r8, r8)
 8008950:	46bd      	mov	sp, r7
 8008952:	b00b      	add	sp, #44	; 0x2c
 8008954:	bd90      	pop	{r4, r7, pc}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	40021000 	.word	0x40021000
 800895c:	0000e006 	.word	0x0000e006
 8008960:	50000400 	.word	0x50000400
 8008964:	50000800 	.word	0x50000800

08008968 <_Z6UPrintPc>:

/* USER CODE BEGIN 4 */
void UPrint(char _out[])
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) _out, length_of_string(_out),10);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	0018      	movs	r0, r3
 8008974:	f000 f80e 	bl	8008994 <_Z16length_of_stringPc>
 8008978:	0003      	movs	r3, r0
 800897a:	b29a      	uxth	r2, r3
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4804      	ldr	r0, [pc, #16]	; (8008990 <_Z6UPrintPc+0x28>)
 8008980:	230a      	movs	r3, #10
 8008982:	f001 feb5 	bl	800a6f0 <HAL_UART_Transmit>
}
 8008986:	46c0      	nop			; (mov r8, r8)
 8008988:	46bd      	mov	sp, r7
 800898a:	b002      	add	sp, #8
 800898c:	bd80      	pop	{r7, pc}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	20000028 	.word	0x20000028

08008994 <_Z16length_of_stringPc>:

int length_of_string(char* p) {
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
    int count = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]

    while (*p != '\0') {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d006      	beq.n	80089b6 <_Z16length_of_stringPc+0x22>
        count++;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3301      	adds	r3, #1
 80089ac:	60fb      	str	r3, [r7, #12]
        p++;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3301      	adds	r3, #1
 80089b2:	607b      	str	r3, [r7, #4]
    while (*p != '\0') {
 80089b4:	e7f4      	b.n	80089a0 <_Z16length_of_stringPc+0xc>
    }

    return count;
 80089b6:	68fb      	ldr	r3, [r7, #12]
}
 80089b8:	0018      	movs	r0, r3
 80089ba:	46bd      	mov	sp, r7
 80089bc:	b004      	add	sp, #16
 80089be:	bd80      	pop	{r7, pc}

080089c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80089c4:	b672      	cpsid	i
}
 80089c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80089c8:	e7fe      	b.n	80089c8 <Error_Handler+0x8>
	...

080089cc <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	000a      	movs	r2, r1
 80089d6:	1cbb      	adds	r3, r7, #2
 80089d8:	801a      	strh	r2, [r3, #0]
	lcd_gpio.RSTPORT = PORT;
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <LCD_setRST+0x24>)
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	601a      	str	r2, [r3, #0]
	lcd_gpio.RSTPIN = PIN;
 80089e0:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <LCD_setRST+0x24>)
 80089e2:	1cba      	adds	r2, r7, #2
 80089e4:	8812      	ldrh	r2, [r2, #0]
 80089e6:	809a      	strh	r2, [r3, #4]
}
 80089e8:	46c0      	nop			; (mov r8, r8)
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b002      	add	sp, #8
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	200002a8 	.word	0x200002a8

080089f4 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	000a      	movs	r2, r1
 80089fe:	1cbb      	adds	r3, r7, #2
 8008a00:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CEPORT = PORT;
 8008a02:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <LCD_setCE+0x24>)
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	609a      	str	r2, [r3, #8]
	lcd_gpio.CEPIN = PIN;
 8008a08:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <LCD_setCE+0x24>)
 8008a0a:	1cba      	adds	r2, r7, #2
 8008a0c:	8812      	ldrh	r2, [r2, #0]
 8008a0e:	819a      	strh	r2, [r3, #12]
}
 8008a10:	46c0      	nop			; (mov r8, r8)
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b002      	add	sp, #8
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	200002a8 	.word	0x200002a8

08008a1c <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	000a      	movs	r2, r1
 8008a26:	1cbb      	adds	r3, r7, #2
 8008a28:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DCPORT = PORT;
 8008a2a:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <LCD_setDC+0x24>)
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	611a      	str	r2, [r3, #16]
	lcd_gpio.DCPIN = PIN;
 8008a30:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <LCD_setDC+0x24>)
 8008a32:	1cba      	adds	r2, r7, #2
 8008a34:	8812      	ldrh	r2, [r2, #0]
 8008a36:	829a      	strh	r2, [r3, #20]
}
 8008a38:	46c0      	nop			; (mov r8, r8)
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b002      	add	sp, #8
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200002a8 	.word	0x200002a8

08008a44 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	000a      	movs	r2, r1
 8008a4e:	1cbb      	adds	r3, r7, #2
 8008a50:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DINPORT = PORT;
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <LCD_setDIN+0x24>)
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	619a      	str	r2, [r3, #24]
	lcd_gpio.DINPIN = PIN;
 8008a58:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <LCD_setDIN+0x24>)
 8008a5a:	1cba      	adds	r2, r7, #2
 8008a5c:	8812      	ldrh	r2, [r2, #0]
 8008a5e:	839a      	strh	r2, [r3, #28]
}
 8008a60:	46c0      	nop			; (mov r8, r8)
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b002      	add	sp, #8
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	200002a8 	.word	0x200002a8

08008a6c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	000a      	movs	r2, r1
 8008a76:	1cbb      	adds	r3, r7, #2
 8008a78:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CLKPORT = PORT;
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <LCD_setCLK+0x24>)
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	621a      	str	r2, [r3, #32]
	lcd_gpio.CLKPIN = PIN;
 8008a80:	4b03      	ldr	r3, [pc, #12]	; (8008a90 <LCD_setCLK+0x24>)
 8008a82:	1cba      	adds	r2, r7, #2
 8008a84:	8812      	ldrh	r2, [r2, #0]
 8008a86:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8008a88:	46c0      	nop			; (mov r8, r8)
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	b002      	add	sp, #8
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	200002a8 	.word	0x200002a8

08008a94 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8008a94:	b5b0      	push	{r4, r5, r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	0002      	movs	r2, r0
 8008a9c:	1dfb      	adds	r3, r7, #7
 8008a9e:	701a      	strb	r2, [r3, #0]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8008aa0:	230f      	movs	r3, #15
 8008aa2:	18fb      	adds	r3, r7, r3
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	e029      	b.n	8008afe <LCD_send+0x6a>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8008aaa:	4b1a      	ldr	r3, [pc, #104]	; (8008b14 <LCD_send+0x80>)
 8008aac:	6998      	ldr	r0, [r3, #24]
 8008aae:	4b19      	ldr	r3, [pc, #100]	; (8008b14 <LCD_send+0x80>)
 8008ab0:	8b99      	ldrh	r1, [r3, #28]
 8008ab2:	1dfb      	adds	r3, r7, #7
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	250f      	movs	r5, #15
 8008ab8:	197b      	adds	r3, r7, r5
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2407      	movs	r4, #7
 8008abe:	1ae3      	subs	r3, r4, r3
 8008ac0:	411a      	asrs	r2, r3
 8008ac2:	0013      	movs	r3, r2
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	1e5a      	subs	r2, r3, #1
 8008aca:	4193      	sbcs	r3, r2
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	001a      	movs	r2, r3
 8008ad0:	f000 fe31 	bl	8009736 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8008ad4:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <LCD_send+0x80>)
 8008ad6:	6a18      	ldr	r0, [r3, #32]
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <LCD_send+0x80>)
 8008ada:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008adc:	2201      	movs	r2, #1
 8008ade:	0019      	movs	r1, r3
 8008ae0:	f000 fe29 	bl	8009736 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <LCD_send+0x80>)
 8008ae6:	6a18      	ldr	r0, [r3, #32]
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <LCD_send+0x80>)
 8008aea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008aec:	2200      	movs	r2, #0
 8008aee:	0019      	movs	r1, r3
 8008af0:	f000 fe21 	bl	8009736 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8008af4:	197b      	adds	r3, r7, r5
 8008af6:	781a      	ldrb	r2, [r3, #0]
 8008af8:	197b      	adds	r3, r7, r5
 8008afa:	3201      	adds	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	230f      	movs	r3, #15
 8008b00:	18fb      	adds	r3, r7, r3
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b07      	cmp	r3, #7
 8008b06:	d9d0      	bls.n	8008aaa <LCD_send+0x16>
  }
}
 8008b08:	46c0      	nop			; (mov r8, r8)
 8008b0a:	46c0      	nop			; (mov r8, r8)
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	b004      	add	sp, #16
 8008b10:	bdb0      	pop	{r4, r5, r7, pc}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	200002a8 	.word	0x200002a8

08008b18 <LCD_draw>:

void LCD_draw(const unsigned char bitmap[], uint8_t x, uint8_t y, const uint8_t w, const uint8_t h) {
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	000c      	movs	r4, r1
 8008b22:	0010      	movs	r0, r2
 8008b24:	0019      	movs	r1, r3
 8008b26:	1cfb      	adds	r3, r7, #3
 8008b28:	1c22      	adds	r2, r4, #0
 8008b2a:	701a      	strb	r2, [r3, #0]
 8008b2c:	1cbb      	adds	r3, r7, #2
 8008b2e:	1c02      	adds	r2, r0, #0
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	1c7b      	adds	r3, r7, #1
 8008b34:	1c0a      	adds	r2, r1, #0
 8008b36:	701a      	strb	r2, [r3, #0]

	uint8_t byteWidth = (w + 7) / 8;
 8008b38:	1c7b      	adds	r3, r7, #1
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	3307      	adds	r3, #7
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da00      	bge.n	8008b44 <LCD_draw+0x2c>
 8008b42:	3307      	adds	r3, #7
 8008b44:	10db      	asrs	r3, r3, #3
 8008b46:	001a      	movs	r2, r3
 8008b48:	230c      	movs	r3, #12
 8008b4a:	18fb      	adds	r3, r7, r3
 8008b4c:	701a      	strb	r2, [r3, #0]
	uint8_t byte = 0;
 8008b4e:	230f      	movs	r3, #15
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	2200      	movs	r2, #0
 8008b54:	701a      	strb	r2, [r3, #0]

	for (uint8_t j = 0; j < h; j++, y++)
 8008b56:	230e      	movs	r3, #14
 8008b58:	18fb      	adds	r3, r7, r3
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	701a      	strb	r2, [r3, #0]
 8008b5e:	e05e      	b.n	8008c1e <LCD_draw+0x106>
	{
		for (uint8_t i = 0; i < w; i++)
 8008b60:	230d      	movs	r3, #13
 8008b62:	18fb      	adds	r3, r7, r3
 8008b64:	2200      	movs	r2, #0
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	e047      	b.n	8008bfa <LCD_draw+0xe2>
		{
		  if (i & 7) byte <<= 1;
 8008b6a:	230d      	movs	r3, #13
 8008b6c:	18fb      	adds	r3, r7, r3
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2207      	movs	r2, #7
 8008b72:	4013      	ands	r3, r2
 8008b74:	d006      	beq.n	8008b84 <LCD_draw+0x6c>
 8008b76:	230f      	movs	r3, #15
 8008b78:	18fa      	adds	r2, r7, r3
 8008b7a:	18fb      	adds	r3, r7, r3
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	18db      	adds	r3, r3, r3
 8008b80:	7013      	strb	r3, [r2, #0]
 8008b82:	e013      	b.n	8008bac <LCD_draw+0x94>
		  else byte = bitmap[j * byteWidth + i / 8];
 8008b84:	230e      	movs	r3, #14
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	220c      	movs	r2, #12
 8008b8c:	18ba      	adds	r2, r7, r2
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	4353      	muls	r3, r2
 8008b92:	220d      	movs	r2, #13
 8008b94:	18ba      	adds	r2, r7, r2
 8008b96:	7812      	ldrb	r2, [r2, #0]
 8008b98:	08d2      	lsrs	r2, r2, #3
 8008b9a:	b2d2      	uxtb	r2, r2
 8008b9c:	189b      	adds	r3, r3, r2
 8008b9e:	001a      	movs	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	189a      	adds	r2, r3, r2
 8008ba4:	230f      	movs	r3, #15
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	701a      	strb	r2, [r3, #0]
		  if (byte & 0x80) LCD_setPixel(x + i, y, false);
 8008bac:	230f      	movs	r3, #15
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	b25b      	sxtb	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da0d      	bge.n	8008bd4 <LCD_draw+0xbc>
 8008bb8:	1cfa      	adds	r2, r7, #3
 8008bba:	230d      	movs	r3, #13
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	7812      	ldrb	r2, [r2, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	18d3      	adds	r3, r2, r3
 8008bc4:	b2d8      	uxtb	r0, r3
 8008bc6:	1cbb      	adds	r3, r7, #2
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	0019      	movs	r1, r3
 8008bce:	f000 f9e5 	bl	8008f9c <LCD_setPixel>
 8008bd2:	e00c      	b.n	8008bee <LCD_draw+0xd6>
		  else LCD_setPixel(x + i, y, true);
 8008bd4:	1cfa      	adds	r2, r7, #3
 8008bd6:	230d      	movs	r3, #13
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	18d3      	adds	r3, r2, r3
 8008be0:	b2d8      	uxtb	r0, r3
 8008be2:	1cbb      	adds	r3, r7, #2
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2201      	movs	r2, #1
 8008be8:	0019      	movs	r1, r3
 8008bea:	f000 f9d7 	bl	8008f9c <LCD_setPixel>
		for (uint8_t i = 0; i < w; i++)
 8008bee:	210d      	movs	r1, #13
 8008bf0:	187b      	adds	r3, r7, r1
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	187b      	adds	r3, r7, r1
 8008bf6:	3201      	adds	r2, #1
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	230d      	movs	r3, #13
 8008bfc:	18fa      	adds	r2, r7, r3
 8008bfe:	1c7b      	adds	r3, r7, #1
 8008c00:	7812      	ldrb	r2, [r2, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d3b0      	bcc.n	8008b6a <LCD_draw+0x52>
	for (uint8_t j = 0; j < h; j++, y++)
 8008c08:	210e      	movs	r1, #14
 8008c0a:	187b      	adds	r3, r7, r1
 8008c0c:	781a      	ldrb	r2, [r3, #0]
 8008c0e:	187b      	adds	r3, r7, r1
 8008c10:	3201      	adds	r2, #1
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	1cbb      	adds	r3, r7, #2
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	1cbb      	adds	r3, r7, #2
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	230e      	movs	r3, #14
 8008c20:	18fa      	adds	r2, r7, r3
 8008c22:	2320      	movs	r3, #32
 8008c24:	18fb      	adds	r3, r7, r3
 8008c26:	7812      	ldrb	r2, [r2, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d398      	bcc.n	8008b60 <LCD_draw+0x48>
		}
	}
}
 8008c2e:	46c0      	nop			; (mov r8, r8)
 8008c30:	46c0      	nop			; (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b005      	add	sp, #20
 8008c36:	bd90      	pop	{r4, r7, pc}

08008c38 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	0002      	movs	r2, r0
 8008c40:	1dfb      	adds	r3, r7, #7
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	1dbb      	adds	r3, r7, #6
 8008c46:	1c0a      	adds	r2, r1, #0
 8008c48:	701a      	strb	r2, [r3, #0]
  if(mode == LCD_COMMAND){
 8008c4a:	1dbb      	adds	r3, r7, #6
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d11d      	bne.n	8008c8e <LCD_write+0x56>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8008c52:	4b1f      	ldr	r3, [pc, #124]	; (8008cd0 <LCD_write+0x98>)
 8008c54:	6918      	ldr	r0, [r3, #16]
 8008c56:	4b1e      	ldr	r3, [pc, #120]	; (8008cd0 <LCD_write+0x98>)
 8008c58:	8a9b      	ldrh	r3, [r3, #20]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	f000 fd6a 	bl	8009736 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8008c62:	4b1b      	ldr	r3, [pc, #108]	; (8008cd0 <LCD_write+0x98>)
 8008c64:	6898      	ldr	r0, [r3, #8]
 8008c66:	4b1a      	ldr	r3, [pc, #104]	; (8008cd0 <LCD_write+0x98>)
 8008c68:	899b      	ldrh	r3, [r3, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	0019      	movs	r1, r3
 8008c6e:	f000 fd62 	bl	8009736 <HAL_GPIO_WritePin>
    LCD_send(data);
 8008c72:	1dfb      	adds	r3, r7, #7
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	0018      	movs	r0, r3
 8008c78:	f7ff ff0c 	bl	8008a94 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8008c7c:	4b14      	ldr	r3, [pc, #80]	; (8008cd0 <LCD_write+0x98>)
 8008c7e:	6898      	ldr	r0, [r3, #8]
 8008c80:	4b13      	ldr	r3, [pc, #76]	; (8008cd0 <LCD_write+0x98>)
 8008c82:	899b      	ldrh	r3, [r3, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	0019      	movs	r1, r3
 8008c88:	f000 fd55 	bl	8009736 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8008c8c:	e01c      	b.n	8008cc8 <LCD_write+0x90>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8008c8e:	4b10      	ldr	r3, [pc, #64]	; (8008cd0 <LCD_write+0x98>)
 8008c90:	6918      	ldr	r0, [r3, #16]
 8008c92:	4b0f      	ldr	r3, [pc, #60]	; (8008cd0 <LCD_write+0x98>)
 8008c94:	8a9b      	ldrh	r3, [r3, #20]
 8008c96:	2201      	movs	r2, #1
 8008c98:	0019      	movs	r1, r3
 8008c9a:	f000 fd4c 	bl	8009736 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <LCD_write+0x98>)
 8008ca0:	6898      	ldr	r0, [r3, #8]
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <LCD_write+0x98>)
 8008ca4:	899b      	ldrh	r3, [r3, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	0019      	movs	r1, r3
 8008caa:	f000 fd44 	bl	8009736 <HAL_GPIO_WritePin>
    LCD_send(data);
 8008cae:	1dfb      	adds	r3, r7, #7
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f7ff feee 	bl	8008a94 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8008cb8:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <LCD_write+0x98>)
 8008cba:	6898      	ldr	r0, [r3, #8]
 8008cbc:	4b04      	ldr	r3, [pc, #16]	; (8008cd0 <LCD_write+0x98>)
 8008cbe:	899b      	ldrh	r3, [r3, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	0019      	movs	r1, r3
 8008cc4:	f000 fd37 	bl	8009736 <HAL_GPIO_WritePin>
}
 8008cc8:	46c0      	nop			; (mov r8, r8)
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	b002      	add	sp, #8
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	200002a8 	.word	0x200002a8

08008cd4 <LCD_init>:


/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8008cd8:	4b18      	ldr	r3, [pc, #96]	; (8008d3c <LCD_init+0x68>)
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	4b17      	ldr	r3, [pc, #92]	; (8008d3c <LCD_init+0x68>)
 8008cde:	889b      	ldrh	r3, [r3, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	f000 fd27 	bl	8009736 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8008ce8:	4b14      	ldr	r3, [pc, #80]	; (8008d3c <LCD_init+0x68>)
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <LCD_init+0x68>)
 8008cee:	889b      	ldrh	r3, [r3, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	0019      	movs	r1, r3
 8008cf4:	f000 fd1f 	bl	8009736 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	2021      	movs	r0, #33	; 0x21
 8008cfc:	f7ff ff9c 	bl	8008c38 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8008d00:	2100      	movs	r1, #0
 8008d02:	20b8      	movs	r0, #184	; 0xb8
 8008d04:	f7ff ff98 	bl	8008c38 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8008d08:	2100      	movs	r1, #0
 8008d0a:	2004      	movs	r0, #4
 8008d0c:	f7ff ff94 	bl	8008c38 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8008d10:	2100      	movs	r1, #0
 8008d12:	2014      	movs	r0, #20
 8008d14:	f7ff ff90 	bl	8008c38 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8008d18:	2100      	movs	r1, #0
 8008d1a:	2020      	movs	r0, #32
 8008d1c:	f7ff ff8c 	bl	8008c38 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8008d20:	2100      	movs	r1, #0
 8008d22:	200c      	movs	r0, #12
 8008d24:	f7ff ff88 	bl	8008c38 <LCD_write>
  LCD_clrScr();
 8008d28:	f000 f878 	bl	8008e1c <LCD_clrScr>
  lcd.inverttext = false;
 8008d2c:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <LCD_init+0x6c>)
 8008d2e:	23fc      	movs	r3, #252	; 0xfc
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	2100      	movs	r1, #0
 8008d34:	54d1      	strb	r1, [r2, r3]
}
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	200002a8 	.word	0x200002a8
 8008d40:	200000ac 	.word	0x200000ac

08008d44 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	0002      	movs	r2, r0
 8008d4c:	1dfb      	adds	r3, r7, #7
 8008d4e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	e030      	b.n	8008db8 <LCD_putChar+0x74>
    if(lcd.inverttext != true)
 8008d56:	4a1c      	ldr	r2, [pc, #112]	; (8008dc8 <LCD_putChar+0x84>)
 8008d58:	23fc      	movs	r3, #252	; 0xfc
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	5cd3      	ldrb	r3, [r2, r3]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4053      	eors	r3, r2
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d011      	beq.n	8008d8c <LCD_putChar+0x48>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8008d68:	1dfb      	adds	r3, r7, #7
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	3b20      	subs	r3, #32
 8008d6e:	001a      	movs	r2, r3
 8008d70:	4916      	ldr	r1, [pc, #88]	; (8008dcc <LCD_putChar+0x88>)
 8008d72:	0013      	movs	r3, r2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	189b      	adds	r3, r3, r2
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	18ca      	adds	r2, r1, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	18d3      	adds	r3, r2, r3
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2101      	movs	r1, #1
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7ff ff57 	bl	8008c38 <LCD_write>
 8008d8a:	e012      	b.n	8008db2 <LCD_putChar+0x6e>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8008d8c:	1dfb      	adds	r3, r7, #7
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	3b20      	subs	r3, #32
 8008d92:	001a      	movs	r2, r3
 8008d94:	490d      	ldr	r1, [pc, #52]	; (8008dcc <LCD_putChar+0x88>)
 8008d96:	0013      	movs	r3, r2
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	189b      	adds	r3, r3, r2
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	18ca      	adds	r2, r1, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	18d3      	adds	r3, r2, r3
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	43db      	mvns	r3, r3
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2101      	movs	r1, #1
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7ff ff43 	bl	8008c38 <LCD_write>
  for(int i = 0; i < 6; i++){
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b05      	cmp	r3, #5
 8008dbc:	ddcb      	ble.n	8008d56 <LCD_putChar+0x12>
  }
}
 8008dbe:	46c0      	nop			; (mov r8, r8)
 8008dc0:	46c0      	nop			; (mov r8, r8)
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	b004      	add	sp, #16
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	200000ac 	.word	0x200000ac
 8008dcc:	0800b218 	.word	0x0800b218

08008dd0 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	0008      	movs	r0, r1
 8008dda:	0011      	movs	r1, r2
 8008ddc:	1cfb      	adds	r3, r7, #3
 8008dde:	1c02      	adds	r2, r0, #0
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	1cbb      	adds	r3, r7, #2
 8008de4:	1c0a      	adds	r2, r1, #0
 8008de6:	701a      	strb	r2, [r3, #0]
  LCD_goXY(x, y);
 8008de8:	1cbb      	adds	r3, r7, #2
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	1cfb      	adds	r3, r7, #3
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f000 f830 	bl	8008e58 <LCD_goXY>
  while(*str){
 8008df8:	e006      	b.n	8008e08 <LCD_print+0x38>
    LCD_putChar(*str++);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7ff ff9e 	bl	8008d44 <LCD_putChar>
  while(*str){
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1f4      	bne.n	8008dfa <LCD_print+0x2a>
  }
}
 8008e10:	46c0      	nop			; (mov r8, r8)
 8008e12:	46c0      	nop			; (mov r8, r8)
 8008e14:	46bd      	mov	sp, r7
 8008e16:	b002      	add	sp, #8
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8008e22:	2300      	movs	r3, #0
 8008e24:	607b      	str	r3, [r7, #4]
 8008e26:	e00b      	b.n	8008e40 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8008e28:	2101      	movs	r1, #1
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	f7ff ff04 	bl	8008c38 <LCD_write>
    lcd.buffer[i] = 0;
 8008e30:	4a08      	ldr	r2, [pc, #32]	; (8008e54 <LCD_clrScr+0x38>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	18d3      	adds	r3, r2, r3
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	607b      	str	r3, [r7, #4]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	23fc      	movs	r3, #252	; 0xfc
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	429a      	cmp	r2, r3
 8008e48:	dbee      	blt.n	8008e28 <LCD_clrScr+0xc>
  }
}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	46c0      	nop			; (mov r8, r8)
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	b002      	add	sp, #8
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	200000ac 	.word	0x200000ac

08008e58 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	0002      	movs	r2, r0
 8008e60:	1dfb      	adds	r3, r7, #7
 8008e62:	701a      	strb	r2, [r3, #0]
 8008e64:	1dbb      	adds	r3, r7, #6
 8008e66:	1c0a      	adds	r2, r1, #0
 8008e68:	701a      	strb	r2, [r3, #0]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8008e6a:	1dfb      	adds	r3, r7, #7
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2280      	movs	r2, #128	; 0x80
 8008e70:	4252      	negs	r2, r2
 8008e72:	4313      	orrs	r3, r2
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2100      	movs	r1, #0
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7ff fedd 	bl	8008c38 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8008e7e:	1dbb      	adds	r3, r7, #6
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2240      	movs	r2, #64	; 0x40
 8008e84:	4313      	orrs	r3, r2
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2100      	movs	r1, #0
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7ff fed4 	bl	8008c38 <LCD_write>
}
 8008e90:	46c0      	nop			; (mov r8, r8)
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b002      	add	sp, #8
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr(){
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
  LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 8008e9e:	2140      	movs	r1, #64	; 0x40
 8008ea0:	2080      	movs	r0, #128	; 0x80
 8008ea2:	f7ff ffd9 	bl	8008e58 <LCD_goXY>
  for(int i = 0; i < 6; i++){
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
 8008eaa:	e016      	b.n	8008eda <LCD_refreshScr+0x42>
    for(int j = 0; j < LCD_WIDTH; j++){
 8008eac:	2300      	movs	r3, #0
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	e00d      	b.n	8008ece <LCD_refreshScr+0x36>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2254      	movs	r2, #84	; 0x54
 8008eb6:	435a      	muls	r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	18d3      	adds	r3, r2, r3
 8008ebc:	4a0b      	ldr	r2, [pc, #44]	; (8008eec <LCD_refreshScr+0x54>)
 8008ebe:	5cd3      	ldrb	r3, [r2, r3]
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	f7ff feb8 	bl	8008c38 <LCD_write>
    for(int j = 0; j < LCD_WIDTH; j++){
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	603b      	str	r3, [r7, #0]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b53      	cmp	r3, #83	; 0x53
 8008ed2:	ddee      	ble.n	8008eb2 <LCD_refreshScr+0x1a>
  for(int i = 0; i < 6; i++){
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b05      	cmp	r3, #5
 8008ede:	dde5      	ble.n	8008eac <LCD_refreshScr+0x14>
    }
  }
}
 8008ee0:	46c0      	nop			; (mov r8, r8)
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	b002      	add	sp, #8
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	46c0      	nop			; (mov r8, r8)
 8008eec:	200000ac 	.word	0x200000ac

08008ef0 <LCD_refreshArea>:
 * @param xmin: starting point on the x-axis
 * @param xmax: ending point on the x-axis
 * @param ymin: starting point on the y-axis
 * @param ymax: ending point on the y-axis
 */
void LCD_refreshArea(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax){
 8008ef0:	b5b0      	push	{r4, r5, r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	0005      	movs	r5, r0
 8008ef8:	000c      	movs	r4, r1
 8008efa:	0010      	movs	r0, r2
 8008efc:	0019      	movs	r1, r3
 8008efe:	1dfb      	adds	r3, r7, #7
 8008f00:	1c2a      	adds	r2, r5, #0
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	1dbb      	adds	r3, r7, #6
 8008f06:	1c22      	adds	r2, r4, #0
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	1d7b      	adds	r3, r7, #5
 8008f0c:	1c02      	adds	r2, r0, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	1d3b      	adds	r3, r7, #4
 8008f12:	1c0a      	adds	r2, r1, #0
 8008f14:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	e033      	b.n	8008f84 <LCD_refreshArea+0x94>
    if(i * 8 > ymax){
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	00da      	lsls	r2, r3, #3
 8008f20:	1d3b      	adds	r3, r7, #4
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	dc31      	bgt.n	8008f8c <LCD_refreshArea+0x9c>
      break;
    }
    //LCD_goXY(xmin, i);
    LCD_write(LCD_SETYADDR | i, LCD_COMMAND);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	b25b      	sxtb	r3, r3
 8008f2c:	2240      	movs	r2, #64	; 0x40
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b25b      	sxtb	r3, r3
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2100      	movs	r1, #0
 8008f36:	0018      	movs	r0, r3
 8008f38:	f7ff fe7e 	bl	8008c38 <LCD_write>
    LCD_write(LCD_SETXADDR | xmin, LCD_COMMAND);
 8008f3c:	1dfb      	adds	r3, r7, #7
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2280      	movs	r2, #128	; 0x80
 8008f42:	4252      	negs	r2, r2
 8008f44:	4313      	orrs	r3, r2
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2100      	movs	r1, #0
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f7ff fe74 	bl	8008c38 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8008f50:	1dfb      	adds	r3, r7, #7
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
 8008f56:	e00d      	b.n	8008f74 <LCD_refreshArea+0x84>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2254      	movs	r2, #84	; 0x54
 8008f5c:	435a      	muls	r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	18d3      	adds	r3, r2, r3
 8008f62:	4a0d      	ldr	r2, [pc, #52]	; (8008f98 <LCD_refreshArea+0xa8>)
 8008f64:	5cd3      	ldrb	r3, [r2, r3]
 8008f66:	2101      	movs	r1, #1
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7ff fe65 	bl	8008c38 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60bb      	str	r3, [r7, #8]
 8008f74:	1d7b      	adds	r3, r7, #5
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	ddec      	ble.n	8008f58 <LCD_refreshArea+0x68>
  for(int i = 0; i < 6; i++){
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3301      	adds	r3, #1
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	ddc8      	ble.n	8008f1c <LCD_refreshArea+0x2c>
    }
  }
}
 8008f8a:	e000      	b.n	8008f8e <LCD_refreshArea+0x9e>
      break;
 8008f8c:	46c0      	nop			; (mov r8, r8)
}
 8008f8e:	46c0      	nop			; (mov r8, r8)
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b004      	add	sp, #16
 8008f94:	bdb0      	pop	{r4, r5, r7, pc}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	200000ac 	.word	0x200000ac

08008f9c <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 8008f9c:	b590      	push	{r4, r7, lr}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	0004      	movs	r4, r0
 8008fa4:	0008      	movs	r0, r1
 8008fa6:	0011      	movs	r1, r2
 8008fa8:	1dfb      	adds	r3, r7, #7
 8008faa:	1c22      	adds	r2, r4, #0
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	1dbb      	adds	r3, r7, #6
 8008fb0:	1c02      	adds	r2, r0, #0
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	1d7b      	adds	r3, r7, #5
 8008fb6:	1c0a      	adds	r2, r1, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
  if(x >= LCD_WIDTH)
 8008fba:	1dfb      	adds	r3, r7, #7
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b53      	cmp	r3, #83	; 0x53
 8008fc0:	d902      	bls.n	8008fc8 <LCD_setPixel+0x2c>
    x = LCD_WIDTH - 1;
 8008fc2:	1dfb      	adds	r3, r7, #7
 8008fc4:	2253      	movs	r2, #83	; 0x53
 8008fc6:	701a      	strb	r2, [r3, #0]
  if(y >= LCD_HEIGHT)
 8008fc8:	1dbb      	adds	r3, r7, #6
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b2f      	cmp	r3, #47	; 0x2f
 8008fce:	d902      	bls.n	8008fd6 <LCD_setPixel+0x3a>
    y = LCD_HEIGHT - 1;
 8008fd0:	1dbb      	adds	r3, r7, #6
 8008fd2:	222f      	movs	r2, #47	; 0x2f
 8008fd4:	701a      	strb	r2, [r3, #0]
    
  if(pixel != false){
 8008fd6:	1d7b      	adds	r3, r7, #5
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01f      	beq.n	800901e <LCD_setPixel+0x82>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8008fde:	1dfb      	adds	r3, r7, #7
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	1dbb      	adds	r3, r7, #6
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	08db      	lsrs	r3, r3, #3
 8008fe8:	b2d8      	uxtb	r0, r3
 8008fea:	0001      	movs	r1, r0
 8008fec:	2354      	movs	r3, #84	; 0x54
 8008fee:	434b      	muls	r3, r1
 8008ff0:	18d3      	adds	r3, r2, r3
 8008ff2:	4a1d      	ldr	r2, [pc, #116]	; (8009068 <LCD_setPixel+0xcc>)
 8008ff4:	5cd3      	ldrb	r3, [r2, r3]
 8008ff6:	b25a      	sxtb	r2, r3
 8008ff8:	1dbb      	adds	r3, r7, #6
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2107      	movs	r1, #7
 8008ffe:	400b      	ands	r3, r1
 8009000:	2101      	movs	r1, #1
 8009002:	4099      	lsls	r1, r3
 8009004:	000b      	movs	r3, r1
 8009006:	b25b      	sxtb	r3, r3
 8009008:	4313      	orrs	r3, r2
 800900a:	b259      	sxtb	r1, r3
 800900c:	1dfb      	adds	r3, r7, #7
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	2354      	movs	r3, #84	; 0x54
 8009012:	4343      	muls	r3, r0
 8009014:	18d3      	adds	r3, r2, r3
 8009016:	b2c9      	uxtb	r1, r1
 8009018:	4a13      	ldr	r2, [pc, #76]	; (8009068 <LCD_setPixel+0xcc>)
 800901a:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 800901c:	e020      	b.n	8009060 <LCD_setPixel+0xc4>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 800901e:	1dfb      	adds	r3, r7, #7
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	1dbb      	adds	r3, r7, #6
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	08db      	lsrs	r3, r3, #3
 8009028:	b2d8      	uxtb	r0, r3
 800902a:	0001      	movs	r1, r0
 800902c:	2354      	movs	r3, #84	; 0x54
 800902e:	434b      	muls	r3, r1
 8009030:	18d3      	adds	r3, r2, r3
 8009032:	4a0d      	ldr	r2, [pc, #52]	; (8009068 <LCD_setPixel+0xcc>)
 8009034:	5cd3      	ldrb	r3, [r2, r3]
 8009036:	b25b      	sxtb	r3, r3
 8009038:	1dba      	adds	r2, r7, #6
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	2107      	movs	r1, #7
 800903e:	400a      	ands	r2, r1
 8009040:	2101      	movs	r1, #1
 8009042:	4091      	lsls	r1, r2
 8009044:	000a      	movs	r2, r1
 8009046:	b252      	sxtb	r2, r2
 8009048:	43d2      	mvns	r2, r2
 800904a:	b252      	sxtb	r2, r2
 800904c:	4013      	ands	r3, r2
 800904e:	b259      	sxtb	r1, r3
 8009050:	1dfb      	adds	r3, r7, #7
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	2354      	movs	r3, #84	; 0x54
 8009056:	4343      	muls	r3, r0
 8009058:	18d3      	adds	r3, r2, r3
 800905a:	b2c9      	uxtb	r1, r1
 800905c:	4a02      	ldr	r2, [pc, #8]	; (8009068 <LCD_setPixel+0xcc>)
 800905e:	54d1      	strb	r1, [r2, r3]
}
 8009060:	46c0      	nop			; (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b003      	add	sp, #12
 8009066:	bd90      	pop	{r4, r7, pc}
 8009068:	200000ac 	.word	0x200000ac

0800906c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009070:	4b07      	ldr	r3, [pc, #28]	; (8009090 <HAL_MspInit+0x24>)
 8009072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <HAL_MspInit+0x24>)
 8009076:	2101      	movs	r1, #1
 8009078:	430a      	orrs	r2, r1
 800907a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800907c:	4b04      	ldr	r3, [pc, #16]	; (8009090 <HAL_MspInit+0x24>)
 800907e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009080:	4b03      	ldr	r3, [pc, #12]	; (8009090 <HAL_MspInit+0x24>)
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	0549      	lsls	r1, r1, #21
 8009086:	430a      	orrs	r2, r1
 8009088:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	40021000 	.word	0x40021000

08009094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009094:	b590      	push	{r4, r7, lr}
 8009096:	b089      	sub	sp, #36	; 0x24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800909c:	240c      	movs	r4, #12
 800909e:	193b      	adds	r3, r7, r4
 80090a0:	0018      	movs	r0, r3
 80090a2:	2314      	movs	r3, #20
 80090a4:	001a      	movs	r2, r3
 80090a6:	2100      	movs	r1, #0
 80090a8:	f002 f84e 	bl	800b148 <memset>
  if(huart->Instance==USART2)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a18      	ldr	r2, [pc, #96]	; (8009114 <HAL_UART_MspInit+0x80>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d129      	bne.n	800910a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80090b6:	4b18      	ldr	r3, [pc, #96]	; (8009118 <HAL_UART_MspInit+0x84>)
 80090b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ba:	4b17      	ldr	r3, [pc, #92]	; (8009118 <HAL_UART_MspInit+0x84>)
 80090bc:	2180      	movs	r1, #128	; 0x80
 80090be:	0289      	lsls	r1, r1, #10
 80090c0:	430a      	orrs	r2, r1
 80090c2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090c4:	4b14      	ldr	r3, [pc, #80]	; (8009118 <HAL_UART_MspInit+0x84>)
 80090c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c8:	4b13      	ldr	r3, [pc, #76]	; (8009118 <HAL_UART_MspInit+0x84>)
 80090ca:	2101      	movs	r1, #1
 80090cc:	430a      	orrs	r2, r1
 80090ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80090d0:	4b11      	ldr	r3, [pc, #68]	; (8009118 <HAL_UART_MspInit+0x84>)
 80090d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d4:	2201      	movs	r2, #1
 80090d6:	4013      	ands	r3, r2
 80090d8:	60bb      	str	r3, [r7, #8]
 80090da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80090dc:	0021      	movs	r1, r4
 80090de:	187b      	adds	r3, r7, r1
 80090e0:	220c      	movs	r2, #12
 80090e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090e4:	187b      	adds	r3, r7, r1
 80090e6:	2202      	movs	r2, #2
 80090e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ea:	187b      	adds	r3, r7, r1
 80090ec:	2200      	movs	r2, #0
 80090ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090f0:	187b      	adds	r3, r7, r1
 80090f2:	2203      	movs	r2, #3
 80090f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80090f6:	187b      	adds	r3, r7, r1
 80090f8:	2204      	movs	r2, #4
 80090fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090fc:	187a      	adds	r2, r7, r1
 80090fe:	23a0      	movs	r3, #160	; 0xa0
 8009100:	05db      	lsls	r3, r3, #23
 8009102:	0011      	movs	r1, r2
 8009104:	0018      	movs	r0, r3
 8009106:	f000 f97b 	bl	8009400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	46bd      	mov	sp, r7
 800910e:	b009      	add	sp, #36	; 0x24
 8009110:	bd90      	pop	{r4, r7, pc}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	40004400 	.word	0x40004400
 8009118:	40021000 	.word	0x40021000

0800911c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009120:	e7fe      	b.n	8009120 <NMI_Handler+0x4>

08009122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009126:	e7fe      	b.n	8009126 <HardFault_Handler+0x4>

08009128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800912c:	46c0      	nop			; (mov r8, r8)
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009136:	46c0      	nop			; (mov r8, r8)
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009140:	f000 f88e 	bl	8009260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009144:	46c0      	nop			; (mov r8, r8)
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <SystemInit+0x10>)
 8009152:	4a03      	ldr	r2, [pc, #12]	; (8009160 <SystemInit+0x14>)
 8009154:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	e000ed00 	.word	0xe000ed00
 8009160:	08008000 	.word	0x08008000

08009164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009164:	480d      	ldr	r0, [pc, #52]	; (800919c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009166:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009168:	480d      	ldr	r0, [pc, #52]	; (80091a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800916a:	490e      	ldr	r1, [pc, #56]	; (80091a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800916c:	4a0e      	ldr	r2, [pc, #56]	; (80091a8 <LoopForever+0xe>)
  movs r3, #0
 800916e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009170:	e002      	b.n	8009178 <LoopCopyDataInit>

08009172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009176:	3304      	adds	r3, #4

08009178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800917a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800917c:	d3f9      	bcc.n	8009172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800917e:	4a0b      	ldr	r2, [pc, #44]	; (80091ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8009180:	4c0b      	ldr	r4, [pc, #44]	; (80091b0 <LoopForever+0x16>)
  movs r3, #0
 8009182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009184:	e001      	b.n	800918a <LoopFillZerobss>

08009186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009188:	3204      	adds	r2, #4

0800918a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800918a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800918c:	d3fb      	bcc.n	8009186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800918e:	f7ff ffdd 	bl	800914c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009192:	f001 ffb5 	bl	800b100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009196:	f7ff f9d9 	bl	800854c <main>

0800919a <LoopForever>:

LoopForever:
    b LoopForever
 800919a:	e7fe      	b.n	800919a <LoopForever>
   ldr   r0, =_estack
 800919c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80091a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80091a8:	0800b4d4 	.word	0x0800b4d4
  ldr r2, =_sbss
 80091ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80091b0:	200002d4 	.word	0x200002d4

080091b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80091b4:	e7fe      	b.n	80091b4 <ADC1_COMP_IRQHandler>
	...

080091b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80091be:	1dfb      	adds	r3, r7, #7
 80091c0:	2200      	movs	r2, #0
 80091c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80091c4:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <HAL_Init+0x3c>)
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <HAL_Init+0x3c>)
 80091ca:	2140      	movs	r1, #64	; 0x40
 80091cc:	430a      	orrs	r2, r1
 80091ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80091d0:	2000      	movs	r0, #0
 80091d2:	f000 f811 	bl	80091f8 <HAL_InitTick>
 80091d6:	1e03      	subs	r3, r0, #0
 80091d8:	d003      	beq.n	80091e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80091da:	1dfb      	adds	r3, r7, #7
 80091dc:	2201      	movs	r2, #1
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	e001      	b.n	80091e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80091e2:	f7ff ff43 	bl	800906c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80091e6:	1dfb      	adds	r3, r7, #7
 80091e8:	781b      	ldrb	r3, [r3, #0]
}
 80091ea:	0018      	movs	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b002      	add	sp, #8
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	40022000 	.word	0x40022000

080091f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091f8:	b590      	push	{r4, r7, lr}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009200:	4b14      	ldr	r3, [pc, #80]	; (8009254 <HAL_InitTick+0x5c>)
 8009202:	681c      	ldr	r4, [r3, #0]
 8009204:	4b14      	ldr	r3, [pc, #80]	; (8009258 <HAL_InitTick+0x60>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	0019      	movs	r1, r3
 800920a:	23fa      	movs	r3, #250	; 0xfa
 800920c:	0098      	lsls	r0, r3, #2
 800920e:	f7fe ff7b 	bl	8008108 <__udivsi3>
 8009212:	0003      	movs	r3, r0
 8009214:	0019      	movs	r1, r3
 8009216:	0020      	movs	r0, r4
 8009218:	f7fe ff76 	bl	8008108 <__udivsi3>
 800921c:	0003      	movs	r3, r0
 800921e:	0018      	movs	r0, r3
 8009220:	f000 f8e1 	bl	80093e6 <HAL_SYSTICK_Config>
 8009224:	1e03      	subs	r3, r0, #0
 8009226:	d001      	beq.n	800922c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e00f      	b.n	800924c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b03      	cmp	r3, #3
 8009230:	d80b      	bhi.n	800924a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	2301      	movs	r3, #1
 8009236:	425b      	negs	r3, r3
 8009238:	2200      	movs	r2, #0
 800923a:	0018      	movs	r0, r3
 800923c:	f000 f8be 	bl	80093bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <HAL_InitTick+0x64>)
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
}
 800924c:	0018      	movs	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	b003      	add	sp, #12
 8009252:	bd90      	pop	{r4, r7, pc}
 8009254:	20000000 	.word	0x20000000
 8009258:	20000008 	.word	0x20000008
 800925c:	20000004 	.word	0x20000004

08009260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <HAL_IncTick+0x1c>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	001a      	movs	r2, r3
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <HAL_IncTick+0x20>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	18d2      	adds	r2, r2, r3
 8009270:	4b03      	ldr	r3, [pc, #12]	; (8009280 <HAL_IncTick+0x20>)
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	46c0      	nop			; (mov r8, r8)
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	20000008 	.word	0x20000008
 8009280:	200002d0 	.word	0x200002d0

08009284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  return uwTick;
 8009288:	4b02      	ldr	r3, [pc, #8]	; (8009294 <HAL_GetTick+0x10>)
 800928a:	681b      	ldr	r3, [r3, #0]
}
 800928c:	0018      	movs	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	46c0      	nop			; (mov r8, r8)
 8009294:	200002d0 	.word	0x200002d0

08009298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009298:	b590      	push	{r4, r7, lr}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	0002      	movs	r2, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	1dfb      	adds	r3, r7, #7
 80092a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80092a6:	1dfb      	adds	r3, r7, #7
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	2b7f      	cmp	r3, #127	; 0x7f
 80092ac:	d828      	bhi.n	8009300 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80092ae:	4a2f      	ldr	r2, [pc, #188]	; (800936c <__NVIC_SetPriority+0xd4>)
 80092b0:	1dfb      	adds	r3, r7, #7
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	b25b      	sxtb	r3, r3
 80092b6:	089b      	lsrs	r3, r3, #2
 80092b8:	33c0      	adds	r3, #192	; 0xc0
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	589b      	ldr	r3, [r3, r2]
 80092be:	1dfa      	adds	r2, r7, #7
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	0011      	movs	r1, r2
 80092c4:	2203      	movs	r2, #3
 80092c6:	400a      	ands	r2, r1
 80092c8:	00d2      	lsls	r2, r2, #3
 80092ca:	21ff      	movs	r1, #255	; 0xff
 80092cc:	4091      	lsls	r1, r2
 80092ce:	000a      	movs	r2, r1
 80092d0:	43d2      	mvns	r2, r2
 80092d2:	401a      	ands	r2, r3
 80092d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	019b      	lsls	r3, r3, #6
 80092da:	22ff      	movs	r2, #255	; 0xff
 80092dc:	401a      	ands	r2, r3
 80092de:	1dfb      	adds	r3, r7, #7
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	0018      	movs	r0, r3
 80092e4:	2303      	movs	r3, #3
 80092e6:	4003      	ands	r3, r0
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80092ec:	481f      	ldr	r0, [pc, #124]	; (800936c <__NVIC_SetPriority+0xd4>)
 80092ee:	1dfb      	adds	r3, r7, #7
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b25b      	sxtb	r3, r3
 80092f4:	089b      	lsrs	r3, r3, #2
 80092f6:	430a      	orrs	r2, r1
 80092f8:	33c0      	adds	r3, #192	; 0xc0
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80092fe:	e031      	b.n	8009364 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009300:	4a1b      	ldr	r2, [pc, #108]	; (8009370 <__NVIC_SetPriority+0xd8>)
 8009302:	1dfb      	adds	r3, r7, #7
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	0019      	movs	r1, r3
 8009308:	230f      	movs	r3, #15
 800930a:	400b      	ands	r3, r1
 800930c:	3b08      	subs	r3, #8
 800930e:	089b      	lsrs	r3, r3, #2
 8009310:	3306      	adds	r3, #6
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	18d3      	adds	r3, r2, r3
 8009316:	3304      	adds	r3, #4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	1dfa      	adds	r2, r7, #7
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	0011      	movs	r1, r2
 8009320:	2203      	movs	r2, #3
 8009322:	400a      	ands	r2, r1
 8009324:	00d2      	lsls	r2, r2, #3
 8009326:	21ff      	movs	r1, #255	; 0xff
 8009328:	4091      	lsls	r1, r2
 800932a:	000a      	movs	r2, r1
 800932c:	43d2      	mvns	r2, r2
 800932e:	401a      	ands	r2, r3
 8009330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	019b      	lsls	r3, r3, #6
 8009336:	22ff      	movs	r2, #255	; 0xff
 8009338:	401a      	ands	r2, r3
 800933a:	1dfb      	adds	r3, r7, #7
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	0018      	movs	r0, r3
 8009340:	2303      	movs	r3, #3
 8009342:	4003      	ands	r3, r0
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009348:	4809      	ldr	r0, [pc, #36]	; (8009370 <__NVIC_SetPriority+0xd8>)
 800934a:	1dfb      	adds	r3, r7, #7
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	001c      	movs	r4, r3
 8009350:	230f      	movs	r3, #15
 8009352:	4023      	ands	r3, r4
 8009354:	3b08      	subs	r3, #8
 8009356:	089b      	lsrs	r3, r3, #2
 8009358:	430a      	orrs	r2, r1
 800935a:	3306      	adds	r3, #6
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	18c3      	adds	r3, r0, r3
 8009360:	3304      	adds	r3, #4
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	46c0      	nop			; (mov r8, r8)
 8009366:	46bd      	mov	sp, r7
 8009368:	b003      	add	sp, #12
 800936a:	bd90      	pop	{r4, r7, pc}
 800936c:	e000e100 	.word	0xe000e100
 8009370:	e000ed00 	.word	0xe000ed00

08009374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	1e5a      	subs	r2, r3, #1
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	045b      	lsls	r3, r3, #17
 8009384:	429a      	cmp	r2, r3
 8009386:	d301      	bcc.n	800938c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009388:	2301      	movs	r3, #1
 800938a:	e010      	b.n	80093ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <SysTick_Config+0x44>)
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	3a01      	subs	r2, #1
 8009392:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009394:	2301      	movs	r3, #1
 8009396:	425b      	negs	r3, r3
 8009398:	2103      	movs	r1, #3
 800939a:	0018      	movs	r0, r3
 800939c:	f7ff ff7c 	bl	8009298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <SysTick_Config+0x44>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093a6:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <SysTick_Config+0x44>)
 80093a8:	2207      	movs	r2, #7
 80093aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	0018      	movs	r0, r3
 80093b0:	46bd      	mov	sp, r7
 80093b2:	b002      	add	sp, #8
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	e000e010 	.word	0xe000e010

080093bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	210f      	movs	r1, #15
 80093c8:	187b      	adds	r3, r7, r1
 80093ca:	1c02      	adds	r2, r0, #0
 80093cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	187b      	adds	r3, r7, r1
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	0011      	movs	r1, r2
 80093d8:	0018      	movs	r0, r3
 80093da:	f7ff ff5d 	bl	8009298 <__NVIC_SetPriority>
}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	46bd      	mov	sp, r7
 80093e2:	b004      	add	sp, #16
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	0018      	movs	r0, r3
 80093f2:	f7ff ffbf 	bl	8009374 <SysTick_Config>
 80093f6:	0003      	movs	r3, r0
}
 80093f8:	0018      	movs	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	b002      	add	sp, #8
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009412:	2300      	movs	r3, #0
 8009414:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009416:	e155      	b.n	80096c4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2101      	movs	r1, #1
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4091      	lsls	r1, r2
 8009422:	000a      	movs	r2, r1
 8009424:	4013      	ands	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d100      	bne.n	8009430 <HAL_GPIO_Init+0x30>
 800942e:	e146      	b.n	80096be <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	2203      	movs	r2, #3
 8009436:	4013      	ands	r3, r2
 8009438:	2b01      	cmp	r3, #1
 800943a:	d005      	beq.n	8009448 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2203      	movs	r2, #3
 8009442:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009444:	2b02      	cmp	r3, #2
 8009446:	d130      	bne.n	80094aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	2203      	movs	r2, #3
 8009454:	409a      	lsls	r2, r3
 8009456:	0013      	movs	r3, r2
 8009458:	43da      	mvns	r2, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4013      	ands	r3, r2
 800945e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	409a      	lsls	r2, r3
 800946a:	0013      	movs	r3, r2
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4313      	orrs	r3, r2
 8009470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800947e:	2201      	movs	r2, #1
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	409a      	lsls	r2, r3
 8009484:	0013      	movs	r3, r2
 8009486:	43da      	mvns	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	4013      	ands	r3, r2
 800948c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	091b      	lsrs	r3, r3, #4
 8009494:	2201      	movs	r2, #1
 8009496:	401a      	ands	r2, r3
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	409a      	lsls	r2, r3
 800949c:	0013      	movs	r3, r2
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	2203      	movs	r2, #3
 80094b0:	4013      	ands	r3, r2
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d017      	beq.n	80094e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	2203      	movs	r2, #3
 80094c2:	409a      	lsls	r2, r3
 80094c4:	0013      	movs	r3, r2
 80094c6:	43da      	mvns	r2, r3
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	4013      	ands	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	409a      	lsls	r2, r3
 80094d8:	0013      	movs	r3, r2
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	4313      	orrs	r3, r2
 80094de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2203      	movs	r2, #3
 80094ec:	4013      	ands	r3, r2
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d123      	bne.n	800953a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	08da      	lsrs	r2, r3, #3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3208      	adds	r2, #8
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	58d3      	ldr	r3, [r2, r3]
 80094fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2207      	movs	r2, #7
 8009504:	4013      	ands	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	220f      	movs	r2, #15
 800950a:	409a      	lsls	r2, r3
 800950c:	0013      	movs	r3, r2
 800950e:	43da      	mvns	r2, r3
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	4013      	ands	r3, r2
 8009514:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2107      	movs	r1, #7
 800951e:	400b      	ands	r3, r1
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	409a      	lsls	r2, r3
 8009524:	0013      	movs	r3, r2
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	4313      	orrs	r3, r2
 800952a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	08da      	lsrs	r2, r3, #3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3208      	adds	r2, #8
 8009534:	0092      	lsls	r2, r2, #2
 8009536:	6939      	ldr	r1, [r7, #16]
 8009538:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	2203      	movs	r2, #3
 8009546:	409a      	lsls	r2, r3
 8009548:	0013      	movs	r3, r2
 800954a:	43da      	mvns	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4013      	ands	r3, r2
 8009550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2203      	movs	r2, #3
 8009558:	401a      	ands	r2, r3
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	409a      	lsls	r2, r3
 8009560:	0013      	movs	r3, r2
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	4313      	orrs	r3, r2
 8009566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685a      	ldr	r2, [r3, #4]
 8009572:	23c0      	movs	r3, #192	; 0xc0
 8009574:	029b      	lsls	r3, r3, #10
 8009576:	4013      	ands	r3, r2
 8009578:	d100      	bne.n	800957c <HAL_GPIO_Init+0x17c>
 800957a:	e0a0      	b.n	80096be <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800957c:	4b57      	ldr	r3, [pc, #348]	; (80096dc <HAL_GPIO_Init+0x2dc>)
 800957e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009580:	4b56      	ldr	r3, [pc, #344]	; (80096dc <HAL_GPIO_Init+0x2dc>)
 8009582:	2101      	movs	r1, #1
 8009584:	430a      	orrs	r2, r1
 8009586:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8009588:	4a55      	ldr	r2, [pc, #340]	; (80096e0 <HAL_GPIO_Init+0x2e0>)
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	089b      	lsrs	r3, r3, #2
 800958e:	3302      	adds	r3, #2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	589b      	ldr	r3, [r3, r2]
 8009594:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2203      	movs	r2, #3
 800959a:	4013      	ands	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	220f      	movs	r2, #15
 80095a0:	409a      	lsls	r2, r3
 80095a2:	0013      	movs	r3, r2
 80095a4:	43da      	mvns	r2, r3
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	4013      	ands	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	23a0      	movs	r3, #160	; 0xa0
 80095b0:	05db      	lsls	r3, r3, #23
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d01f      	beq.n	80095f6 <HAL_GPIO_Init+0x1f6>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a4a      	ldr	r2, [pc, #296]	; (80096e4 <HAL_GPIO_Init+0x2e4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d019      	beq.n	80095f2 <HAL_GPIO_Init+0x1f2>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a49      	ldr	r2, [pc, #292]	; (80096e8 <HAL_GPIO_Init+0x2e8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d013      	beq.n	80095ee <HAL_GPIO_Init+0x1ee>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a48      	ldr	r2, [pc, #288]	; (80096ec <HAL_GPIO_Init+0x2ec>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d00d      	beq.n	80095ea <HAL_GPIO_Init+0x1ea>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a47      	ldr	r2, [pc, #284]	; (80096f0 <HAL_GPIO_Init+0x2f0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d007      	beq.n	80095e6 <HAL_GPIO_Init+0x1e6>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a46      	ldr	r2, [pc, #280]	; (80096f4 <HAL_GPIO_Init+0x2f4>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d101      	bne.n	80095e2 <HAL_GPIO_Init+0x1e2>
 80095de:	2305      	movs	r3, #5
 80095e0:	e00a      	b.n	80095f8 <HAL_GPIO_Init+0x1f8>
 80095e2:	2306      	movs	r3, #6
 80095e4:	e008      	b.n	80095f8 <HAL_GPIO_Init+0x1f8>
 80095e6:	2304      	movs	r3, #4
 80095e8:	e006      	b.n	80095f8 <HAL_GPIO_Init+0x1f8>
 80095ea:	2303      	movs	r3, #3
 80095ec:	e004      	b.n	80095f8 <HAL_GPIO_Init+0x1f8>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e002      	b.n	80095f8 <HAL_GPIO_Init+0x1f8>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e000      	b.n	80095f8 <HAL_GPIO_Init+0x1f8>
 80095f6:	2300      	movs	r3, #0
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	2103      	movs	r1, #3
 80095fc:	400a      	ands	r2, r1
 80095fe:	0092      	lsls	r2, r2, #2
 8009600:	4093      	lsls	r3, r2
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	4313      	orrs	r3, r2
 8009606:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009608:	4935      	ldr	r1, [pc, #212]	; (80096e0 <HAL_GPIO_Init+0x2e0>)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	089b      	lsrs	r3, r3, #2
 800960e:	3302      	adds	r3, #2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009616:	4b38      	ldr	r3, [pc, #224]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	43da      	mvns	r2, r3
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4013      	ands	r3, r2
 8009624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	2380      	movs	r3, #128	; 0x80
 800962c:	025b      	lsls	r3, r3, #9
 800962e:	4013      	ands	r3, r2
 8009630:	d003      	beq.n	800963a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800963a:	4b2f      	ldr	r3, [pc, #188]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8009640:	4b2d      	ldr	r3, [pc, #180]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	43da      	mvns	r2, r3
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	4013      	ands	r3, r2
 800964e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	2380      	movs	r3, #128	; 0x80
 8009656:	029b      	lsls	r3, r3, #10
 8009658:	4013      	ands	r3, r2
 800965a:	d003      	beq.n	8009664 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009664:	4b24      	ldr	r3, [pc, #144]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800966a:	4b23      	ldr	r3, [pc, #140]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	43da      	mvns	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	4013      	ands	r3, r2
 8009678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	2380      	movs	r3, #128	; 0x80
 8009680:	035b      	lsls	r3, r3, #13
 8009682:	4013      	ands	r3, r2
 8009684:	d003      	beq.n	800968e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4313      	orrs	r3, r2
 800968c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800968e:	4b1a      	ldr	r3, [pc, #104]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009694:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	43da      	mvns	r2, r3
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4013      	ands	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	2380      	movs	r3, #128	; 0x80
 80096aa:	039b      	lsls	r3, r3, #14
 80096ac:	4013      	ands	r3, r2
 80096ae:	d003      	beq.n	80096b8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80096b8:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <HAL_GPIO_Init+0x2f8>)
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	3301      	adds	r3, #1
 80096c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	40da      	lsrs	r2, r3
 80096cc:	1e13      	subs	r3, r2, #0
 80096ce:	d000      	beq.n	80096d2 <HAL_GPIO_Init+0x2d2>
 80096d0:	e6a2      	b.n	8009418 <HAL_GPIO_Init+0x18>
  }
}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	46c0      	nop			; (mov r8, r8)
 80096d6:	46bd      	mov	sp, r7
 80096d8:	b006      	add	sp, #24
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40021000 	.word	0x40021000
 80096e0:	40010000 	.word	0x40010000
 80096e4:	50000400 	.word	0x50000400
 80096e8:	50000800 	.word	0x50000800
 80096ec:	50000c00 	.word	0x50000c00
 80096f0:	50001000 	.word	0x50001000
 80096f4:	50001c00 	.word	0x50001c00
 80096f8:	40010400 	.word	0x40010400

080096fc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	000a      	movs	r2, r1
 8009706:	1cbb      	adds	r3, r7, #2
 8009708:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	1cba      	adds	r2, r7, #2
 8009710:	8812      	ldrh	r2, [r2, #0]
 8009712:	4013      	ands	r3, r2
 8009714:	d004      	beq.n	8009720 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8009716:	230f      	movs	r3, #15
 8009718:	18fb      	adds	r3, r7, r3
 800971a:	2201      	movs	r2, #1
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	e003      	b.n	8009728 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009720:	230f      	movs	r3, #15
 8009722:	18fb      	adds	r3, r7, r3
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8009728:	230f      	movs	r3, #15
 800972a:	18fb      	adds	r3, r7, r3
 800972c:	781b      	ldrb	r3, [r3, #0]
}
 800972e:	0018      	movs	r0, r3
 8009730:	46bd      	mov	sp, r7
 8009732:	b004      	add	sp, #16
 8009734:	bd80      	pop	{r7, pc}

08009736 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	0008      	movs	r0, r1
 8009740:	0011      	movs	r1, r2
 8009742:	1cbb      	adds	r3, r7, #2
 8009744:	1c02      	adds	r2, r0, #0
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	1c7b      	adds	r3, r7, #1
 800974a:	1c0a      	adds	r2, r1, #0
 800974c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800974e:	1c7b      	adds	r3, r7, #1
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d004      	beq.n	8009760 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009756:	1cbb      	adds	r3, r7, #2
 8009758:	881a      	ldrh	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800975e:	e003      	b.n	8009768 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8009760:	1cbb      	adds	r3, r7, #2
 8009762:	881a      	ldrh	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009768:	46c0      	nop			; (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	b002      	add	sp, #8
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009770:	b5b0      	push	{r4, r5, r7, lr}
 8009772:	b08a      	sub	sp, #40	; 0x28
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	f000 fbbf 	bl	8009f02 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009784:	4bc9      	ldr	r3, [pc, #804]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	220c      	movs	r2, #12
 800978a:	4013      	ands	r3, r2
 800978c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800978e:	4bc7      	ldr	r3, [pc, #796]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	2380      	movs	r3, #128	; 0x80
 8009794:	025b      	lsls	r3, r3, #9
 8009796:	4013      	ands	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2201      	movs	r2, #1
 80097a0:	4013      	ands	r3, r2
 80097a2:	d100      	bne.n	80097a6 <HAL_RCC_OscConfig+0x36>
 80097a4:	e07e      	b.n	80098a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d007      	beq.n	80097bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	2b0c      	cmp	r3, #12
 80097b0:	d112      	bne.n	80097d8 <HAL_RCC_OscConfig+0x68>
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	2380      	movs	r3, #128	; 0x80
 80097b6:	025b      	lsls	r3, r3, #9
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d10d      	bne.n	80097d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097bc:	4bbb      	ldr	r3, [pc, #748]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	029b      	lsls	r3, r3, #10
 80097c4:	4013      	ands	r3, r2
 80097c6:	d100      	bne.n	80097ca <HAL_RCC_OscConfig+0x5a>
 80097c8:	e06b      	b.n	80098a2 <HAL_RCC_OscConfig+0x132>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d167      	bne.n	80098a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	f000 fb95 	bl	8009f02 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	2380      	movs	r3, #128	; 0x80
 80097de:	025b      	lsls	r3, r3, #9
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d107      	bne.n	80097f4 <HAL_RCC_OscConfig+0x84>
 80097e4:	4bb1      	ldr	r3, [pc, #708]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	4bb0      	ldr	r3, [pc, #704]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80097ea:	2180      	movs	r1, #128	; 0x80
 80097ec:	0249      	lsls	r1, r1, #9
 80097ee:	430a      	orrs	r2, r1
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	e027      	b.n	8009844 <HAL_RCC_OscConfig+0xd4>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	23a0      	movs	r3, #160	; 0xa0
 80097fa:	02db      	lsls	r3, r3, #11
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d10e      	bne.n	800981e <HAL_RCC_OscConfig+0xae>
 8009800:	4baa      	ldr	r3, [pc, #680]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4ba9      	ldr	r3, [pc, #676]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009806:	2180      	movs	r1, #128	; 0x80
 8009808:	02c9      	lsls	r1, r1, #11
 800980a:	430a      	orrs	r2, r1
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	4ba7      	ldr	r3, [pc, #668]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4ba6      	ldr	r3, [pc, #664]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009814:	2180      	movs	r1, #128	; 0x80
 8009816:	0249      	lsls	r1, r1, #9
 8009818:	430a      	orrs	r2, r1
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e012      	b.n	8009844 <HAL_RCC_OscConfig+0xd4>
 800981e:	4ba3      	ldr	r3, [pc, #652]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4ba2      	ldr	r3, [pc, #648]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009824:	49a2      	ldr	r1, [pc, #648]	; (8009ab0 <HAL_RCC_OscConfig+0x340>)
 8009826:	400a      	ands	r2, r1
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	4ba0      	ldr	r3, [pc, #640]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	2380      	movs	r3, #128	; 0x80
 8009830:	025b      	lsls	r3, r3, #9
 8009832:	4013      	ands	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4b9c      	ldr	r3, [pc, #624]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	4b9b      	ldr	r3, [pc, #620]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800983e:	499d      	ldr	r1, [pc, #628]	; (8009ab4 <HAL_RCC_OscConfig+0x344>)
 8009840:	400a      	ands	r2, r1
 8009842:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d015      	beq.n	8009878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800984c:	f7ff fd1a 	bl	8009284 <HAL_GetTick>
 8009850:	0003      	movs	r3, r0
 8009852:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009854:	e009      	b.n	800986a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009856:	f7ff fd15 	bl	8009284 <HAL_GetTick>
 800985a:	0002      	movs	r2, r0
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	2b64      	cmp	r3, #100	; 0x64
 8009862:	d902      	bls.n	800986a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	f000 fb4c 	bl	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800986a:	4b90      	ldr	r3, [pc, #576]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	2380      	movs	r3, #128	; 0x80
 8009870:	029b      	lsls	r3, r3, #10
 8009872:	4013      	ands	r3, r2
 8009874:	d0ef      	beq.n	8009856 <HAL_RCC_OscConfig+0xe6>
 8009876:	e015      	b.n	80098a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009878:	f7ff fd04 	bl	8009284 <HAL_GetTick>
 800987c:	0003      	movs	r3, r0
 800987e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009880:	e008      	b.n	8009894 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009882:	f7ff fcff 	bl	8009284 <HAL_GetTick>
 8009886:	0002      	movs	r2, r0
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b64      	cmp	r3, #100	; 0x64
 800988e:	d901      	bls.n	8009894 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e336      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009894:	4b85      	ldr	r3, [pc, #532]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	2380      	movs	r3, #128	; 0x80
 800989a:	029b      	lsls	r3, r3, #10
 800989c:	4013      	ands	r3, r2
 800989e:	d1f0      	bne.n	8009882 <HAL_RCC_OscConfig+0x112>
 80098a0:	e000      	b.n	80098a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2202      	movs	r2, #2
 80098aa:	4013      	ands	r3, r2
 80098ac:	d100      	bne.n	80098b0 <HAL_RCC_OscConfig+0x140>
 80098ae:	e099      	b.n	80099e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	2220      	movs	r2, #32
 80098ba:	4013      	ands	r3, r2
 80098bc:	d009      	beq.n	80098d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80098be:	4b7b      	ldr	r3, [pc, #492]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b7a      	ldr	r3, [pc, #488]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80098c4:	2120      	movs	r1, #32
 80098c6:	430a      	orrs	r2, r1
 80098c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	2220      	movs	r2, #32
 80098ce:	4393      	bics	r3, r2
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	2b04      	cmp	r3, #4
 80098d6:	d005      	beq.n	80098e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	2b0c      	cmp	r3, #12
 80098dc:	d13e      	bne.n	800995c <HAL_RCC_OscConfig+0x1ec>
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d13b      	bne.n	800995c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80098e4:	4b71      	ldr	r3, [pc, #452]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2204      	movs	r2, #4
 80098ea:	4013      	ands	r3, r2
 80098ec:	d004      	beq.n	80098f8 <HAL_RCC_OscConfig+0x188>
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e304      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098f8:	4b6c      	ldr	r3, [pc, #432]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4a6e      	ldr	r2, [pc, #440]	; (8009ab8 <HAL_RCC_OscConfig+0x348>)
 80098fe:	4013      	ands	r3, r2
 8009900:	0019      	movs	r1, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	021a      	lsls	r2, r3, #8
 8009908:	4b68      	ldr	r3, [pc, #416]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800990e:	4b67      	ldr	r3, [pc, #412]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2209      	movs	r2, #9
 8009914:	4393      	bics	r3, r2
 8009916:	0019      	movs	r1, r3
 8009918:	4b64      	ldr	r3, [pc, #400]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800991a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991c:	430a      	orrs	r2, r1
 800991e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009920:	f000 fc42 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 8009924:	0001      	movs	r1, r0
 8009926:	4b61      	ldr	r3, [pc, #388]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	091b      	lsrs	r3, r3, #4
 800992c:	220f      	movs	r2, #15
 800992e:	4013      	ands	r3, r2
 8009930:	4a62      	ldr	r2, [pc, #392]	; (8009abc <HAL_RCC_OscConfig+0x34c>)
 8009932:	5cd3      	ldrb	r3, [r2, r3]
 8009934:	000a      	movs	r2, r1
 8009936:	40da      	lsrs	r2, r3
 8009938:	4b61      	ldr	r3, [pc, #388]	; (8009ac0 <HAL_RCC_OscConfig+0x350>)
 800993a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800993c:	4b61      	ldr	r3, [pc, #388]	; (8009ac4 <HAL_RCC_OscConfig+0x354>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2513      	movs	r5, #19
 8009942:	197c      	adds	r4, r7, r5
 8009944:	0018      	movs	r0, r3
 8009946:	f7ff fc57 	bl	80091f8 <HAL_InitTick>
 800994a:	0003      	movs	r3, r0
 800994c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800994e:	197b      	adds	r3, r7, r5
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d046      	beq.n	80099e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8009956:	197b      	adds	r3, r7, r5
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	e2d2      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	d027      	beq.n	80099b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009962:	4b52      	ldr	r3, [pc, #328]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2209      	movs	r2, #9
 8009968:	4393      	bics	r3, r2
 800996a:	0019      	movs	r1, r3
 800996c:	4b4f      	ldr	r3, [pc, #316]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800996e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009970:	430a      	orrs	r2, r1
 8009972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009974:	f7ff fc86 	bl	8009284 <HAL_GetTick>
 8009978:	0003      	movs	r3, r0
 800997a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800997c:	e008      	b.n	8009990 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800997e:	f7ff fc81 	bl	8009284 <HAL_GetTick>
 8009982:	0002      	movs	r2, r0
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d901      	bls.n	8009990 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e2b8      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009990:	4b46      	ldr	r3, [pc, #280]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2204      	movs	r2, #4
 8009996:	4013      	ands	r3, r2
 8009998:	d0f1      	beq.n	800997e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800999a:	4b44      	ldr	r3, [pc, #272]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	4a46      	ldr	r2, [pc, #280]	; (8009ab8 <HAL_RCC_OscConfig+0x348>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	0019      	movs	r1, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	021a      	lsls	r2, r3, #8
 80099aa:	4b40      	ldr	r3, [pc, #256]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80099ac:	430a      	orrs	r2, r1
 80099ae:	605a      	str	r2, [r3, #4]
 80099b0:	e018      	b.n	80099e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099b2:	4b3e      	ldr	r3, [pc, #248]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4b3d      	ldr	r3, [pc, #244]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80099b8:	2101      	movs	r1, #1
 80099ba:	438a      	bics	r2, r1
 80099bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099be:	f7ff fc61 	bl	8009284 <HAL_GetTick>
 80099c2:	0003      	movs	r3, r0
 80099c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099c6:	e008      	b.n	80099da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099c8:	f7ff fc5c 	bl	8009284 <HAL_GetTick>
 80099cc:	0002      	movs	r2, r0
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e293      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099da:	4b34      	ldr	r3, [pc, #208]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2204      	movs	r2, #4
 80099e0:	4013      	ands	r3, r2
 80099e2:	d1f1      	bne.n	80099c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2210      	movs	r2, #16
 80099ea:	4013      	ands	r3, r2
 80099ec:	d100      	bne.n	80099f0 <HAL_RCC_OscConfig+0x280>
 80099ee:	e0a2      	b.n	8009b36 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d140      	bne.n	8009a78 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80099f6:	4b2d      	ldr	r3, [pc, #180]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	2380      	movs	r3, #128	; 0x80
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4013      	ands	r3, r2
 8009a00:	d005      	beq.n	8009a0e <HAL_RCC_OscConfig+0x29e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e279      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a0e:	4b27      	ldr	r3, [pc, #156]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	4a2d      	ldr	r2, [pc, #180]	; (8009ac8 <HAL_RCC_OscConfig+0x358>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	0019      	movs	r1, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1c:	4b23      	ldr	r3, [pc, #140]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a22:	4b22      	ldr	r3, [pc, #136]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	0a19      	lsrs	r1, r3, #8
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	061a      	lsls	r2, r3, #24
 8009a30:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	0b5b      	lsrs	r3, r3, #13
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	2280      	movs	r2, #128	; 0x80
 8009a40:	0212      	lsls	r2, r2, #8
 8009a42:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009a44:	4b19      	ldr	r3, [pc, #100]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	091b      	lsrs	r3, r3, #4
 8009a4a:	210f      	movs	r1, #15
 8009a4c:	400b      	ands	r3, r1
 8009a4e:	491b      	ldr	r1, [pc, #108]	; (8009abc <HAL_RCC_OscConfig+0x34c>)
 8009a50:	5ccb      	ldrb	r3, [r1, r3]
 8009a52:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009a54:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <HAL_RCC_OscConfig+0x350>)
 8009a56:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8009a58:	4b1a      	ldr	r3, [pc, #104]	; (8009ac4 <HAL_RCC_OscConfig+0x354>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2513      	movs	r5, #19
 8009a5e:	197c      	adds	r4, r7, r5
 8009a60:	0018      	movs	r0, r3
 8009a62:	f7ff fbc9 	bl	80091f8 <HAL_InitTick>
 8009a66:	0003      	movs	r3, r0
 8009a68:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8009a6a:	197b      	adds	r3, r7, r5
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d061      	beq.n	8009b36 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8009a72:	197b      	adds	r3, r7, r5
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	e244      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d040      	beq.n	8009b02 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009a80:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4b09      	ldr	r3, [pc, #36]	; (8009aac <HAL_RCC_OscConfig+0x33c>)
 8009a86:	2180      	movs	r1, #128	; 0x80
 8009a88:	0049      	lsls	r1, r1, #1
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a8e:	f7ff fbf9 	bl	8009284 <HAL_GetTick>
 8009a92:	0003      	movs	r3, r0
 8009a94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009a96:	e019      	b.n	8009acc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009a98:	f7ff fbf4 	bl	8009284 <HAL_GetTick>
 8009a9c:	0002      	movs	r2, r0
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d912      	bls.n	8009acc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e22b      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
 8009aaa:	46c0      	nop			; (mov r8, r8)
 8009aac:	40021000 	.word	0x40021000
 8009ab0:	fffeffff 	.word	0xfffeffff
 8009ab4:	fffbffff 	.word	0xfffbffff
 8009ab8:	ffffe0ff 	.word	0xffffe0ff
 8009abc:	0800b458 	.word	0x0800b458
 8009ac0:	20000000 	.word	0x20000000
 8009ac4:	20000004 	.word	0x20000004
 8009ac8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009acc:	4bca      	ldr	r3, [pc, #808]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	2380      	movs	r3, #128	; 0x80
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	d0df      	beq.n	8009a98 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ad8:	4bc7      	ldr	r3, [pc, #796]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4ac7      	ldr	r2, [pc, #796]	; (8009dfc <HAL_RCC_OscConfig+0x68c>)
 8009ade:	4013      	ands	r3, r2
 8009ae0:	0019      	movs	r1, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ae6:	4bc4      	ldr	r3, [pc, #784]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009aec:	4bc2      	ldr	r3, [pc, #776]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	0a19      	lsrs	r1, r3, #8
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	061a      	lsls	r2, r3, #24
 8009afa:	4bbf      	ldr	r3, [pc, #764]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009afc:	430a      	orrs	r2, r1
 8009afe:	605a      	str	r2, [r3, #4]
 8009b00:	e019      	b.n	8009b36 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009b02:	4bbd      	ldr	r3, [pc, #756]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	4bbc      	ldr	r3, [pc, #752]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b08:	49bd      	ldr	r1, [pc, #756]	; (8009e00 <HAL_RCC_OscConfig+0x690>)
 8009b0a:	400a      	ands	r2, r1
 8009b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b0e:	f7ff fbb9 	bl	8009284 <HAL_GetTick>
 8009b12:	0003      	movs	r3, r0
 8009b14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009b16:	e008      	b.n	8009b2a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b18:	f7ff fbb4 	bl	8009284 <HAL_GetTick>
 8009b1c:	0002      	movs	r2, r0
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e1eb      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009b2a:	4bb3      	ldr	r3, [pc, #716]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	2380      	movs	r3, #128	; 0x80
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4013      	ands	r3, r2
 8009b34:	d1f0      	bne.n	8009b18 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2208      	movs	r2, #8
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	d036      	beq.n	8009bae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d019      	beq.n	8009b7c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b48:	4bab      	ldr	r3, [pc, #684]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b4c:	4baa      	ldr	r3, [pc, #680]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b4e:	2101      	movs	r1, #1
 8009b50:	430a      	orrs	r2, r1
 8009b52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b54:	f7ff fb96 	bl	8009284 <HAL_GetTick>
 8009b58:	0003      	movs	r3, r0
 8009b5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b5c:	e008      	b.n	8009b70 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b5e:	f7ff fb91 	bl	8009284 <HAL_GetTick>
 8009b62:	0002      	movs	r2, r0
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d901      	bls.n	8009b70 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e1c8      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b70:	4ba1      	ldr	r3, [pc, #644]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b74:	2202      	movs	r2, #2
 8009b76:	4013      	ands	r3, r2
 8009b78:	d0f1      	beq.n	8009b5e <HAL_RCC_OscConfig+0x3ee>
 8009b7a:	e018      	b.n	8009bae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b7c:	4b9e      	ldr	r3, [pc, #632]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b80:	4b9d      	ldr	r3, [pc, #628]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009b82:	2101      	movs	r1, #1
 8009b84:	438a      	bics	r2, r1
 8009b86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b88:	f7ff fb7c 	bl	8009284 <HAL_GetTick>
 8009b8c:	0003      	movs	r3, r0
 8009b8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b90:	e008      	b.n	8009ba4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b92:	f7ff fb77 	bl	8009284 <HAL_GetTick>
 8009b96:	0002      	movs	r2, r0
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d901      	bls.n	8009ba4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e1ae      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ba4:	4b94      	ldr	r3, [pc, #592]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba8:	2202      	movs	r2, #2
 8009baa:	4013      	ands	r3, r2
 8009bac:	d1f1      	bne.n	8009b92 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2204      	movs	r2, #4
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	d100      	bne.n	8009bba <HAL_RCC_OscConfig+0x44a>
 8009bb8:	e0ae      	b.n	8009d18 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bba:	2023      	movs	r0, #35	; 0x23
 8009bbc:	183b      	adds	r3, r7, r0
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bc2:	4b8d      	ldr	r3, [pc, #564]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bc6:	2380      	movs	r3, #128	; 0x80
 8009bc8:	055b      	lsls	r3, r3, #21
 8009bca:	4013      	ands	r3, r2
 8009bcc:	d109      	bne.n	8009be2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bce:	4b8a      	ldr	r3, [pc, #552]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd2:	4b89      	ldr	r3, [pc, #548]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009bd4:	2180      	movs	r1, #128	; 0x80
 8009bd6:	0549      	lsls	r1, r1, #21
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009bdc:	183b      	adds	r3, r7, r0
 8009bde:	2201      	movs	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009be2:	4b88      	ldr	r3, [pc, #544]	; (8009e04 <HAL_RCC_OscConfig+0x694>)
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	2380      	movs	r3, #128	; 0x80
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	4013      	ands	r3, r2
 8009bec:	d11a      	bne.n	8009c24 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bee:	4b85      	ldr	r3, [pc, #532]	; (8009e04 <HAL_RCC_OscConfig+0x694>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	4b84      	ldr	r3, [pc, #528]	; (8009e04 <HAL_RCC_OscConfig+0x694>)
 8009bf4:	2180      	movs	r1, #128	; 0x80
 8009bf6:	0049      	lsls	r1, r1, #1
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bfc:	f7ff fb42 	bl	8009284 <HAL_GetTick>
 8009c00:	0003      	movs	r3, r0
 8009c02:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c04:	e008      	b.n	8009c18 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c06:	f7ff fb3d 	bl	8009284 <HAL_GetTick>
 8009c0a:	0002      	movs	r2, r0
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b64      	cmp	r3, #100	; 0x64
 8009c12:	d901      	bls.n	8009c18 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e174      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c18:	4b7a      	ldr	r3, [pc, #488]	; (8009e04 <HAL_RCC_OscConfig+0x694>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	4013      	ands	r3, r2
 8009c22:	d0f0      	beq.n	8009c06 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	2380      	movs	r3, #128	; 0x80
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d107      	bne.n	8009c40 <HAL_RCC_OscConfig+0x4d0>
 8009c30:	4b71      	ldr	r3, [pc, #452]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c34:	4b70      	ldr	r3, [pc, #448]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c36:	2180      	movs	r1, #128	; 0x80
 8009c38:	0049      	lsls	r1, r1, #1
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	651a      	str	r2, [r3, #80]	; 0x50
 8009c3e:	e031      	b.n	8009ca4 <HAL_RCC_OscConfig+0x534>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10c      	bne.n	8009c62 <HAL_RCC_OscConfig+0x4f2>
 8009c48:	4b6b      	ldr	r3, [pc, #428]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c4c:	4b6a      	ldr	r3, [pc, #424]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c4e:	496c      	ldr	r1, [pc, #432]	; (8009e00 <HAL_RCC_OscConfig+0x690>)
 8009c50:	400a      	ands	r2, r1
 8009c52:	651a      	str	r2, [r3, #80]	; 0x50
 8009c54:	4b68      	ldr	r3, [pc, #416]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c58:	4b67      	ldr	r3, [pc, #412]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c5a:	496b      	ldr	r1, [pc, #428]	; (8009e08 <HAL_RCC_OscConfig+0x698>)
 8009c5c:	400a      	ands	r2, r1
 8009c5e:	651a      	str	r2, [r3, #80]	; 0x50
 8009c60:	e020      	b.n	8009ca4 <HAL_RCC_OscConfig+0x534>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	689a      	ldr	r2, [r3, #8]
 8009c66:	23a0      	movs	r3, #160	; 0xa0
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d10e      	bne.n	8009c8c <HAL_RCC_OscConfig+0x51c>
 8009c6e:	4b62      	ldr	r3, [pc, #392]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c72:	4b61      	ldr	r3, [pc, #388]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c74:	2180      	movs	r1, #128	; 0x80
 8009c76:	00c9      	lsls	r1, r1, #3
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	651a      	str	r2, [r3, #80]	; 0x50
 8009c7c:	4b5e      	ldr	r3, [pc, #376]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c80:	4b5d      	ldr	r3, [pc, #372]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c82:	2180      	movs	r1, #128	; 0x80
 8009c84:	0049      	lsls	r1, r1, #1
 8009c86:	430a      	orrs	r2, r1
 8009c88:	651a      	str	r2, [r3, #80]	; 0x50
 8009c8a:	e00b      	b.n	8009ca4 <HAL_RCC_OscConfig+0x534>
 8009c8c:	4b5a      	ldr	r3, [pc, #360]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c90:	4b59      	ldr	r3, [pc, #356]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c92:	495b      	ldr	r1, [pc, #364]	; (8009e00 <HAL_RCC_OscConfig+0x690>)
 8009c94:	400a      	ands	r2, r1
 8009c96:	651a      	str	r2, [r3, #80]	; 0x50
 8009c98:	4b57      	ldr	r3, [pc, #348]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c9c:	4b56      	ldr	r3, [pc, #344]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009c9e:	495a      	ldr	r1, [pc, #360]	; (8009e08 <HAL_RCC_OscConfig+0x698>)
 8009ca0:	400a      	ands	r2, r1
 8009ca2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d015      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cac:	f7ff faea 	bl	8009284 <HAL_GetTick>
 8009cb0:	0003      	movs	r3, r0
 8009cb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cb4:	e009      	b.n	8009cca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cb6:	f7ff fae5 	bl	8009284 <HAL_GetTick>
 8009cba:	0002      	movs	r2, r0
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	4a52      	ldr	r2, [pc, #328]	; (8009e0c <HAL_RCC_OscConfig+0x69c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d901      	bls.n	8009cca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e11b      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cca:	4b4b      	ldr	r3, [pc, #300]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cce:	2380      	movs	r3, #128	; 0x80
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	d0ef      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x546>
 8009cd6:	e014      	b.n	8009d02 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cd8:	f7ff fad4 	bl	8009284 <HAL_GetTick>
 8009cdc:	0003      	movs	r3, r0
 8009cde:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ce0:	e009      	b.n	8009cf6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ce2:	f7ff facf 	bl	8009284 <HAL_GetTick>
 8009ce6:	0002      	movs	r2, r0
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	4a47      	ldr	r2, [pc, #284]	; (8009e0c <HAL_RCC_OscConfig+0x69c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e105      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cf6:	4b40      	ldr	r3, [pc, #256]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cfa:	2380      	movs	r3, #128	; 0x80
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4013      	ands	r3, r2
 8009d00:	d1ef      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009d02:	2323      	movs	r3, #35	; 0x23
 8009d04:	18fb      	adds	r3, r7, r3
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d105      	bne.n	8009d18 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d0c:	4b3a      	ldr	r3, [pc, #232]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d10:	4b39      	ldr	r3, [pc, #228]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d12:	493f      	ldr	r1, [pc, #252]	; (8009e10 <HAL_RCC_OscConfig+0x6a0>)
 8009d14:	400a      	ands	r2, r1
 8009d16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	4013      	ands	r3, r2
 8009d20:	d049      	beq.n	8009db6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d026      	beq.n	8009d78 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8009d2a:	4b33      	ldr	r3, [pc, #204]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d2c:	689a      	ldr	r2, [r3, #8]
 8009d2e:	4b32      	ldr	r3, [pc, #200]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d30:	2101      	movs	r1, #1
 8009d32:	430a      	orrs	r2, r1
 8009d34:	609a      	str	r2, [r3, #8]
 8009d36:	4b30      	ldr	r3, [pc, #192]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d3a:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	635a      	str	r2, [r3, #52]	; 0x34
 8009d42:	4b34      	ldr	r3, [pc, #208]	; (8009e14 <HAL_RCC_OscConfig+0x6a4>)
 8009d44:	6a1a      	ldr	r2, [r3, #32]
 8009d46:	4b33      	ldr	r3, [pc, #204]	; (8009e14 <HAL_RCC_OscConfig+0x6a4>)
 8009d48:	2180      	movs	r1, #128	; 0x80
 8009d4a:	0189      	lsls	r1, r1, #6
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d50:	f7ff fa98 	bl	8009284 <HAL_GetTick>
 8009d54:	0003      	movs	r3, r0
 8009d56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d58:	e008      	b.n	8009d6c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d5a:	f7ff fa93 	bl	8009284 <HAL_GetTick>
 8009d5e:	0002      	movs	r2, r0
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d901      	bls.n	8009d6c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e0ca      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d6c:	4b22      	ldr	r3, [pc, #136]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	2202      	movs	r2, #2
 8009d72:	4013      	ands	r3, r2
 8009d74:	d0f1      	beq.n	8009d5a <HAL_RCC_OscConfig+0x5ea>
 8009d76:	e01e      	b.n	8009db6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009d78:	4b1f      	ldr	r3, [pc, #124]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	4b1e      	ldr	r3, [pc, #120]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009d7e:	2101      	movs	r1, #1
 8009d80:	438a      	bics	r2, r1
 8009d82:	609a      	str	r2, [r3, #8]
 8009d84:	4b23      	ldr	r3, [pc, #140]	; (8009e14 <HAL_RCC_OscConfig+0x6a4>)
 8009d86:	6a1a      	ldr	r2, [r3, #32]
 8009d88:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <HAL_RCC_OscConfig+0x6a4>)
 8009d8a:	4923      	ldr	r1, [pc, #140]	; (8009e18 <HAL_RCC_OscConfig+0x6a8>)
 8009d8c:	400a      	ands	r2, r1
 8009d8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d90:	f7ff fa78 	bl	8009284 <HAL_GetTick>
 8009d94:	0003      	movs	r3, r0
 8009d96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d98:	e008      	b.n	8009dac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d9a:	f7ff fa73 	bl	8009284 <HAL_GetTick>
 8009d9e:	0002      	movs	r2, r0
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e0aa      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dac:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	2202      	movs	r2, #2
 8009db2:	4013      	ands	r3, r2
 8009db4:	d1f1      	bne.n	8009d9a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d100      	bne.n	8009dc0 <HAL_RCC_OscConfig+0x650>
 8009dbe:	e09f      	b.n	8009f00 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b0c      	cmp	r3, #12
 8009dc4:	d100      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x658>
 8009dc6:	e078      	b.n	8009eba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d159      	bne.n	8009e84 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <HAL_RCC_OscConfig+0x688>)
 8009dd6:	4911      	ldr	r1, [pc, #68]	; (8009e1c <HAL_RCC_OscConfig+0x6ac>)
 8009dd8:	400a      	ands	r2, r1
 8009dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ddc:	f7ff fa52 	bl	8009284 <HAL_GetTick>
 8009de0:	0003      	movs	r3, r0
 8009de2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009de4:	e01c      	b.n	8009e20 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009de6:	f7ff fa4d 	bl	8009284 <HAL_GetTick>
 8009dea:	0002      	movs	r2, r0
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d915      	bls.n	8009e20 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e084      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
 8009df8:	40021000 	.word	0x40021000
 8009dfc:	ffff1fff 	.word	0xffff1fff
 8009e00:	fffffeff 	.word	0xfffffeff
 8009e04:	40007000 	.word	0x40007000
 8009e08:	fffffbff 	.word	0xfffffbff
 8009e0c:	00001388 	.word	0x00001388
 8009e10:	efffffff 	.word	0xefffffff
 8009e14:	40010000 	.word	0x40010000
 8009e18:	ffffdfff 	.word	0xffffdfff
 8009e1c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009e20:	4b3a      	ldr	r3, [pc, #232]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	2380      	movs	r3, #128	; 0x80
 8009e26:	049b      	lsls	r3, r3, #18
 8009e28:	4013      	ands	r3, r2
 8009e2a:	d1dc      	bne.n	8009de6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e2c:	4b37      	ldr	r3, [pc, #220]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4a37      	ldr	r2, [pc, #220]	; (8009f10 <HAL_RCC_OscConfig+0x7a0>)
 8009e32:	4013      	ands	r3, r2
 8009e34:	0019      	movs	r1, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	431a      	orrs	r2, r3
 8009e46:	4b31      	ldr	r3, [pc, #196]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e4c:	4b2f      	ldr	r3, [pc, #188]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	4b2e      	ldr	r3, [pc, #184]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	0449      	lsls	r1, r1, #17
 8009e56:	430a      	orrs	r2, r1
 8009e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e5a:	f7ff fa13 	bl	8009284 <HAL_GetTick>
 8009e5e:	0003      	movs	r3, r0
 8009e60:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e64:	f7ff fa0e 	bl	8009284 <HAL_GetTick>
 8009e68:	0002      	movs	r2, r0
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e045      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009e76:	4b25      	ldr	r3, [pc, #148]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	2380      	movs	r3, #128	; 0x80
 8009e7c:	049b      	lsls	r3, r3, #18
 8009e7e:	4013      	ands	r3, r2
 8009e80:	d0f0      	beq.n	8009e64 <HAL_RCC_OscConfig+0x6f4>
 8009e82:	e03d      	b.n	8009f00 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e84:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	4b20      	ldr	r3, [pc, #128]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009e8a:	4922      	ldr	r1, [pc, #136]	; (8009f14 <HAL_RCC_OscConfig+0x7a4>)
 8009e8c:	400a      	ands	r2, r1
 8009e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e90:	f7ff f9f8 	bl	8009284 <HAL_GetTick>
 8009e94:	0003      	movs	r3, r0
 8009e96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009e98:	e008      	b.n	8009eac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e9a:	f7ff f9f3 	bl	8009284 <HAL_GetTick>
 8009e9e:	0002      	movs	r2, r0
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d901      	bls.n	8009eac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e02a      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009eac:	4b17      	ldr	r3, [pc, #92]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	049b      	lsls	r3, r3, #18
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	d1f0      	bne.n	8009e9a <HAL_RCC_OscConfig+0x72a>
 8009eb8:	e022      	b.n	8009f00 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e01d      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009ec6:	4b11      	ldr	r3, [pc, #68]	; (8009f0c <HAL_RCC_OscConfig+0x79c>)
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	2380      	movs	r3, #128	; 0x80
 8009ed0:	025b      	lsls	r3, r3, #9
 8009ed2:	401a      	ands	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d10f      	bne.n	8009efc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	23f0      	movs	r3, #240	; 0xf0
 8009ee0:	039b      	lsls	r3, r3, #14
 8009ee2:	401a      	ands	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d107      	bne.n	8009efc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009eec:	69ba      	ldr	r2, [r7, #24]
 8009eee:	23c0      	movs	r3, #192	; 0xc0
 8009ef0:	041b      	lsls	r3, r3, #16
 8009ef2:	401a      	ands	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d001      	beq.n	8009f00 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	0018      	movs	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	b00a      	add	sp, #40	; 0x28
 8009f08:	bdb0      	pop	{r4, r5, r7, pc}
 8009f0a:	46c0      	nop			; (mov r8, r8)
 8009f0c:	40021000 	.word	0x40021000
 8009f10:	ff02ffff 	.word	0xff02ffff
 8009f14:	feffffff 	.word	0xfeffffff

08009f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f18:	b5b0      	push	{r4, r5, r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e128      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f2c:	4b96      	ldr	r3, [pc, #600]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2201      	movs	r2, #1
 8009f32:	4013      	ands	r3, r2
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d91e      	bls.n	8009f78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f3a:	4b93      	ldr	r3, [pc, #588]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	4393      	bics	r3, r2
 8009f42:	0019      	movs	r1, r3
 8009f44:	4b90      	ldr	r3, [pc, #576]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009f4c:	f7ff f99a 	bl	8009284 <HAL_GetTick>
 8009f50:	0003      	movs	r3, r0
 8009f52:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f54:	e009      	b.n	8009f6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f56:	f7ff f995 	bl	8009284 <HAL_GetTick>
 8009f5a:	0002      	movs	r2, r0
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	4a8a      	ldr	r2, [pc, #552]	; (800a18c <HAL_RCC_ClockConfig+0x274>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d901      	bls.n	8009f6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e109      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f6a:	4b87      	ldr	r3, [pc, #540]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	4013      	ands	r3, r2
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d1ee      	bne.n	8009f56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	4013      	ands	r3, r2
 8009f80:	d009      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f82:	4b83      	ldr	r3, [pc, #524]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	22f0      	movs	r2, #240	; 0xf0
 8009f88:	4393      	bics	r3, r2
 8009f8a:	0019      	movs	r1, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	4b7f      	ldr	r3, [pc, #508]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 8009f92:	430a      	orrs	r2, r1
 8009f94:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	d100      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x8a>
 8009fa0:	e089      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d107      	bne.n	8009fba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009faa:	4b79      	ldr	r3, [pc, #484]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	2380      	movs	r3, #128	; 0x80
 8009fb0:	029b      	lsls	r3, r3, #10
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	d120      	bne.n	8009ff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e0e1      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d107      	bne.n	8009fd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fc2:	4b73      	ldr	r3, [pc, #460]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	2380      	movs	r3, #128	; 0x80
 8009fc8:	049b      	lsls	r3, r3, #18
 8009fca:	4013      	ands	r3, r2
 8009fcc:	d114      	bne.n	8009ff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e0d5      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d106      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fda:	4b6d      	ldr	r3, [pc, #436]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2204      	movs	r2, #4
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	d109      	bne.n	8009ff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e0ca      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009fe8:	4b69      	ldr	r3, [pc, #420]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	2380      	movs	r3, #128	; 0x80
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	d101      	bne.n	8009ff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e0c2      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ff8:	4b65      	ldr	r3, [pc, #404]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	2203      	movs	r2, #3
 8009ffe:	4393      	bics	r3, r2
 800a000:	0019      	movs	r1, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	4b62      	ldr	r3, [pc, #392]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a008:	430a      	orrs	r2, r1
 800a00a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a00c:	f7ff f93a 	bl	8009284 <HAL_GetTick>
 800a010:	0003      	movs	r3, r0
 800a012:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d111      	bne.n	800a040 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a01c:	e009      	b.n	800a032 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a01e:	f7ff f931 	bl	8009284 <HAL_GetTick>
 800a022:	0002      	movs	r2, r0
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	4a58      	ldr	r2, [pc, #352]	; (800a18c <HAL_RCC_ClockConfig+0x274>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d901      	bls.n	800a032 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e0a5      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a032:	4b57      	ldr	r3, [pc, #348]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	220c      	movs	r2, #12
 800a038:	4013      	ands	r3, r2
 800a03a:	2b08      	cmp	r3, #8
 800a03c:	d1ef      	bne.n	800a01e <HAL_RCC_ClockConfig+0x106>
 800a03e:	e03a      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b03      	cmp	r3, #3
 800a046:	d111      	bne.n	800a06c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a048:	e009      	b.n	800a05e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a04a:	f7ff f91b 	bl	8009284 <HAL_GetTick>
 800a04e:	0002      	movs	r2, r0
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	4a4d      	ldr	r2, [pc, #308]	; (800a18c <HAL_RCC_ClockConfig+0x274>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e08f      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a05e:	4b4c      	ldr	r3, [pc, #304]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	220c      	movs	r2, #12
 800a064:	4013      	ands	r3, r2
 800a066:	2b0c      	cmp	r3, #12
 800a068:	d1ef      	bne.n	800a04a <HAL_RCC_ClockConfig+0x132>
 800a06a:	e024      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d11b      	bne.n	800a0ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a074:	e009      	b.n	800a08a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a076:	f7ff f905 	bl	8009284 <HAL_GetTick>
 800a07a:	0002      	movs	r2, r0
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	4a42      	ldr	r2, [pc, #264]	; (800a18c <HAL_RCC_ClockConfig+0x274>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d901      	bls.n	800a08a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e079      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a08a:	4b41      	ldr	r3, [pc, #260]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	220c      	movs	r2, #12
 800a090:	4013      	ands	r3, r2
 800a092:	2b04      	cmp	r3, #4
 800a094:	d1ef      	bne.n	800a076 <HAL_RCC_ClockConfig+0x15e>
 800a096:	e00e      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a098:	f7ff f8f4 	bl	8009284 <HAL_GetTick>
 800a09c:	0002      	movs	r2, r0
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	4a3a      	ldr	r2, [pc, #232]	; (800a18c <HAL_RCC_ClockConfig+0x274>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d901      	bls.n	800a0ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e068      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a0ac:	4b38      	ldr	r3, [pc, #224]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	220c      	movs	r2, #12
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	d1f0      	bne.n	800a098 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0b6:	4b34      	ldr	r3, [pc, #208]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4013      	ands	r3, r2
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d21e      	bcs.n	800a102 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0c4:	4b30      	ldr	r3, [pc, #192]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	4393      	bics	r3, r2
 800a0cc:	0019      	movs	r1, r3
 800a0ce:	4b2e      	ldr	r3, [pc, #184]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a0d6:	f7ff f8d5 	bl	8009284 <HAL_GetTick>
 800a0da:	0003      	movs	r3, r0
 800a0dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0de:	e009      	b.n	800a0f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0e0:	f7ff f8d0 	bl	8009284 <HAL_GetTick>
 800a0e4:	0002      	movs	r2, r0
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	4a28      	ldr	r2, [pc, #160]	; (800a18c <HAL_RCC_ClockConfig+0x274>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d901      	bls.n	800a0f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e044      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0f4:	4b24      	ldr	r3, [pc, #144]	; (800a188 <HAL_RCC_ClockConfig+0x270>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d1ee      	bne.n	800a0e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2204      	movs	r2, #4
 800a108:	4013      	ands	r3, r2
 800a10a:	d009      	beq.n	800a120 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a10c:	4b20      	ldr	r3, [pc, #128]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	4a20      	ldr	r2, [pc, #128]	; (800a194 <HAL_RCC_ClockConfig+0x27c>)
 800a112:	4013      	ands	r3, r2
 800a114:	0019      	movs	r1, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a11c:	430a      	orrs	r2, r1
 800a11e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2208      	movs	r2, #8
 800a126:	4013      	ands	r3, r2
 800a128:	d00a      	beq.n	800a140 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a12a:	4b19      	ldr	r3, [pc, #100]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	4a1a      	ldr	r2, [pc, #104]	; (800a198 <HAL_RCC_ClockConfig+0x280>)
 800a130:	4013      	ands	r3, r2
 800a132:	0019      	movs	r1, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	00da      	lsls	r2, r3, #3
 800a13a:	4b15      	ldr	r3, [pc, #84]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a13c:	430a      	orrs	r2, r1
 800a13e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a140:	f000 f832 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800a144:	0001      	movs	r1, r0
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <HAL_RCC_ClockConfig+0x278>)
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	091b      	lsrs	r3, r3, #4
 800a14c:	220f      	movs	r2, #15
 800a14e:	4013      	ands	r3, r2
 800a150:	4a12      	ldr	r2, [pc, #72]	; (800a19c <HAL_RCC_ClockConfig+0x284>)
 800a152:	5cd3      	ldrb	r3, [r2, r3]
 800a154:	000a      	movs	r2, r1
 800a156:	40da      	lsrs	r2, r3
 800a158:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <HAL_RCC_ClockConfig+0x288>)
 800a15a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a15c:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <HAL_RCC_ClockConfig+0x28c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	250b      	movs	r5, #11
 800a162:	197c      	adds	r4, r7, r5
 800a164:	0018      	movs	r0, r3
 800a166:	f7ff f847 	bl	80091f8 <HAL_InitTick>
 800a16a:	0003      	movs	r3, r0
 800a16c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800a16e:	197b      	adds	r3, r7, r5
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800a176:	197b      	adds	r3, r7, r5
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	e000      	b.n	800a17e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	0018      	movs	r0, r3
 800a180:	46bd      	mov	sp, r7
 800a182:	b004      	add	sp, #16
 800a184:	bdb0      	pop	{r4, r5, r7, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	40022000 	.word	0x40022000
 800a18c:	00001388 	.word	0x00001388
 800a190:	40021000 	.word	0x40021000
 800a194:	fffff8ff 	.word	0xfffff8ff
 800a198:	ffffc7ff 	.word	0xffffc7ff
 800a19c:	0800b458 	.word	0x0800b458
 800a1a0:	20000000 	.word	0x20000000
 800a1a4:	20000004 	.word	0x20000004

0800a1a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1a8:	b5b0      	push	{r4, r5, r7, lr}
 800a1aa:	b08e      	sub	sp, #56	; 0x38
 800a1ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800a1ae:	4b4c      	ldr	r3, [pc, #304]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a1b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	2b0c      	cmp	r3, #12
 800a1bc:	d014      	beq.n	800a1e8 <HAL_RCC_GetSysClockFreq+0x40>
 800a1be:	d900      	bls.n	800a1c2 <HAL_RCC_GetSysClockFreq+0x1a>
 800a1c0:	e07b      	b.n	800a2ba <HAL_RCC_GetSysClockFreq+0x112>
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d002      	beq.n	800a1cc <HAL_RCC_GetSysClockFreq+0x24>
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	d00b      	beq.n	800a1e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a1ca:	e076      	b.n	800a2ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a1cc:	4b44      	ldr	r3, [pc, #272]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2210      	movs	r2, #16
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	d002      	beq.n	800a1dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800a1d6:	4b43      	ldr	r3, [pc, #268]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a1d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800a1da:	e07c      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800a1dc:	4b42      	ldr	r3, [pc, #264]	; (800a2e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800a1de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a1e0:	e079      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a1e2:	4b42      	ldr	r3, [pc, #264]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x144>)
 800a1e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a1e6:	e076      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ea:	0c9a      	lsrs	r2, r3, #18
 800a1ec:	230f      	movs	r3, #15
 800a1ee:	401a      	ands	r2, r3
 800a1f0:	4b3f      	ldr	r3, [pc, #252]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0x148>)
 800a1f2:	5c9b      	ldrb	r3, [r3, r2]
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	0d9a      	lsrs	r2, r3, #22
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	3301      	adds	r3, #1
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a202:	4b37      	ldr	r3, [pc, #220]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	2380      	movs	r3, #128	; 0x80
 800a208:	025b      	lsls	r3, r3, #9
 800a20a:	4013      	ands	r3, r2
 800a20c:	d01a      	beq.n	800a244 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	2300      	movs	r3, #0
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	4a35      	ldr	r2, [pc, #212]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x144>)
 800a218:	2300      	movs	r3, #0
 800a21a:	69b8      	ldr	r0, [r7, #24]
 800a21c:	69f9      	ldr	r1, [r7, #28]
 800a21e:	f7fe f81f 	bl	8008260 <__aeabi_lmul>
 800a222:	0002      	movs	r2, r0
 800a224:	000b      	movs	r3, r1
 800a226:	0010      	movs	r0, r2
 800a228:	0019      	movs	r1, r3
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	613b      	str	r3, [r7, #16]
 800a22e:	2300      	movs	r3, #0
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f7fd fff3 	bl	8008220 <__aeabi_uldivmod>
 800a23a:	0002      	movs	r2, r0
 800a23c:	000b      	movs	r3, r1
 800a23e:	0013      	movs	r3, r2
 800a240:	637b      	str	r3, [r7, #52]	; 0x34
 800a242:	e037      	b.n	800a2b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a244:	4b26      	ldr	r3, [pc, #152]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2210      	movs	r2, #16
 800a24a:	4013      	ands	r3, r2
 800a24c:	d01a      	beq.n	800a284 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	60bb      	str	r3, [r7, #8]
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	4a23      	ldr	r2, [pc, #140]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a258:	2300      	movs	r3, #0
 800a25a:	68b8      	ldr	r0, [r7, #8]
 800a25c:	68f9      	ldr	r1, [r7, #12]
 800a25e:	f7fd ffff 	bl	8008260 <__aeabi_lmul>
 800a262:	0002      	movs	r2, r0
 800a264:	000b      	movs	r3, r1
 800a266:	0010      	movs	r0, r2
 800a268:	0019      	movs	r1, r3
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	603b      	str	r3, [r7, #0]
 800a26e:	2300      	movs	r3, #0
 800a270:	607b      	str	r3, [r7, #4]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f7fd ffd3 	bl	8008220 <__aeabi_uldivmod>
 800a27a:	0002      	movs	r2, r0
 800a27c:	000b      	movs	r3, r1
 800a27e:	0013      	movs	r3, r2
 800a280:	637b      	str	r3, [r7, #52]	; 0x34
 800a282:	e017      	b.n	800a2b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	0018      	movs	r0, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	0019      	movs	r1, r3
 800a28c:	4a16      	ldr	r2, [pc, #88]	; (800a2e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800a28e:	2300      	movs	r3, #0
 800a290:	f7fd ffe6 	bl	8008260 <__aeabi_lmul>
 800a294:	0002      	movs	r2, r0
 800a296:	000b      	movs	r3, r1
 800a298:	0010      	movs	r0, r2
 800a29a:	0019      	movs	r1, r3
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	001c      	movs	r4, r3
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	001d      	movs	r5, r3
 800a2a4:	0022      	movs	r2, r4
 800a2a6:	002b      	movs	r3, r5
 800a2a8:	f7fd ffba 	bl	8008220 <__aeabi_uldivmod>
 800a2ac:	0002      	movs	r2, r0
 800a2ae:	000b      	movs	r3, r1
 800a2b0:	0013      	movs	r3, r2
 800a2b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a2b8:	e00d      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a2ba:	4b09      	ldr	r3, [pc, #36]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	0b5b      	lsrs	r3, r3, #13
 800a2c0:	2207      	movs	r2, #7
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	2280      	movs	r2, #128	; 0x80
 800a2cc:	0212      	lsls	r2, r2, #8
 800a2ce:	409a      	lsls	r2, r3
 800a2d0:	0013      	movs	r3, r2
 800a2d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a2d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800a2d8:	0018      	movs	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b00e      	add	sp, #56	; 0x38
 800a2de:	bdb0      	pop	{r4, r5, r7, pc}
 800a2e0:	40021000 	.word	0x40021000
 800a2e4:	003d0900 	.word	0x003d0900
 800a2e8:	00f42400 	.word	0x00f42400
 800a2ec:	007a1200 	.word	0x007a1200
 800a2f0:	0800b470 	.word	0x0800b470

0800a2f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <HAL_RCC_GetHCLKFreq+0x10>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
}
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	20000000 	.word	0x20000000

0800a308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a30c:	f7ff fff2 	bl	800a2f4 <HAL_RCC_GetHCLKFreq>
 800a310:	0001      	movs	r1, r0
 800a312:	4b06      	ldr	r3, [pc, #24]	; (800a32c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	2207      	movs	r2, #7
 800a31a:	4013      	ands	r3, r2
 800a31c:	4a04      	ldr	r2, [pc, #16]	; (800a330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a31e:	5cd3      	ldrb	r3, [r2, r3]
 800a320:	40d9      	lsrs	r1, r3
 800a322:	000b      	movs	r3, r1
}
 800a324:	0018      	movs	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	46c0      	nop			; (mov r8, r8)
 800a32c:	40021000 	.word	0x40021000
 800a330:	0800b468 	.word	0x0800b468

0800a334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a338:	f7ff ffdc 	bl	800a2f4 <HAL_RCC_GetHCLKFreq>
 800a33c:	0001      	movs	r1, r0
 800a33e:	4b06      	ldr	r3, [pc, #24]	; (800a358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	0adb      	lsrs	r3, r3, #11
 800a344:	2207      	movs	r2, #7
 800a346:	4013      	ands	r3, r2
 800a348:	4a04      	ldr	r2, [pc, #16]	; (800a35c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a34a:	5cd3      	ldrb	r3, [r2, r3]
 800a34c:	40d9      	lsrs	r1, r3
 800a34e:	000b      	movs	r3, r1
}
 800a350:	0018      	movs	r0, r3
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	46c0      	nop			; (mov r8, r8)
 800a358:	40021000 	.word	0x40021000
 800a35c:	0800b468 	.word	0x0800b468

0800a360 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800a368:	2317      	movs	r3, #23
 800a36a:	18fb      	adds	r3, r7, r3
 800a36c:	2200      	movs	r2, #0
 800a36e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2220      	movs	r2, #32
 800a376:	4013      	ands	r3, r2
 800a378:	d106      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	2380      	movs	r3, #128	; 0x80
 800a380:	011b      	lsls	r3, r3, #4
 800a382:	4013      	ands	r3, r2
 800a384:	d100      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800a386:	e0d9      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a388:	4ba4      	ldr	r3, [pc, #656]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	055b      	lsls	r3, r3, #21
 800a390:	4013      	ands	r3, r2
 800a392:	d10a      	bne.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a394:	4ba1      	ldr	r3, [pc, #644]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a398:	4ba0      	ldr	r3, [pc, #640]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a39a:	2180      	movs	r1, #128	; 0x80
 800a39c:	0549      	lsls	r1, r1, #21
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800a3a2:	2317      	movs	r3, #23
 800a3a4:	18fb      	adds	r3, r7, r3
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3aa:	4b9d      	ldr	r3, [pc, #628]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	2380      	movs	r3, #128	; 0x80
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	d11a      	bne.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3b6:	4b9a      	ldr	r3, [pc, #616]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4b99      	ldr	r3, [pc, #612]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a3bc:	2180      	movs	r1, #128	; 0x80
 800a3be:	0049      	lsls	r1, r1, #1
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3c4:	f7fe ff5e 	bl	8009284 <HAL_GetTick>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3cc:	e008      	b.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3ce:	f7fe ff59 	bl	8009284 <HAL_GetTick>
 800a3d2:	0002      	movs	r2, r0
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	2b64      	cmp	r3, #100	; 0x64
 800a3da:	d901      	bls.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e118      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3e0:	4b8f      	ldr	r3, [pc, #572]	; (800a620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	2380      	movs	r3, #128	; 0x80
 800a3e6:	005b      	lsls	r3, r3, #1
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	d0f0      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a3ec:	4b8b      	ldr	r3, [pc, #556]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	23c0      	movs	r3, #192	; 0xc0
 800a3f2:	039b      	lsls	r3, r3, #14
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	23c0      	movs	r3, #192	; 0xc0
 800a3fe:	039b      	lsls	r3, r3, #14
 800a400:	4013      	ands	r3, r2
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	429a      	cmp	r2, r3
 800a406:	d107      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689a      	ldr	r2, [r3, #8]
 800a40c:	23c0      	movs	r3, #192	; 0xc0
 800a40e:	039b      	lsls	r3, r3, #14
 800a410:	4013      	ands	r3, r2
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	429a      	cmp	r2, r3
 800a416:	d013      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	23c0      	movs	r3, #192	; 0xc0
 800a41e:	029b      	lsls	r3, r3, #10
 800a420:	401a      	ands	r2, r3
 800a422:	23c0      	movs	r3, #192	; 0xc0
 800a424:	029b      	lsls	r3, r3, #10
 800a426:	429a      	cmp	r2, r3
 800a428:	d10a      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a42a:	4b7c      	ldr	r3, [pc, #496]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	2380      	movs	r3, #128	; 0x80
 800a430:	029b      	lsls	r3, r3, #10
 800a432:	401a      	ands	r2, r3
 800a434:	2380      	movs	r3, #128	; 0x80
 800a436:	029b      	lsls	r3, r3, #10
 800a438:	429a      	cmp	r2, r3
 800a43a:	d101      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e0e8      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a440:	4b76      	ldr	r3, [pc, #472]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a444:	23c0      	movs	r3, #192	; 0xc0
 800a446:	029b      	lsls	r3, r3, #10
 800a448:	4013      	ands	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d049      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	23c0      	movs	r3, #192	; 0xc0
 800a458:	029b      	lsls	r3, r3, #10
 800a45a:	4013      	ands	r3, r2
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d004      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2220      	movs	r2, #32
 800a468:	4013      	ands	r3, r2
 800a46a:	d10d      	bne.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	23c0      	movs	r3, #192	; 0xc0
 800a472:	029b      	lsls	r3, r3, #10
 800a474:	4013      	ands	r3, r2
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d034      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	2380      	movs	r3, #128	; 0x80
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	4013      	ands	r3, r2
 800a486:	d02e      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a488:	4b64      	ldr	r3, [pc, #400]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a48c:	4a65      	ldr	r2, [pc, #404]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a48e:	4013      	ands	r3, r2
 800a490:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a492:	4b62      	ldr	r3, [pc, #392]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a496:	4b61      	ldr	r3, [pc, #388]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a498:	2180      	movs	r1, #128	; 0x80
 800a49a:	0309      	lsls	r1, r1, #12
 800a49c:	430a      	orrs	r2, r1
 800a49e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4a0:	4b5e      	ldr	r3, [pc, #376]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a4a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4a4:	4b5d      	ldr	r3, [pc, #372]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a4a6:	4960      	ldr	r1, [pc, #384]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a4a8:	400a      	ands	r2, r1
 800a4aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a4ac:	4b5b      	ldr	r3, [pc, #364]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	2380      	movs	r3, #128	; 0x80
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	d014      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4bc:	f7fe fee2 	bl	8009284 <HAL_GetTick>
 800a4c0:	0003      	movs	r3, r0
 800a4c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4c4:	e009      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4c6:	f7fe fedd 	bl	8009284 <HAL_GetTick>
 800a4ca:	0002      	movs	r2, r0
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	4a56      	ldr	r2, [pc, #344]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d901      	bls.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e09b      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4da:	4b50      	ldr	r3, [pc, #320]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a4dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4de:	2380      	movs	r3, #128	; 0x80
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d0ef      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	23c0      	movs	r3, #192	; 0xc0
 800a4ec:	029b      	lsls	r3, r3, #10
 800a4ee:	401a      	ands	r2, r3
 800a4f0:	23c0      	movs	r3, #192	; 0xc0
 800a4f2:	029b      	lsls	r3, r3, #10
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d10c      	bne.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a4f8:	4b48      	ldr	r3, [pc, #288]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a4c      	ldr	r2, [pc, #304]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	0019      	movs	r1, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	23c0      	movs	r3, #192	; 0xc0
 800a508:	039b      	lsls	r3, r3, #14
 800a50a:	401a      	ands	r2, r3
 800a50c:	4b43      	ldr	r3, [pc, #268]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a50e:	430a      	orrs	r2, r1
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	4b42      	ldr	r3, [pc, #264]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a514:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	23c0      	movs	r3, #192	; 0xc0
 800a51c:	029b      	lsls	r3, r3, #10
 800a51e:	401a      	ands	r2, r3
 800a520:	4b3e      	ldr	r3, [pc, #248]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a522:	430a      	orrs	r2, r1
 800a524:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a526:	2317      	movs	r3, #23
 800a528:	18fb      	adds	r3, r7, r3
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d105      	bne.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a530:	4b3a      	ldr	r3, [pc, #232]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a534:	4b39      	ldr	r3, [pc, #228]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a536:	493f      	ldr	r1, [pc, #252]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a538:	400a      	ands	r2, r1
 800a53a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2201      	movs	r2, #1
 800a542:	4013      	ands	r3, r2
 800a544:	d009      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a546:	4b35      	ldr	r3, [pc, #212]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a54a:	2203      	movs	r2, #3
 800a54c:	4393      	bics	r3, r2
 800a54e:	0019      	movs	r1, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68da      	ldr	r2, [r3, #12]
 800a554:	4b31      	ldr	r3, [pc, #196]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a556:	430a      	orrs	r2, r1
 800a558:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2202      	movs	r2, #2
 800a560:	4013      	ands	r3, r2
 800a562:	d009      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a564:	4b2d      	ldr	r3, [pc, #180]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a568:	220c      	movs	r2, #12
 800a56a:	4393      	bics	r3, r2
 800a56c:	0019      	movs	r1, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691a      	ldr	r2, [r3, #16]
 800a572:	4b2a      	ldr	r3, [pc, #168]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a574:	430a      	orrs	r2, r1
 800a576:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2204      	movs	r2, #4
 800a57e:	4013      	ands	r3, r2
 800a580:	d009      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a582:	4b26      	ldr	r3, [pc, #152]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a586:	4a2c      	ldr	r2, [pc, #176]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a588:	4013      	ands	r3, r2
 800a58a:	0019      	movs	r1, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	695a      	ldr	r2, [r3, #20]
 800a590:	4b22      	ldr	r3, [pc, #136]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a592:	430a      	orrs	r2, r1
 800a594:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2208      	movs	r2, #8
 800a59c:	4013      	ands	r3, r2
 800a59e:	d009      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5a0:	4b1e      	ldr	r3, [pc, #120]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5a4:	4a25      	ldr	r2, [pc, #148]	; (800a63c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	0019      	movs	r1, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699a      	ldr	r2, [r3, #24]
 800a5ae:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	2380      	movs	r3, #128	; 0x80
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	4013      	ands	r3, r2
 800a5be:	d009      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a5c0:	4b16      	ldr	r3, [pc, #88]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a5c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5c4:	4a17      	ldr	r2, [pc, #92]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	0019      	movs	r1, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	69da      	ldr	r2, [r3, #28]
 800a5ce:	4b13      	ldr	r3, [pc, #76]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2240      	movs	r2, #64	; 0x40
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d009      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a5de:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e2:	4a17      	ldr	r2, [pc, #92]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ec:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2280      	movs	r2, #128	; 0x80
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	d009      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800a5fc:	4b07      	ldr	r3, [pc, #28]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a600:	4a10      	ldr	r2, [pc, #64]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a602:	4013      	ands	r3, r2
 800a604:	0019      	movs	r1, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a1a      	ldr	r2, [r3, #32]
 800a60a:	4b04      	ldr	r3, [pc, #16]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a60c:	430a      	orrs	r2, r1
 800a60e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	0018      	movs	r0, r3
 800a614:	46bd      	mov	sp, r7
 800a616:	b006      	add	sp, #24
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	40021000 	.word	0x40021000
 800a620:	40007000 	.word	0x40007000
 800a624:	fffcffff 	.word	0xfffcffff
 800a628:	fff7ffff 	.word	0xfff7ffff
 800a62c:	00001388 	.word	0x00001388
 800a630:	ffcfffff 	.word	0xffcfffff
 800a634:	efffffff 	.word	0xefffffff
 800a638:	fffff3ff 	.word	0xfffff3ff
 800a63c:	ffffcfff 	.word	0xffffcfff
 800a640:	fbffffff 	.word	0xfbffffff
 800a644:	fff3ffff 	.word	0xfff3ffff

0800a648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e044      	b.n	800a6e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d107      	bne.n	800a672 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2274      	movs	r2, #116	; 0x74
 800a666:	2100      	movs	r1, #0
 800a668:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	0018      	movs	r0, r3
 800a66e:	f7fe fd11 	bl	8009094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2224      	movs	r2, #36	; 0x24
 800a676:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2101      	movs	r1, #1
 800a684:	438a      	bics	r2, r1
 800a686:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	0018      	movs	r0, r3
 800a68c:	f000 f8d8 	bl	800a840 <UART_SetConfig>
 800a690:	0003      	movs	r3, r0
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e024      	b.n	800a6e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f000 fb6b 	bl	800ad80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	490d      	ldr	r1, [pc, #52]	; (800a6ec <HAL_UART_Init+0xa4>)
 800a6b6:	400a      	ands	r2, r1
 800a6b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	212a      	movs	r1, #42	; 0x2a
 800a6c6:	438a      	bics	r2, r1
 800a6c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	0018      	movs	r0, r3
 800a6de:	f000 fc03 	bl	800aee8 <UART_CheckIdleState>
 800a6e2:	0003      	movs	r3, r0
}
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	b002      	add	sp, #8
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	ffffb7ff 	.word	0xffffb7ff

0800a6f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	1dbb      	adds	r3, r7, #6
 800a6fe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a704:	2b20      	cmp	r3, #32
 800a706:	d000      	beq.n	800a70a <HAL_UART_Transmit+0x1a>
 800a708:	e095      	b.n	800a836 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_UART_Transmit+0x28>
 800a710:	1dbb      	adds	r3, r7, #6
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e08d      	b.n	800a838 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	2380      	movs	r3, #128	; 0x80
 800a722:	015b      	lsls	r3, r3, #5
 800a724:	429a      	cmp	r2, r3
 800a726:	d109      	bne.n	800a73c <HAL_UART_Transmit+0x4c>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d105      	bne.n	800a73c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2201      	movs	r2, #1
 800a734:	4013      	ands	r3, r2
 800a736:	d001      	beq.n	800a73c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e07d      	b.n	800a838 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2274      	movs	r2, #116	; 0x74
 800a740:	5c9b      	ldrb	r3, [r3, r2]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d101      	bne.n	800a74a <HAL_UART_Transmit+0x5a>
 800a746:	2302      	movs	r3, #2
 800a748:	e076      	b.n	800a838 <HAL_UART_Transmit+0x148>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2274      	movs	r2, #116	; 0x74
 800a74e:	2101      	movs	r1, #1
 800a750:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2280      	movs	r2, #128	; 0x80
 800a756:	2100      	movs	r1, #0
 800a758:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2221      	movs	r2, #33	; 0x21
 800a75e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a760:	f7fe fd90 	bl	8009284 <HAL_GetTick>
 800a764:	0003      	movs	r3, r0
 800a766:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	1dba      	adds	r2, r7, #6
 800a76c:	2150      	movs	r1, #80	; 0x50
 800a76e:	8812      	ldrh	r2, [r2, #0]
 800a770:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1dba      	adds	r2, r7, #6
 800a776:	2152      	movs	r1, #82	; 0x52
 800a778:	8812      	ldrh	r2, [r2, #0]
 800a77a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	2380      	movs	r3, #128	; 0x80
 800a782:	015b      	lsls	r3, r3, #5
 800a784:	429a      	cmp	r2, r3
 800a786:	d108      	bne.n	800a79a <HAL_UART_Transmit+0xaa>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800a790:	2300      	movs	r3, #0
 800a792:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	61bb      	str	r3, [r7, #24]
 800a798:	e003      	b.n	800a7a2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2274      	movs	r2, #116	; 0x74
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800a7aa:	e02c      	b.n	800a806 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	0013      	movs	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2180      	movs	r1, #128	; 0x80
 800a7ba:	f000 fbdd 	bl	800af78 <UART_WaitOnFlagUntilTimeout>
 800a7be:	1e03      	subs	r3, r0, #0
 800a7c0:	d001      	beq.n	800a7c6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e038      	b.n	800a838 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10b      	bne.n	800a7e4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	001a      	movs	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	05d2      	lsls	r2, r2, #23
 800a7d8:	0dd2      	lsrs	r2, r2, #23
 800a7da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	3302      	adds	r3, #2
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	e007      	b.n	800a7f4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	781a      	ldrb	r2, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2252      	movs	r2, #82	; 0x52
 800a7f8:	5a9b      	ldrh	r3, [r3, r2]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	b299      	uxth	r1, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2252      	movs	r2, #82	; 0x52
 800a804:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2252      	movs	r2, #82	; 0x52
 800a80a:	5a9b      	ldrh	r3, [r3, r2]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1cc      	bne.n	800a7ac <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	0013      	movs	r3, r2
 800a81c:	2200      	movs	r2, #0
 800a81e:	2140      	movs	r1, #64	; 0x40
 800a820:	f000 fbaa 	bl	800af78 <UART_WaitOnFlagUntilTimeout>
 800a824:	1e03      	subs	r3, r0, #0
 800a826:	d001      	beq.n	800a82c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e005      	b.n	800a838 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2220      	movs	r2, #32
 800a830:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	e000      	b.n	800a838 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800a836:	2302      	movs	r3, #2
  }
}
 800a838:	0018      	movs	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b008      	add	sp, #32
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a840:	b5b0      	push	{r4, r5, r7, lr}
 800a842:	b08e      	sub	sp, #56	; 0x38
 800a844:	af00      	add	r7, sp, #0
 800a846:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a848:	231a      	movs	r3, #26
 800a84a:	2218      	movs	r2, #24
 800a84c:	189b      	adds	r3, r3, r2
 800a84e:	19db      	adds	r3, r3, r7
 800a850:	2200      	movs	r2, #0
 800a852:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	431a      	orrs	r2, r3
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	431a      	orrs	r2, r3
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	4313      	orrs	r3, r2
 800a86a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4ac3      	ldr	r2, [pc, #780]	; (800ab80 <UART_SetConfig+0x340>)
 800a874:	4013      	ands	r3, r2
 800a876:	0019      	movs	r1, r3
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a87e:	430a      	orrs	r2, r1
 800a880:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	4abe      	ldr	r2, [pc, #760]	; (800ab84 <UART_SetConfig+0x344>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	0019      	movs	r1, r3
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4ab8      	ldr	r2, [pc, #736]	; (800ab88 <UART_SetConfig+0x348>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d004      	beq.n	800a8b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	4ab4      	ldr	r2, [pc, #720]	; (800ab8c <UART_SetConfig+0x34c>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	0019      	movs	r1, r3
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4ab0      	ldr	r2, [pc, #704]	; (800ab90 <UART_SetConfig+0x350>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d131      	bne.n	800a938 <UART_SetConfig+0xf8>
 800a8d4:	4baf      	ldr	r3, [pc, #700]	; (800ab94 <UART_SetConfig+0x354>)
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d8:	2203      	movs	r2, #3
 800a8da:	4013      	ands	r3, r2
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d01d      	beq.n	800a91c <UART_SetConfig+0xdc>
 800a8e0:	d823      	bhi.n	800a92a <UART_SetConfig+0xea>
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d00c      	beq.n	800a900 <UART_SetConfig+0xc0>
 800a8e6:	d820      	bhi.n	800a92a <UART_SetConfig+0xea>
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <UART_SetConfig+0xb2>
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d00e      	beq.n	800a90e <UART_SetConfig+0xce>
 800a8f0:	e01b      	b.n	800a92a <UART_SetConfig+0xea>
 800a8f2:	231b      	movs	r3, #27
 800a8f4:	2218      	movs	r2, #24
 800a8f6:	189b      	adds	r3, r3, r2
 800a8f8:	19db      	adds	r3, r3, r7
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	701a      	strb	r2, [r3, #0]
 800a8fe:	e0b4      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a900:	231b      	movs	r3, #27
 800a902:	2218      	movs	r2, #24
 800a904:	189b      	adds	r3, r3, r2
 800a906:	19db      	adds	r3, r3, r7
 800a908:	2202      	movs	r2, #2
 800a90a:	701a      	strb	r2, [r3, #0]
 800a90c:	e0ad      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a90e:	231b      	movs	r3, #27
 800a910:	2218      	movs	r2, #24
 800a912:	189b      	adds	r3, r3, r2
 800a914:	19db      	adds	r3, r3, r7
 800a916:	2204      	movs	r2, #4
 800a918:	701a      	strb	r2, [r3, #0]
 800a91a:	e0a6      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a91c:	231b      	movs	r3, #27
 800a91e:	2218      	movs	r2, #24
 800a920:	189b      	adds	r3, r3, r2
 800a922:	19db      	adds	r3, r3, r7
 800a924:	2208      	movs	r2, #8
 800a926:	701a      	strb	r2, [r3, #0]
 800a928:	e09f      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a92a:	231b      	movs	r3, #27
 800a92c:	2218      	movs	r2, #24
 800a92e:	189b      	adds	r3, r3, r2
 800a930:	19db      	adds	r3, r3, r7
 800a932:	2210      	movs	r2, #16
 800a934:	701a      	strb	r2, [r3, #0]
 800a936:	e098      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a96      	ldr	r2, [pc, #600]	; (800ab98 <UART_SetConfig+0x358>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d131      	bne.n	800a9a6 <UART_SetConfig+0x166>
 800a942:	4b94      	ldr	r3, [pc, #592]	; (800ab94 <UART_SetConfig+0x354>)
 800a944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a946:	220c      	movs	r2, #12
 800a948:	4013      	ands	r3, r2
 800a94a:	2b0c      	cmp	r3, #12
 800a94c:	d01d      	beq.n	800a98a <UART_SetConfig+0x14a>
 800a94e:	d823      	bhi.n	800a998 <UART_SetConfig+0x158>
 800a950:	2b08      	cmp	r3, #8
 800a952:	d00c      	beq.n	800a96e <UART_SetConfig+0x12e>
 800a954:	d820      	bhi.n	800a998 <UART_SetConfig+0x158>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <UART_SetConfig+0x120>
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d00e      	beq.n	800a97c <UART_SetConfig+0x13c>
 800a95e:	e01b      	b.n	800a998 <UART_SetConfig+0x158>
 800a960:	231b      	movs	r3, #27
 800a962:	2218      	movs	r2, #24
 800a964:	189b      	adds	r3, r3, r2
 800a966:	19db      	adds	r3, r3, r7
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e07d      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a96e:	231b      	movs	r3, #27
 800a970:	2218      	movs	r2, #24
 800a972:	189b      	adds	r3, r3, r2
 800a974:	19db      	adds	r3, r3, r7
 800a976:	2202      	movs	r2, #2
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e076      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a97c:	231b      	movs	r3, #27
 800a97e:	2218      	movs	r2, #24
 800a980:	189b      	adds	r3, r3, r2
 800a982:	19db      	adds	r3, r3, r7
 800a984:	2204      	movs	r2, #4
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e06f      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a98a:	231b      	movs	r3, #27
 800a98c:	2218      	movs	r2, #24
 800a98e:	189b      	adds	r3, r3, r2
 800a990:	19db      	adds	r3, r3, r7
 800a992:	2208      	movs	r2, #8
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	e068      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a998:	231b      	movs	r3, #27
 800a99a:	2218      	movs	r2, #24
 800a99c:	189b      	adds	r3, r3, r2
 800a99e:	19db      	adds	r3, r3, r7
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	e061      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a7c      	ldr	r2, [pc, #496]	; (800ab9c <UART_SetConfig+0x35c>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d106      	bne.n	800a9be <UART_SetConfig+0x17e>
 800a9b0:	231b      	movs	r3, #27
 800a9b2:	2218      	movs	r2, #24
 800a9b4:	189b      	adds	r3, r3, r2
 800a9b6:	19db      	adds	r3, r3, r7
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
 800a9bc:	e055      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a77      	ldr	r2, [pc, #476]	; (800aba0 <UART_SetConfig+0x360>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d106      	bne.n	800a9d6 <UART_SetConfig+0x196>
 800a9c8:	231b      	movs	r3, #27
 800a9ca:	2218      	movs	r2, #24
 800a9cc:	189b      	adds	r3, r3, r2
 800a9ce:	19db      	adds	r3, r3, r7
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	e049      	b.n	800aa6a <UART_SetConfig+0x22a>
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a6b      	ldr	r2, [pc, #428]	; (800ab88 <UART_SetConfig+0x348>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d13e      	bne.n	800aa5e <UART_SetConfig+0x21e>
 800a9e0:	4b6c      	ldr	r3, [pc, #432]	; (800ab94 <UART_SetConfig+0x354>)
 800a9e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9e4:	23c0      	movs	r3, #192	; 0xc0
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	22c0      	movs	r2, #192	; 0xc0
 800a9ec:	0112      	lsls	r2, r2, #4
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d027      	beq.n	800aa42 <UART_SetConfig+0x202>
 800a9f2:	22c0      	movs	r2, #192	; 0xc0
 800a9f4:	0112      	lsls	r2, r2, #4
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d82a      	bhi.n	800aa50 <UART_SetConfig+0x210>
 800a9fa:	2280      	movs	r2, #128	; 0x80
 800a9fc:	0112      	lsls	r2, r2, #4
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d011      	beq.n	800aa26 <UART_SetConfig+0x1e6>
 800aa02:	2280      	movs	r2, #128	; 0x80
 800aa04:	0112      	lsls	r2, r2, #4
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d822      	bhi.n	800aa50 <UART_SetConfig+0x210>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d004      	beq.n	800aa18 <UART_SetConfig+0x1d8>
 800aa0e:	2280      	movs	r2, #128	; 0x80
 800aa10:	00d2      	lsls	r2, r2, #3
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d00e      	beq.n	800aa34 <UART_SetConfig+0x1f4>
 800aa16:	e01b      	b.n	800aa50 <UART_SetConfig+0x210>
 800aa18:	231b      	movs	r3, #27
 800aa1a:	2218      	movs	r2, #24
 800aa1c:	189b      	adds	r3, r3, r2
 800aa1e:	19db      	adds	r3, r3, r7
 800aa20:	2200      	movs	r2, #0
 800aa22:	701a      	strb	r2, [r3, #0]
 800aa24:	e021      	b.n	800aa6a <UART_SetConfig+0x22a>
 800aa26:	231b      	movs	r3, #27
 800aa28:	2218      	movs	r2, #24
 800aa2a:	189b      	adds	r3, r3, r2
 800aa2c:	19db      	adds	r3, r3, r7
 800aa2e:	2202      	movs	r2, #2
 800aa30:	701a      	strb	r2, [r3, #0]
 800aa32:	e01a      	b.n	800aa6a <UART_SetConfig+0x22a>
 800aa34:	231b      	movs	r3, #27
 800aa36:	2218      	movs	r2, #24
 800aa38:	189b      	adds	r3, r3, r2
 800aa3a:	19db      	adds	r3, r3, r7
 800aa3c:	2204      	movs	r2, #4
 800aa3e:	701a      	strb	r2, [r3, #0]
 800aa40:	e013      	b.n	800aa6a <UART_SetConfig+0x22a>
 800aa42:	231b      	movs	r3, #27
 800aa44:	2218      	movs	r2, #24
 800aa46:	189b      	adds	r3, r3, r2
 800aa48:	19db      	adds	r3, r3, r7
 800aa4a:	2208      	movs	r2, #8
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	e00c      	b.n	800aa6a <UART_SetConfig+0x22a>
 800aa50:	231b      	movs	r3, #27
 800aa52:	2218      	movs	r2, #24
 800aa54:	189b      	adds	r3, r3, r2
 800aa56:	19db      	adds	r3, r3, r7
 800aa58:	2210      	movs	r2, #16
 800aa5a:	701a      	strb	r2, [r3, #0]
 800aa5c:	e005      	b.n	800aa6a <UART_SetConfig+0x22a>
 800aa5e:	231b      	movs	r3, #27
 800aa60:	2218      	movs	r2, #24
 800aa62:	189b      	adds	r3, r3, r2
 800aa64:	19db      	adds	r3, r3, r7
 800aa66:	2210      	movs	r2, #16
 800aa68:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a46      	ldr	r2, [pc, #280]	; (800ab88 <UART_SetConfig+0x348>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d000      	beq.n	800aa76 <UART_SetConfig+0x236>
 800aa74:	e09a      	b.n	800abac <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa76:	231b      	movs	r3, #27
 800aa78:	2218      	movs	r2, #24
 800aa7a:	189b      	adds	r3, r3, r2
 800aa7c:	19db      	adds	r3, r3, r7
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	d01d      	beq.n	800aac0 <UART_SetConfig+0x280>
 800aa84:	dc20      	bgt.n	800aac8 <UART_SetConfig+0x288>
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d015      	beq.n	800aab6 <UART_SetConfig+0x276>
 800aa8a:	dc1d      	bgt.n	800aac8 <UART_SetConfig+0x288>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <UART_SetConfig+0x256>
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d005      	beq.n	800aaa0 <UART_SetConfig+0x260>
 800aa94:	e018      	b.n	800aac8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa96:	f7ff fc37 	bl	800a308 <HAL_RCC_GetPCLK1Freq>
 800aa9a:	0003      	movs	r3, r0
 800aa9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa9e:	e01c      	b.n	800aada <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa0:	4b3c      	ldr	r3, [pc, #240]	; (800ab94 <UART_SetConfig+0x354>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2210      	movs	r2, #16
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	d002      	beq.n	800aab0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800aaaa:	4b3e      	ldr	r3, [pc, #248]	; (800aba4 <UART_SetConfig+0x364>)
 800aaac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaae:	e014      	b.n	800aada <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800aab0:	4b3d      	ldr	r3, [pc, #244]	; (800aba8 <UART_SetConfig+0x368>)
 800aab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aab4:	e011      	b.n	800aada <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aab6:	f7ff fb77 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800aaba:	0003      	movs	r3, r0
 800aabc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aabe:	e00c      	b.n	800aada <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aac0:	2380      	movs	r3, #128	; 0x80
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aac6:	e008      	b.n	800aada <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800aac8:	2300      	movs	r3, #0
 800aaca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aacc:	231a      	movs	r3, #26
 800aace:	2218      	movs	r2, #24
 800aad0:	189b      	adds	r3, r3, r2
 800aad2:	19db      	adds	r3, r3, r7
 800aad4:	2201      	movs	r2, #1
 800aad6:	701a      	strb	r2, [r3, #0]
        break;
 800aad8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d100      	bne.n	800aae2 <UART_SetConfig+0x2a2>
 800aae0:	e134      	b.n	800ad4c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	0013      	movs	r3, r2
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d305      	bcc.n	800aafe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aaf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d906      	bls.n	800ab0c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800aafe:	231a      	movs	r3, #26
 800ab00:	2218      	movs	r2, #24
 800ab02:	189b      	adds	r3, r3, r2
 800ab04:	19db      	adds	r3, r3, r7
 800ab06:	2201      	movs	r2, #1
 800ab08:	701a      	strb	r2, [r3, #0]
 800ab0a:	e11f      	b.n	800ad4c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	2300      	movs	r3, #0
 800ab12:	617b      	str	r3, [r7, #20]
 800ab14:	6939      	ldr	r1, [r7, #16]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	000b      	movs	r3, r1
 800ab1a:	0e1b      	lsrs	r3, r3, #24
 800ab1c:	0010      	movs	r0, r2
 800ab1e:	0205      	lsls	r5, r0, #8
 800ab20:	431d      	orrs	r5, r3
 800ab22:	000b      	movs	r3, r1
 800ab24:	021c      	lsls	r4, r3, #8
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	085b      	lsrs	r3, r3, #1
 800ab2c:	60bb      	str	r3, [r7, #8]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	68b8      	ldr	r0, [r7, #8]
 800ab34:	68f9      	ldr	r1, [r7, #12]
 800ab36:	1900      	adds	r0, r0, r4
 800ab38:	4169      	adcs	r1, r5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	2300      	movs	r3, #0
 800ab42:	607b      	str	r3, [r7, #4]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f7fd fb6a 	bl	8008220 <__aeabi_uldivmod>
 800ab4c:	0002      	movs	r2, r0
 800ab4e:	000b      	movs	r3, r1
 800ab50:	0013      	movs	r3, r2
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab56:	23c0      	movs	r3, #192	; 0xc0
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d309      	bcc.n	800ab72 <UART_SetConfig+0x332>
 800ab5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab60:	2380      	movs	r3, #128	; 0x80
 800ab62:	035b      	lsls	r3, r3, #13
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d204      	bcs.n	800ab72 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6e:	60da      	str	r2, [r3, #12]
 800ab70:	e0ec      	b.n	800ad4c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800ab72:	231a      	movs	r3, #26
 800ab74:	2218      	movs	r2, #24
 800ab76:	189b      	adds	r3, r3, r2
 800ab78:	19db      	adds	r3, r3, r7
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	e0e5      	b.n	800ad4c <UART_SetConfig+0x50c>
 800ab80:	efff69f3 	.word	0xefff69f3
 800ab84:	ffffcfff 	.word	0xffffcfff
 800ab88:	40004800 	.word	0x40004800
 800ab8c:	fffff4ff 	.word	0xfffff4ff
 800ab90:	40013800 	.word	0x40013800
 800ab94:	40021000 	.word	0x40021000
 800ab98:	40004400 	.word	0x40004400
 800ab9c:	40004c00 	.word	0x40004c00
 800aba0:	40005000 	.word	0x40005000
 800aba4:	003d0900 	.word	0x003d0900
 800aba8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	69da      	ldr	r2, [r3, #28]
 800abb0:	2380      	movs	r3, #128	; 0x80
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d000      	beq.n	800abba <UART_SetConfig+0x37a>
 800abb8:	e071      	b.n	800ac9e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800abba:	231b      	movs	r3, #27
 800abbc:	2218      	movs	r2, #24
 800abbe:	189b      	adds	r3, r3, r2
 800abc0:	19db      	adds	r3, r3, r7
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	d822      	bhi.n	800ac0e <UART_SetConfig+0x3ce>
 800abc8:	009a      	lsls	r2, r3, #2
 800abca:	4b68      	ldr	r3, [pc, #416]	; (800ad6c <UART_SetConfig+0x52c>)
 800abcc:	18d3      	adds	r3, r2, r3
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abd2:	f7ff fb99 	bl	800a308 <HAL_RCC_GetPCLK1Freq>
 800abd6:	0003      	movs	r3, r0
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abda:	e021      	b.n	800ac20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abdc:	f7ff fbaa 	bl	800a334 <HAL_RCC_GetPCLK2Freq>
 800abe0:	0003      	movs	r3, r0
 800abe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abe4:	e01c      	b.n	800ac20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abe6:	4b62      	ldr	r3, [pc, #392]	; (800ad70 <UART_SetConfig+0x530>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2210      	movs	r2, #16
 800abec:	4013      	ands	r3, r2
 800abee:	d002      	beq.n	800abf6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800abf0:	4b60      	ldr	r3, [pc, #384]	; (800ad74 <UART_SetConfig+0x534>)
 800abf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abf4:	e014      	b.n	800ac20 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800abf6:	4b60      	ldr	r3, [pc, #384]	; (800ad78 <UART_SetConfig+0x538>)
 800abf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abfa:	e011      	b.n	800ac20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abfc:	f7ff fad4 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800ac00:	0003      	movs	r3, r0
 800ac02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac04:	e00c      	b.n	800ac20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac06:	2380      	movs	r3, #128	; 0x80
 800ac08:	021b      	lsls	r3, r3, #8
 800ac0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac0c:	e008      	b.n	800ac20 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac12:	231a      	movs	r3, #26
 800ac14:	2218      	movs	r2, #24
 800ac16:	189b      	adds	r3, r3, r2
 800ac18:	19db      	adds	r3, r3, r7
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	701a      	strb	r2, [r3, #0]
        break;
 800ac1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d100      	bne.n	800ac28 <UART_SetConfig+0x3e8>
 800ac26:	e091      	b.n	800ad4c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	005a      	lsls	r2, r3, #1
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	085b      	lsrs	r3, r3, #1
 800ac32:	18d2      	adds	r2, r2, r3
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	0019      	movs	r1, r3
 800ac3a:	0010      	movs	r0, r2
 800ac3c:	f7fd fa64 	bl	8008108 <__udivsi3>
 800ac40:	0003      	movs	r3, r0
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	2b0f      	cmp	r3, #15
 800ac4a:	d921      	bls.n	800ac90 <UART_SetConfig+0x450>
 800ac4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac4e:	2380      	movs	r3, #128	; 0x80
 800ac50:	025b      	lsls	r3, r3, #9
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d21c      	bcs.n	800ac90 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	200e      	movs	r0, #14
 800ac5c:	2418      	movs	r4, #24
 800ac5e:	1903      	adds	r3, r0, r4
 800ac60:	19db      	adds	r3, r3, r7
 800ac62:	210f      	movs	r1, #15
 800ac64:	438a      	bics	r2, r1
 800ac66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	085b      	lsrs	r3, r3, #1
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	2207      	movs	r2, #7
 800ac70:	4013      	ands	r3, r2
 800ac72:	b299      	uxth	r1, r3
 800ac74:	1903      	adds	r3, r0, r4
 800ac76:	19db      	adds	r3, r3, r7
 800ac78:	1902      	adds	r2, r0, r4
 800ac7a:	19d2      	adds	r2, r2, r7
 800ac7c:	8812      	ldrh	r2, [r2, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	1902      	adds	r2, r0, r4
 800ac88:	19d2      	adds	r2, r2, r7
 800ac8a:	8812      	ldrh	r2, [r2, #0]
 800ac8c:	60da      	str	r2, [r3, #12]
 800ac8e:	e05d      	b.n	800ad4c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800ac90:	231a      	movs	r3, #26
 800ac92:	2218      	movs	r2, #24
 800ac94:	189b      	adds	r3, r3, r2
 800ac96:	19db      	adds	r3, r3, r7
 800ac98:	2201      	movs	r2, #1
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	e056      	b.n	800ad4c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac9e:	231b      	movs	r3, #27
 800aca0:	2218      	movs	r2, #24
 800aca2:	189b      	adds	r3, r3, r2
 800aca4:	19db      	adds	r3, r3, r7
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d822      	bhi.n	800acf2 <UART_SetConfig+0x4b2>
 800acac:	009a      	lsls	r2, r3, #2
 800acae:	4b33      	ldr	r3, [pc, #204]	; (800ad7c <UART_SetConfig+0x53c>)
 800acb0:	18d3      	adds	r3, r2, r3
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acb6:	f7ff fb27 	bl	800a308 <HAL_RCC_GetPCLK1Freq>
 800acba:	0003      	movs	r3, r0
 800acbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acbe:	e021      	b.n	800ad04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acc0:	f7ff fb38 	bl	800a334 <HAL_RCC_GetPCLK2Freq>
 800acc4:	0003      	movs	r3, r0
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc8:	e01c      	b.n	800ad04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acca:	4b29      	ldr	r3, [pc, #164]	; (800ad70 <UART_SetConfig+0x530>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2210      	movs	r2, #16
 800acd0:	4013      	ands	r3, r2
 800acd2:	d002      	beq.n	800acda <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800acd4:	4b27      	ldr	r3, [pc, #156]	; (800ad74 <UART_SetConfig+0x534>)
 800acd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acd8:	e014      	b.n	800ad04 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800acda:	4b27      	ldr	r3, [pc, #156]	; (800ad78 <UART_SetConfig+0x538>)
 800acdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acde:	e011      	b.n	800ad04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ace0:	f7ff fa62 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800ace4:	0003      	movs	r3, r0
 800ace6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ace8:	e00c      	b.n	800ad04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acea:	2380      	movs	r3, #128	; 0x80
 800acec:	021b      	lsls	r3, r3, #8
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acf0:	e008      	b.n	800ad04 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800acf2:	2300      	movs	r3, #0
 800acf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acf6:	231a      	movs	r3, #26
 800acf8:	2218      	movs	r2, #24
 800acfa:	189b      	adds	r3, r3, r2
 800acfc:	19db      	adds	r3, r3, r7
 800acfe:	2201      	movs	r2, #1
 800ad00:	701a      	strb	r2, [r3, #0]
        break;
 800ad02:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d020      	beq.n	800ad4c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	085a      	lsrs	r2, r3, #1
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	18d2      	adds	r2, r2, r3
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	0019      	movs	r1, r3
 800ad1a:	0010      	movs	r0, r2
 800ad1c:	f7fd f9f4 	bl	8008108 <__udivsi3>
 800ad20:	0003      	movs	r3, r0
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	2b0f      	cmp	r3, #15
 800ad2a:	d909      	bls.n	800ad40 <UART_SetConfig+0x500>
 800ad2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad2e:	2380      	movs	r3, #128	; 0x80
 800ad30:	025b      	lsls	r3, r3, #9
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d204      	bcs.n	800ad40 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad3c:	60da      	str	r2, [r3, #12]
 800ad3e:	e005      	b.n	800ad4c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad40:	231a      	movs	r3, #26
 800ad42:	2218      	movs	r2, #24
 800ad44:	189b      	adds	r3, r3, r2
 800ad46:	19db      	adds	r3, r3, r7
 800ad48:	2201      	movs	r2, #1
 800ad4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2200      	movs	r2, #0
 800ad56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ad58:	231a      	movs	r3, #26
 800ad5a:	2218      	movs	r2, #24
 800ad5c:	189b      	adds	r3, r3, r2
 800ad5e:	19db      	adds	r3, r3, r7
 800ad60:	781b      	ldrb	r3, [r3, #0]
}
 800ad62:	0018      	movs	r0, r3
 800ad64:	46bd      	mov	sp, r7
 800ad66:	b00e      	add	sp, #56	; 0x38
 800ad68:	bdb0      	pop	{r4, r5, r7, pc}
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	0800b47c 	.word	0x0800b47c
 800ad70:	40021000 	.word	0x40021000
 800ad74:	003d0900 	.word	0x003d0900
 800ad78:	00f42400 	.word	0x00f42400
 800ad7c:	0800b4a0 	.word	0x0800b4a0

0800ad80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	4013      	ands	r3, r2
 800ad90:	d00b      	beq.n	800adaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4a4a      	ldr	r2, [pc, #296]	; (800aec4 <UART_AdvFeatureConfig+0x144>)
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	0019      	movs	r1, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2202      	movs	r2, #2
 800adb0:	4013      	ands	r3, r2
 800adb2:	d00b      	beq.n	800adcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4a43      	ldr	r2, [pc, #268]	; (800aec8 <UART_AdvFeatureConfig+0x148>)
 800adbc:	4013      	ands	r3, r2
 800adbe:	0019      	movs	r1, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2204      	movs	r2, #4
 800add2:	4013      	ands	r3, r2
 800add4:	d00b      	beq.n	800adee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	4a3b      	ldr	r2, [pc, #236]	; (800aecc <UART_AdvFeatureConfig+0x14c>)
 800adde:	4013      	ands	r3, r2
 800ade0:	0019      	movs	r1, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf2:	2208      	movs	r2, #8
 800adf4:	4013      	ands	r3, r2
 800adf6:	d00b      	beq.n	800ae10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	4a34      	ldr	r2, [pc, #208]	; (800aed0 <UART_AdvFeatureConfig+0x150>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	0019      	movs	r1, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae14:	2210      	movs	r2, #16
 800ae16:	4013      	ands	r3, r2
 800ae18:	d00b      	beq.n	800ae32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	4a2c      	ldr	r2, [pc, #176]	; (800aed4 <UART_AdvFeatureConfig+0x154>)
 800ae22:	4013      	ands	r3, r2
 800ae24:	0019      	movs	r1, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae36:	2220      	movs	r2, #32
 800ae38:	4013      	ands	r3, r2
 800ae3a:	d00b      	beq.n	800ae54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	4a25      	ldr	r2, [pc, #148]	; (800aed8 <UART_AdvFeatureConfig+0x158>)
 800ae44:	4013      	ands	r3, r2
 800ae46:	0019      	movs	r1, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae58:	2240      	movs	r2, #64	; 0x40
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	d01d      	beq.n	800ae9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4a1d      	ldr	r2, [pc, #116]	; (800aedc <UART_AdvFeatureConfig+0x15c>)
 800ae66:	4013      	ands	r3, r2
 800ae68:	0019      	movs	r1, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae7a:	2380      	movs	r3, #128	; 0x80
 800ae7c:	035b      	lsls	r3, r3, #13
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d10b      	bne.n	800ae9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	4a15      	ldr	r2, [pc, #84]	; (800aee0 <UART_AdvFeatureConfig+0x160>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	0019      	movs	r1, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2280      	movs	r2, #128	; 0x80
 800aea0:	4013      	ands	r3, r2
 800aea2:	d00b      	beq.n	800aebc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	4a0e      	ldr	r2, [pc, #56]	; (800aee4 <UART_AdvFeatureConfig+0x164>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	0019      	movs	r1, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	605a      	str	r2, [r3, #4]
  }
}
 800aebc:	46c0      	nop			; (mov r8, r8)
 800aebe:	46bd      	mov	sp, r7
 800aec0:	b002      	add	sp, #8
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	fffdffff 	.word	0xfffdffff
 800aec8:	fffeffff 	.word	0xfffeffff
 800aecc:	fffbffff 	.word	0xfffbffff
 800aed0:	ffff7fff 	.word	0xffff7fff
 800aed4:	ffffefff 	.word	0xffffefff
 800aed8:	ffffdfff 	.word	0xffffdfff
 800aedc:	ffefffff 	.word	0xffefffff
 800aee0:	ff9fffff 	.word	0xff9fffff
 800aee4:	fff7ffff 	.word	0xfff7ffff

0800aee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2280      	movs	r2, #128	; 0x80
 800aef4:	2100      	movs	r1, #0
 800aef6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aef8:	f7fe f9c4 	bl	8009284 <HAL_GetTick>
 800aefc:	0003      	movs	r3, r0
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2208      	movs	r2, #8
 800af08:	4013      	ands	r3, r2
 800af0a:	2b08      	cmp	r3, #8
 800af0c:	d10c      	bne.n	800af28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2280      	movs	r2, #128	; 0x80
 800af12:	0391      	lsls	r1, r2, #14
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	4a17      	ldr	r2, [pc, #92]	; (800af74 <UART_CheckIdleState+0x8c>)
 800af18:	9200      	str	r2, [sp, #0]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f000 f82c 	bl	800af78 <UART_WaitOnFlagUntilTimeout>
 800af20:	1e03      	subs	r3, r0, #0
 800af22:	d001      	beq.n	800af28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	e021      	b.n	800af6c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2204      	movs	r2, #4
 800af30:	4013      	ands	r3, r2
 800af32:	2b04      	cmp	r3, #4
 800af34:	d10c      	bne.n	800af50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2280      	movs	r2, #128	; 0x80
 800af3a:	03d1      	lsls	r1, r2, #15
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	4a0d      	ldr	r2, [pc, #52]	; (800af74 <UART_CheckIdleState+0x8c>)
 800af40:	9200      	str	r2, [sp, #0]
 800af42:	2200      	movs	r2, #0
 800af44:	f000 f818 	bl	800af78 <UART_WaitOnFlagUntilTimeout>
 800af48:	1e03      	subs	r3, r0, #0
 800af4a:	d001      	beq.n	800af50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e00d      	b.n	800af6c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2220      	movs	r2, #32
 800af54:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2220      	movs	r2, #32
 800af5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2274      	movs	r2, #116	; 0x74
 800af66:	2100      	movs	r1, #0
 800af68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	0018      	movs	r0, r3
 800af6e:	46bd      	mov	sp, r7
 800af70:	b004      	add	sp, #16
 800af72:	bd80      	pop	{r7, pc}
 800af74:	01ffffff 	.word	0x01ffffff

0800af78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b094      	sub	sp, #80	; 0x50
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	603b      	str	r3, [r7, #0]
 800af84:	1dfb      	adds	r3, r7, #7
 800af86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af88:	e0a3      	b.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af8c:	3301      	adds	r3, #1
 800af8e:	d100      	bne.n	800af92 <UART_WaitOnFlagUntilTimeout+0x1a>
 800af90:	e09f      	b.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af92:	f7fe f977 	bl	8009284 <HAL_GetTick>
 800af96:	0002      	movs	r2, r0
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d302      	bcc.n	800afa8 <UART_WaitOnFlagUntilTimeout+0x30>
 800afa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d13d      	bne.n	800b024 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa8:	f3ef 8310 	mrs	r3, PRIMASK
 800afac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afb0:	647b      	str	r3, [r7, #68]	; 0x44
 800afb2:	2301      	movs	r3, #1
 800afb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	f383 8810 	msr	PRIMASK, r3
}
 800afbc:	46c0      	nop			; (mov r8, r8)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	494c      	ldr	r1, [pc, #304]	; (800b0fc <UART_WaitOnFlagUntilTimeout+0x184>)
 800afca:	400a      	ands	r2, r1
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afd0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd4:	f383 8810 	msr	PRIMASK, r3
}
 800afd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afda:	f3ef 8310 	mrs	r3, PRIMASK
 800afde:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800afe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe2:	643b      	str	r3, [r7, #64]	; 0x40
 800afe4:	2301      	movs	r3, #1
 800afe6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	f383 8810 	msr	PRIMASK, r3
}
 800afee:	46c0      	nop			; (mov r8, r8)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2101      	movs	r1, #1
 800affc:	438a      	bics	r2, r1
 800affe:	609a      	str	r2, [r3, #8]
 800b000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b006:	f383 8810 	msr	PRIMASK, r3
}
 800b00a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2220      	movs	r2, #32
 800b010:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2220      	movs	r2, #32
 800b016:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2274      	movs	r2, #116	; 0x74
 800b01c:	2100      	movs	r1, #0
 800b01e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b020:	2303      	movs	r3, #3
 800b022:	e067      	b.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2204      	movs	r2, #4
 800b02c:	4013      	ands	r3, r2
 800b02e:	d050      	beq.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	69da      	ldr	r2, [r3, #28]
 800b036:	2380      	movs	r3, #128	; 0x80
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	401a      	ands	r2, r3
 800b03c:	2380      	movs	r3, #128	; 0x80
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	429a      	cmp	r2, r3
 800b042:	d146      	bne.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2280      	movs	r2, #128	; 0x80
 800b04a:	0112      	lsls	r2, r2, #4
 800b04c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b04e:	f3ef 8310 	mrs	r3, PRIMASK
 800b052:	613b      	str	r3, [r7, #16]
  return(result);
 800b054:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b056:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b058:	2301      	movs	r3, #1
 800b05a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f383 8810 	msr	PRIMASK, r3
}
 800b062:	46c0      	nop			; (mov r8, r8)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4923      	ldr	r1, [pc, #140]	; (800b0fc <UART_WaitOnFlagUntilTimeout+0x184>)
 800b070:	400a      	ands	r2, r1
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	f383 8810 	msr	PRIMASK, r3
}
 800b07e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b080:	f3ef 8310 	mrs	r3, PRIMASK
 800b084:	61fb      	str	r3, [r7, #28]
  return(result);
 800b086:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b088:	64bb      	str	r3, [r7, #72]	; 0x48
 800b08a:	2301      	movs	r3, #1
 800b08c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	f383 8810 	msr	PRIMASK, r3
}
 800b094:	46c0      	nop			; (mov r8, r8)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689a      	ldr	r2, [r3, #8]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	438a      	bics	r2, r1
 800b0a4:	609a      	str	r2, [r3, #8]
 800b0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	f383 8810 	msr	PRIMASK, r3
}
 800b0b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2280      	movs	r2, #128	; 0x80
 800b0c2:	2120      	movs	r1, #32
 800b0c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2274      	movs	r2, #116	; 0x74
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e010      	b.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	425a      	negs	r2, r3
 800b0e2:	4153      	adcs	r3, r2
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	001a      	movs	r2, r3
 800b0e8:	1dfb      	adds	r3, r7, #7
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d100      	bne.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 800b0f0:	e74b      	b.n	800af8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	0018      	movs	r0, r3
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	b014      	add	sp, #80	; 0x50
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	fffffe5f 	.word	0xfffffe5f

0800b100 <__libc_init_array>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	2600      	movs	r6, #0
 800b104:	4d0c      	ldr	r5, [pc, #48]	; (800b138 <__libc_init_array+0x38>)
 800b106:	4c0d      	ldr	r4, [pc, #52]	; (800b13c <__libc_init_array+0x3c>)
 800b108:	1b64      	subs	r4, r4, r5
 800b10a:	10a4      	asrs	r4, r4, #2
 800b10c:	42a6      	cmp	r6, r4
 800b10e:	d109      	bne.n	800b124 <__libc_init_array+0x24>
 800b110:	2600      	movs	r6, #0
 800b112:	f000 f821 	bl	800b158 <_init>
 800b116:	4d0a      	ldr	r5, [pc, #40]	; (800b140 <__libc_init_array+0x40>)
 800b118:	4c0a      	ldr	r4, [pc, #40]	; (800b144 <__libc_init_array+0x44>)
 800b11a:	1b64      	subs	r4, r4, r5
 800b11c:	10a4      	asrs	r4, r4, #2
 800b11e:	42a6      	cmp	r6, r4
 800b120:	d105      	bne.n	800b12e <__libc_init_array+0x2e>
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	00b3      	lsls	r3, r6, #2
 800b126:	58eb      	ldr	r3, [r5, r3]
 800b128:	4798      	blx	r3
 800b12a:	3601      	adds	r6, #1
 800b12c:	e7ee      	b.n	800b10c <__libc_init_array+0xc>
 800b12e:	00b3      	lsls	r3, r6, #2
 800b130:	58eb      	ldr	r3, [r5, r3]
 800b132:	4798      	blx	r3
 800b134:	3601      	adds	r6, #1
 800b136:	e7f2      	b.n	800b11e <__libc_init_array+0x1e>
 800b138:	0800b4cc 	.word	0x0800b4cc
 800b13c:	0800b4cc 	.word	0x0800b4cc
 800b140:	0800b4cc 	.word	0x0800b4cc
 800b144:	0800b4d0 	.word	0x0800b4d0

0800b148 <memset>:
 800b148:	0003      	movs	r3, r0
 800b14a:	1882      	adds	r2, r0, r2
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d100      	bne.n	800b152 <memset+0xa>
 800b150:	4770      	bx	lr
 800b152:	7019      	strb	r1, [r3, #0]
 800b154:	3301      	adds	r3, #1
 800b156:	e7f9      	b.n	800b14c <memset+0x4>

0800b158 <_init>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr

0800b164 <_fini>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	46c0      	nop			; (mov r8, r8)
 800b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16a:	bc08      	pop	{r3}
 800b16c:	469e      	mov	lr, r3
 800b16e:	4770      	bx	lr
