
NucStationStack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  080080c0  080080c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800bac8  0800bac8  0000bac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdc0  0800bdc0  00010010  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdc0  0800bdc0  0000bdc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdc8  0800bdc8  00010010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdc8  0800bdc8  0000bdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdcc  0800bdcc  0000bdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800bdd0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000010  0800bde0  00010010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800bde0  00010338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d1  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f57  00000000  00000000  0001d809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0001f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00020340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c65  00000000  00000000  00020e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df5f  00000000  00000000  00037ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d8e  00000000  00000000  00045a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc7d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000cc824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080c0 <__do_global_dtors_aux>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4c06      	ldr	r4, [pc, #24]	; (80080dc <__do_global_dtors_aux+0x1c>)
 80080c4:	7823      	ldrb	r3, [r4, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <__do_global_dtors_aux+0x1a>
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <__do_global_dtors_aux+0x20>)
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d0:	4804      	ldr	r0, [pc, #16]	; (80080e4 <__do_global_dtors_aux+0x24>)
 80080d2:	e000      	b.n	80080d6 <__do_global_dtors_aux+0x16>
 80080d4:	bf00      	nop
 80080d6:	2301      	movs	r3, #1
 80080d8:	7023      	strb	r3, [r4, #0]
 80080da:	bd10      	pop	{r4, pc}
 80080dc:	20000010 	.word	0x20000010
 80080e0:	00000000 	.word	0x00000000
 80080e4:	0800bab0 	.word	0x0800bab0

080080e8 <frame_dummy>:
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <frame_dummy+0x14>)
 80080ea:	b510      	push	{r4, lr}
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <frame_dummy+0x10>
 80080f0:	4903      	ldr	r1, [pc, #12]	; (8008100 <frame_dummy+0x18>)
 80080f2:	4804      	ldr	r0, [pc, #16]	; (8008104 <frame_dummy+0x1c>)
 80080f4:	e000      	b.n	80080f8 <frame_dummy+0x10>
 80080f6:	bf00      	nop
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	00000000 	.word	0x00000000
 8008100:	20000014 	.word	0x20000014
 8008104:	0800bab0 	.word	0x0800bab0

08008108 <__udivsi3>:
 8008108:	2200      	movs	r2, #0
 800810a:	0843      	lsrs	r3, r0, #1
 800810c:	428b      	cmp	r3, r1
 800810e:	d374      	bcc.n	80081fa <__udivsi3+0xf2>
 8008110:	0903      	lsrs	r3, r0, #4
 8008112:	428b      	cmp	r3, r1
 8008114:	d35f      	bcc.n	80081d6 <__udivsi3+0xce>
 8008116:	0a03      	lsrs	r3, r0, #8
 8008118:	428b      	cmp	r3, r1
 800811a:	d344      	bcc.n	80081a6 <__udivsi3+0x9e>
 800811c:	0b03      	lsrs	r3, r0, #12
 800811e:	428b      	cmp	r3, r1
 8008120:	d328      	bcc.n	8008174 <__udivsi3+0x6c>
 8008122:	0c03      	lsrs	r3, r0, #16
 8008124:	428b      	cmp	r3, r1
 8008126:	d30d      	bcc.n	8008144 <__udivsi3+0x3c>
 8008128:	22ff      	movs	r2, #255	; 0xff
 800812a:	0209      	lsls	r1, r1, #8
 800812c:	ba12      	rev	r2, r2
 800812e:	0c03      	lsrs	r3, r0, #16
 8008130:	428b      	cmp	r3, r1
 8008132:	d302      	bcc.n	800813a <__udivsi3+0x32>
 8008134:	1212      	asrs	r2, r2, #8
 8008136:	0209      	lsls	r1, r1, #8
 8008138:	d065      	beq.n	8008206 <__udivsi3+0xfe>
 800813a:	0b03      	lsrs	r3, r0, #12
 800813c:	428b      	cmp	r3, r1
 800813e:	d319      	bcc.n	8008174 <__udivsi3+0x6c>
 8008140:	e000      	b.n	8008144 <__udivsi3+0x3c>
 8008142:	0a09      	lsrs	r1, r1, #8
 8008144:	0bc3      	lsrs	r3, r0, #15
 8008146:	428b      	cmp	r3, r1
 8008148:	d301      	bcc.n	800814e <__udivsi3+0x46>
 800814a:	03cb      	lsls	r3, r1, #15
 800814c:	1ac0      	subs	r0, r0, r3
 800814e:	4152      	adcs	r2, r2
 8008150:	0b83      	lsrs	r3, r0, #14
 8008152:	428b      	cmp	r3, r1
 8008154:	d301      	bcc.n	800815a <__udivsi3+0x52>
 8008156:	038b      	lsls	r3, r1, #14
 8008158:	1ac0      	subs	r0, r0, r3
 800815a:	4152      	adcs	r2, r2
 800815c:	0b43      	lsrs	r3, r0, #13
 800815e:	428b      	cmp	r3, r1
 8008160:	d301      	bcc.n	8008166 <__udivsi3+0x5e>
 8008162:	034b      	lsls	r3, r1, #13
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	4152      	adcs	r2, r2
 8008168:	0b03      	lsrs	r3, r0, #12
 800816a:	428b      	cmp	r3, r1
 800816c:	d301      	bcc.n	8008172 <__udivsi3+0x6a>
 800816e:	030b      	lsls	r3, r1, #12
 8008170:	1ac0      	subs	r0, r0, r3
 8008172:	4152      	adcs	r2, r2
 8008174:	0ac3      	lsrs	r3, r0, #11
 8008176:	428b      	cmp	r3, r1
 8008178:	d301      	bcc.n	800817e <__udivsi3+0x76>
 800817a:	02cb      	lsls	r3, r1, #11
 800817c:	1ac0      	subs	r0, r0, r3
 800817e:	4152      	adcs	r2, r2
 8008180:	0a83      	lsrs	r3, r0, #10
 8008182:	428b      	cmp	r3, r1
 8008184:	d301      	bcc.n	800818a <__udivsi3+0x82>
 8008186:	028b      	lsls	r3, r1, #10
 8008188:	1ac0      	subs	r0, r0, r3
 800818a:	4152      	adcs	r2, r2
 800818c:	0a43      	lsrs	r3, r0, #9
 800818e:	428b      	cmp	r3, r1
 8008190:	d301      	bcc.n	8008196 <__udivsi3+0x8e>
 8008192:	024b      	lsls	r3, r1, #9
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	4152      	adcs	r2, r2
 8008198:	0a03      	lsrs	r3, r0, #8
 800819a:	428b      	cmp	r3, r1
 800819c:	d301      	bcc.n	80081a2 <__udivsi3+0x9a>
 800819e:	020b      	lsls	r3, r1, #8
 80081a0:	1ac0      	subs	r0, r0, r3
 80081a2:	4152      	adcs	r2, r2
 80081a4:	d2cd      	bcs.n	8008142 <__udivsi3+0x3a>
 80081a6:	09c3      	lsrs	r3, r0, #7
 80081a8:	428b      	cmp	r3, r1
 80081aa:	d301      	bcc.n	80081b0 <__udivsi3+0xa8>
 80081ac:	01cb      	lsls	r3, r1, #7
 80081ae:	1ac0      	subs	r0, r0, r3
 80081b0:	4152      	adcs	r2, r2
 80081b2:	0983      	lsrs	r3, r0, #6
 80081b4:	428b      	cmp	r3, r1
 80081b6:	d301      	bcc.n	80081bc <__udivsi3+0xb4>
 80081b8:	018b      	lsls	r3, r1, #6
 80081ba:	1ac0      	subs	r0, r0, r3
 80081bc:	4152      	adcs	r2, r2
 80081be:	0943      	lsrs	r3, r0, #5
 80081c0:	428b      	cmp	r3, r1
 80081c2:	d301      	bcc.n	80081c8 <__udivsi3+0xc0>
 80081c4:	014b      	lsls	r3, r1, #5
 80081c6:	1ac0      	subs	r0, r0, r3
 80081c8:	4152      	adcs	r2, r2
 80081ca:	0903      	lsrs	r3, r0, #4
 80081cc:	428b      	cmp	r3, r1
 80081ce:	d301      	bcc.n	80081d4 <__udivsi3+0xcc>
 80081d0:	010b      	lsls	r3, r1, #4
 80081d2:	1ac0      	subs	r0, r0, r3
 80081d4:	4152      	adcs	r2, r2
 80081d6:	08c3      	lsrs	r3, r0, #3
 80081d8:	428b      	cmp	r3, r1
 80081da:	d301      	bcc.n	80081e0 <__udivsi3+0xd8>
 80081dc:	00cb      	lsls	r3, r1, #3
 80081de:	1ac0      	subs	r0, r0, r3
 80081e0:	4152      	adcs	r2, r2
 80081e2:	0883      	lsrs	r3, r0, #2
 80081e4:	428b      	cmp	r3, r1
 80081e6:	d301      	bcc.n	80081ec <__udivsi3+0xe4>
 80081e8:	008b      	lsls	r3, r1, #2
 80081ea:	1ac0      	subs	r0, r0, r3
 80081ec:	4152      	adcs	r2, r2
 80081ee:	0843      	lsrs	r3, r0, #1
 80081f0:	428b      	cmp	r3, r1
 80081f2:	d301      	bcc.n	80081f8 <__udivsi3+0xf0>
 80081f4:	004b      	lsls	r3, r1, #1
 80081f6:	1ac0      	subs	r0, r0, r3
 80081f8:	4152      	adcs	r2, r2
 80081fa:	1a41      	subs	r1, r0, r1
 80081fc:	d200      	bcs.n	8008200 <__udivsi3+0xf8>
 80081fe:	4601      	mov	r1, r0
 8008200:	4152      	adcs	r2, r2
 8008202:	4610      	mov	r0, r2
 8008204:	4770      	bx	lr
 8008206:	e7ff      	b.n	8008208 <__udivsi3+0x100>
 8008208:	b501      	push	{r0, lr}
 800820a:	2000      	movs	r0, #0
 800820c:	f000 f806 	bl	800821c <__aeabi_idiv0>
 8008210:	bd02      	pop	{r1, pc}
 8008212:	46c0      	nop			; (mov r8, r8)

08008214 <__aeabi_uidivmod>:
 8008214:	2900      	cmp	r1, #0
 8008216:	d0f7      	beq.n	8008208 <__udivsi3+0x100>
 8008218:	e776      	b.n	8008108 <__udivsi3>
 800821a:	4770      	bx	lr

0800821c <__aeabi_idiv0>:
 800821c:	4770      	bx	lr
 800821e:	46c0      	nop			; (mov r8, r8)

08008220 <__aeabi_uldivmod>:
 8008220:	2b00      	cmp	r3, #0
 8008222:	d111      	bne.n	8008248 <__aeabi_uldivmod+0x28>
 8008224:	2a00      	cmp	r2, #0
 8008226:	d10f      	bne.n	8008248 <__aeabi_uldivmod+0x28>
 8008228:	2900      	cmp	r1, #0
 800822a:	d100      	bne.n	800822e <__aeabi_uldivmod+0xe>
 800822c:	2800      	cmp	r0, #0
 800822e:	d002      	beq.n	8008236 <__aeabi_uldivmod+0x16>
 8008230:	2100      	movs	r1, #0
 8008232:	43c9      	mvns	r1, r1
 8008234:	0008      	movs	r0, r1
 8008236:	b407      	push	{r0, r1, r2}
 8008238:	4802      	ldr	r0, [pc, #8]	; (8008244 <__aeabi_uldivmod+0x24>)
 800823a:	a102      	add	r1, pc, #8	; (adr r1, 8008244 <__aeabi_uldivmod+0x24>)
 800823c:	1840      	adds	r0, r0, r1
 800823e:	9002      	str	r0, [sp, #8]
 8008240:	bd03      	pop	{r0, r1, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	ffffffd9 	.word	0xffffffd9
 8008248:	b403      	push	{r0, r1}
 800824a:	4668      	mov	r0, sp
 800824c:	b501      	push	{r0, lr}
 800824e:	9802      	ldr	r0, [sp, #8]
 8008250:	f000 f834 	bl	80082bc <__udivmoddi4>
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	469e      	mov	lr, r3
 8008258:	b002      	add	sp, #8
 800825a:	bc0c      	pop	{r2, r3}
 800825c:	4770      	bx	lr
 800825e:	46c0      	nop			; (mov r8, r8)

08008260 <__aeabi_lmul>:
 8008260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008262:	46ce      	mov	lr, r9
 8008264:	4647      	mov	r7, r8
 8008266:	b580      	push	{r7, lr}
 8008268:	0007      	movs	r7, r0
 800826a:	4699      	mov	r9, r3
 800826c:	0c3b      	lsrs	r3, r7, #16
 800826e:	469c      	mov	ip, r3
 8008270:	0413      	lsls	r3, r2, #16
 8008272:	0c1b      	lsrs	r3, r3, #16
 8008274:	001d      	movs	r5, r3
 8008276:	000e      	movs	r6, r1
 8008278:	4661      	mov	r1, ip
 800827a:	0400      	lsls	r0, r0, #16
 800827c:	0c14      	lsrs	r4, r2, #16
 800827e:	0c00      	lsrs	r0, r0, #16
 8008280:	4345      	muls	r5, r0
 8008282:	434b      	muls	r3, r1
 8008284:	4360      	muls	r0, r4
 8008286:	4361      	muls	r1, r4
 8008288:	18c0      	adds	r0, r0, r3
 800828a:	0c2c      	lsrs	r4, r5, #16
 800828c:	1820      	adds	r0, r4, r0
 800828e:	468c      	mov	ip, r1
 8008290:	4283      	cmp	r3, r0
 8008292:	d903      	bls.n	800829c <__aeabi_lmul+0x3c>
 8008294:	2380      	movs	r3, #128	; 0x80
 8008296:	025b      	lsls	r3, r3, #9
 8008298:	4698      	mov	r8, r3
 800829a:	44c4      	add	ip, r8
 800829c:	4649      	mov	r1, r9
 800829e:	4379      	muls	r1, r7
 80082a0:	4372      	muls	r2, r6
 80082a2:	0c03      	lsrs	r3, r0, #16
 80082a4:	4463      	add	r3, ip
 80082a6:	042d      	lsls	r5, r5, #16
 80082a8:	0c2d      	lsrs	r5, r5, #16
 80082aa:	18c9      	adds	r1, r1, r3
 80082ac:	0400      	lsls	r0, r0, #16
 80082ae:	1940      	adds	r0, r0, r5
 80082b0:	1889      	adds	r1, r1, r2
 80082b2:	bcc0      	pop	{r6, r7}
 80082b4:	46b9      	mov	r9, r7
 80082b6:	46b0      	mov	r8, r6
 80082b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ba:	46c0      	nop			; (mov r8, r8)

080082bc <__udivmoddi4>:
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	4657      	mov	r7, sl
 80082c0:	464e      	mov	r6, r9
 80082c2:	4645      	mov	r5, r8
 80082c4:	46de      	mov	lr, fp
 80082c6:	b5e0      	push	{r5, r6, r7, lr}
 80082c8:	0004      	movs	r4, r0
 80082ca:	000d      	movs	r5, r1
 80082cc:	4692      	mov	sl, r2
 80082ce:	4699      	mov	r9, r3
 80082d0:	b083      	sub	sp, #12
 80082d2:	428b      	cmp	r3, r1
 80082d4:	d830      	bhi.n	8008338 <__udivmoddi4+0x7c>
 80082d6:	d02d      	beq.n	8008334 <__udivmoddi4+0x78>
 80082d8:	4649      	mov	r1, r9
 80082da:	4650      	mov	r0, sl
 80082dc:	f000 f8d8 	bl	8008490 <__clzdi2>
 80082e0:	0029      	movs	r1, r5
 80082e2:	0006      	movs	r6, r0
 80082e4:	0020      	movs	r0, r4
 80082e6:	f000 f8d3 	bl	8008490 <__clzdi2>
 80082ea:	1a33      	subs	r3, r6, r0
 80082ec:	4698      	mov	r8, r3
 80082ee:	3b20      	subs	r3, #32
 80082f0:	469b      	mov	fp, r3
 80082f2:	d433      	bmi.n	800835c <__udivmoddi4+0xa0>
 80082f4:	465a      	mov	r2, fp
 80082f6:	4653      	mov	r3, sl
 80082f8:	4093      	lsls	r3, r2
 80082fa:	4642      	mov	r2, r8
 80082fc:	001f      	movs	r7, r3
 80082fe:	4653      	mov	r3, sl
 8008300:	4093      	lsls	r3, r2
 8008302:	001e      	movs	r6, r3
 8008304:	42af      	cmp	r7, r5
 8008306:	d83a      	bhi.n	800837e <__udivmoddi4+0xc2>
 8008308:	42af      	cmp	r7, r5
 800830a:	d100      	bne.n	800830e <__udivmoddi4+0x52>
 800830c:	e078      	b.n	8008400 <__udivmoddi4+0x144>
 800830e:	465b      	mov	r3, fp
 8008310:	1ba4      	subs	r4, r4, r6
 8008312:	41bd      	sbcs	r5, r7
 8008314:	2b00      	cmp	r3, #0
 8008316:	da00      	bge.n	800831a <__udivmoddi4+0x5e>
 8008318:	e075      	b.n	8008406 <__udivmoddi4+0x14a>
 800831a:	2200      	movs	r2, #0
 800831c:	2300      	movs	r3, #0
 800831e:	9200      	str	r2, [sp, #0]
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	2301      	movs	r3, #1
 8008324:	465a      	mov	r2, fp
 8008326:	4093      	lsls	r3, r2
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	2301      	movs	r3, #1
 800832c:	4642      	mov	r2, r8
 800832e:	4093      	lsls	r3, r2
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	e028      	b.n	8008386 <__udivmoddi4+0xca>
 8008334:	4282      	cmp	r2, r0
 8008336:	d9cf      	bls.n	80082d8 <__udivmoddi4+0x1c>
 8008338:	2200      	movs	r2, #0
 800833a:	2300      	movs	r3, #0
 800833c:	9200      	str	r2, [sp, #0]
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <__udivmoddi4+0x8e>
 8008346:	601c      	str	r4, [r3, #0]
 8008348:	605d      	str	r5, [r3, #4]
 800834a:	9800      	ldr	r0, [sp, #0]
 800834c:	9901      	ldr	r1, [sp, #4]
 800834e:	b003      	add	sp, #12
 8008350:	bcf0      	pop	{r4, r5, r6, r7}
 8008352:	46bb      	mov	fp, r7
 8008354:	46b2      	mov	sl, r6
 8008356:	46a9      	mov	r9, r5
 8008358:	46a0      	mov	r8, r4
 800835a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800835c:	4642      	mov	r2, r8
 800835e:	2320      	movs	r3, #32
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	4652      	mov	r2, sl
 8008364:	40da      	lsrs	r2, r3
 8008366:	4641      	mov	r1, r8
 8008368:	0013      	movs	r3, r2
 800836a:	464a      	mov	r2, r9
 800836c:	408a      	lsls	r2, r1
 800836e:	0017      	movs	r7, r2
 8008370:	4642      	mov	r2, r8
 8008372:	431f      	orrs	r7, r3
 8008374:	4653      	mov	r3, sl
 8008376:	4093      	lsls	r3, r2
 8008378:	001e      	movs	r6, r3
 800837a:	42af      	cmp	r7, r5
 800837c:	d9c4      	bls.n	8008308 <__udivmoddi4+0x4c>
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	9200      	str	r2, [sp, #0]
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	4643      	mov	r3, r8
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0d9      	beq.n	8008340 <__udivmoddi4+0x84>
 800838c:	07fb      	lsls	r3, r7, #31
 800838e:	0872      	lsrs	r2, r6, #1
 8008390:	431a      	orrs	r2, r3
 8008392:	4646      	mov	r6, r8
 8008394:	087b      	lsrs	r3, r7, #1
 8008396:	e00e      	b.n	80083b6 <__udivmoddi4+0xfa>
 8008398:	42ab      	cmp	r3, r5
 800839a:	d101      	bne.n	80083a0 <__udivmoddi4+0xe4>
 800839c:	42a2      	cmp	r2, r4
 800839e:	d80c      	bhi.n	80083ba <__udivmoddi4+0xfe>
 80083a0:	1aa4      	subs	r4, r4, r2
 80083a2:	419d      	sbcs	r5, r3
 80083a4:	2001      	movs	r0, #1
 80083a6:	1924      	adds	r4, r4, r4
 80083a8:	416d      	adcs	r5, r5
 80083aa:	2100      	movs	r1, #0
 80083ac:	3e01      	subs	r6, #1
 80083ae:	1824      	adds	r4, r4, r0
 80083b0:	414d      	adcs	r5, r1
 80083b2:	2e00      	cmp	r6, #0
 80083b4:	d006      	beq.n	80083c4 <__udivmoddi4+0x108>
 80083b6:	42ab      	cmp	r3, r5
 80083b8:	d9ee      	bls.n	8008398 <__udivmoddi4+0xdc>
 80083ba:	3e01      	subs	r6, #1
 80083bc:	1924      	adds	r4, r4, r4
 80083be:	416d      	adcs	r5, r5
 80083c0:	2e00      	cmp	r6, #0
 80083c2:	d1f8      	bne.n	80083b6 <__udivmoddi4+0xfa>
 80083c4:	9800      	ldr	r0, [sp, #0]
 80083c6:	9901      	ldr	r1, [sp, #4]
 80083c8:	465b      	mov	r3, fp
 80083ca:	1900      	adds	r0, r0, r4
 80083cc:	4169      	adcs	r1, r5
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	db24      	blt.n	800841c <__udivmoddi4+0x160>
 80083d2:	002b      	movs	r3, r5
 80083d4:	465a      	mov	r2, fp
 80083d6:	4644      	mov	r4, r8
 80083d8:	40d3      	lsrs	r3, r2
 80083da:	002a      	movs	r2, r5
 80083dc:	40e2      	lsrs	r2, r4
 80083de:	001c      	movs	r4, r3
 80083e0:	465b      	mov	r3, fp
 80083e2:	0015      	movs	r5, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db2a      	blt.n	800843e <__udivmoddi4+0x182>
 80083e8:	0026      	movs	r6, r4
 80083ea:	409e      	lsls	r6, r3
 80083ec:	0033      	movs	r3, r6
 80083ee:	0026      	movs	r6, r4
 80083f0:	4647      	mov	r7, r8
 80083f2:	40be      	lsls	r6, r7
 80083f4:	0032      	movs	r2, r6
 80083f6:	1a80      	subs	r0, r0, r2
 80083f8:	4199      	sbcs	r1, r3
 80083fa:	9000      	str	r0, [sp, #0]
 80083fc:	9101      	str	r1, [sp, #4]
 80083fe:	e79f      	b.n	8008340 <__udivmoddi4+0x84>
 8008400:	42a3      	cmp	r3, r4
 8008402:	d8bc      	bhi.n	800837e <__udivmoddi4+0xc2>
 8008404:	e783      	b.n	800830e <__udivmoddi4+0x52>
 8008406:	4642      	mov	r2, r8
 8008408:	2320      	movs	r3, #32
 800840a:	2100      	movs	r1, #0
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	2200      	movs	r2, #0
 8008410:	9100      	str	r1, [sp, #0]
 8008412:	9201      	str	r2, [sp, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	40da      	lsrs	r2, r3
 8008418:	9201      	str	r2, [sp, #4]
 800841a:	e786      	b.n	800832a <__udivmoddi4+0x6e>
 800841c:	4642      	mov	r2, r8
 800841e:	2320      	movs	r3, #32
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	002a      	movs	r2, r5
 8008424:	4646      	mov	r6, r8
 8008426:	409a      	lsls	r2, r3
 8008428:	0023      	movs	r3, r4
 800842a:	40f3      	lsrs	r3, r6
 800842c:	4644      	mov	r4, r8
 800842e:	4313      	orrs	r3, r2
 8008430:	002a      	movs	r2, r5
 8008432:	40e2      	lsrs	r2, r4
 8008434:	001c      	movs	r4, r3
 8008436:	465b      	mov	r3, fp
 8008438:	0015      	movs	r5, r2
 800843a:	2b00      	cmp	r3, #0
 800843c:	dad4      	bge.n	80083e8 <__udivmoddi4+0x12c>
 800843e:	4642      	mov	r2, r8
 8008440:	002f      	movs	r7, r5
 8008442:	2320      	movs	r3, #32
 8008444:	0026      	movs	r6, r4
 8008446:	4097      	lsls	r7, r2
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	40de      	lsrs	r6, r3
 800844c:	003b      	movs	r3, r7
 800844e:	4333      	orrs	r3, r6
 8008450:	e7cd      	b.n	80083ee <__udivmoddi4+0x132>
 8008452:	46c0      	nop			; (mov r8, r8)

08008454 <__clzsi2>:
 8008454:	211c      	movs	r1, #28
 8008456:	2301      	movs	r3, #1
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	4298      	cmp	r0, r3
 800845c:	d301      	bcc.n	8008462 <__clzsi2+0xe>
 800845e:	0c00      	lsrs	r0, r0, #16
 8008460:	3910      	subs	r1, #16
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	4298      	cmp	r0, r3
 8008466:	d301      	bcc.n	800846c <__clzsi2+0x18>
 8008468:	0a00      	lsrs	r0, r0, #8
 800846a:	3908      	subs	r1, #8
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	4298      	cmp	r0, r3
 8008470:	d301      	bcc.n	8008476 <__clzsi2+0x22>
 8008472:	0900      	lsrs	r0, r0, #4
 8008474:	3904      	subs	r1, #4
 8008476:	a202      	add	r2, pc, #8	; (adr r2, 8008480 <__clzsi2+0x2c>)
 8008478:	5c10      	ldrb	r0, [r2, r0]
 800847a:	1840      	adds	r0, r0, r1
 800847c:	4770      	bx	lr
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	02020304 	.word	0x02020304
 8008484:	01010101 	.word	0x01010101
	...

08008490 <__clzdi2>:
 8008490:	b510      	push	{r4, lr}
 8008492:	2900      	cmp	r1, #0
 8008494:	d103      	bne.n	800849e <__clzdi2+0xe>
 8008496:	f7ff ffdd 	bl	8008454 <__clzsi2>
 800849a:	3020      	adds	r0, #32
 800849c:	e002      	b.n	80084a4 <__clzdi2+0x14>
 800849e:	0008      	movs	r0, r1
 80084a0:	f7ff ffd8 	bl	8008454 <__clzsi2>
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	46c0      	nop			; (mov r8, r8)

080084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>:
 */

#include <GamepadButton.hpp>


GamepadButton::GamepadButton(GPIO_TypeDef* _PORT, uint16_t _PIN) {
 80084a8:	b590      	push	{r4, r7, lr}
 80084aa:	b08b      	sub	sp, #44	; 0x2c
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	1dbb      	adds	r3, r7, #6
 80084b4:	801a      	strh	r2, [r3, #0]
	but_pin = _PIN;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	1dba      	adds	r2, r7, #6
 80084ba:	8812      	ldrh	r2, [r2, #0]
 80084bc:	809a      	strh	r2, [r3, #4]
	but_port = _PORT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c4:	2414      	movs	r4, #20
 80084c6:	193b      	adds	r3, r7, r4
 80084c8:	0018      	movs	r0, r3
 80084ca:	2314      	movs	r3, #20
 80084cc:	001a      	movs	r2, r3
 80084ce:	2100      	movs	r1, #0
 80084d0:	f003 faa6 	bl	800ba20 <memset>

	/*Configure GPIO pins */
	GPIO_InitStruct.Pin = _PIN;
 80084d4:	1dbb      	adds	r3, r7, #6
 80084d6:	881a      	ldrh	r2, [r3, #0]
 80084d8:	193b      	adds	r3, r7, r4
 80084da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084dc:	193b      	adds	r3, r7, r4
 80084de:	2200      	movs	r2, #0
 80084e0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084e2:	193b      	adds	r3, r7, r4
 80084e4:	2201      	movs	r2, #1
 80084e6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(_PORT, &GPIO_InitStruct);
 80084e8:	193a      	adds	r2, r7, r4
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	0011      	movs	r1, r2
 80084ee:	0018      	movs	r0, r3
 80084f0:	f001 fa90 	bl	8009a14 <HAL_GPIO_Init>
}
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	0018      	movs	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b00b      	add	sp, #44	; 0x2c
 80084fc:	bd90      	pop	{r4, r7, pc}

080084fe <_ZN13GamepadButton12UpdateButtonEv>:

void GamepadButton::UpdateButton()
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(but_port, but_pin) == GPIO_PIN_RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	889b      	ldrh	r3, [r3, #4]
 800850e:	0019      	movs	r1, r3
 8008510:	0010      	movs	r0, r2
 8008512:	f001 fbfd 	bl	8009d10 <HAL_GPIO_ReadPin>
 8008516:	0003      	movs	r3, r0
 8008518:	425a      	negs	r2, r3
 800851a:	4153      	adcs	r3, r2
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <_ZN13GamepadButton12UpdateButtonEv+0x2c>
	{
		IsPressing = true;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	71da      	strb	r2, [r3, #7]
 8008528:	e002      	b.n	8008530 <_ZN13GamepadButton12UpdateButtonEv+0x32>
	}
	else
	{
		IsPressing = false;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	71da      	strb	r2, [r3, #7]
	}

	if(IsPressing != lastStatus)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	79da      	ldrb	r2, [r3, #7]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	799b      	ldrb	r3, [r3, #6]
 8008538:	429a      	cmp	r2, r3
 800853a:	d003      	beq.n	8008544 <_ZN13GamepadButton12UpdateButtonEv+0x46>
		else
		{
			//OnDown.Execute(this);
		}

		lastStatus = IsPressing;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	79da      	ldrb	r2, [r3, #7]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	719a      	strb	r2, [r3, #6]
	}
}
 8008544:	46c0      	nop			; (mov r8, r8)
 8008546:	46bd      	mov	sp, r7
 8008548:	b002      	add	sp, #8
 800854a:	bd80      	pop	{r7, pc}

0800854c <_Z11CheckButtonRK13GamepadButtonh>:
uint8_t cutAmount = 0;

uint32_t score = 0;
uint32_t height = 0;

uint8_t CheckButton(const GamepadButton &BUTTON_A, uint8_t count) {
 800854c:	b590      	push	{r4, r7, lr}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	000a      	movs	r2, r1
 8008556:	1cfb      	adds	r3, r7, #3
 8008558:	701a      	strb	r2, [r3, #0]
	if (BUTTON_A.IsPressing) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	79db      	ldrb	r3, [r3, #7]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d100      	bne.n	8008564 <_Z11CheckButtonRK13GamepadButtonh+0x18>
 8008562:	e139      	b.n	80087d8 <_Z11CheckButtonRK13GamepadButtonh+0x28c>
		HAL_Delay(1000);
 8008564:	23fa      	movs	r3, #250	; 0xfa
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	0018      	movs	r0, r3
 800856a:	f001 f97b 	bl	8009864 <HAL_Delay>

		if(count > oldLineEndPoses[2] || count + currentLength - 1 < oldLinePoses[2])
 800856e:	4b9d      	ldr	r3, [pc, #628]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 8008570:	789b      	ldrb	r3, [r3, #2]
 8008572:	1cfa      	adds	r2, r7, #3
 8008574:	7812      	ldrb	r2, [r2, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d808      	bhi.n	800858c <_Z11CheckButtonRK13GamepadButtonh+0x40>
 800857a:	1cfb      	adds	r3, r7, #3
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	4a9a      	ldr	r2, [pc, #616]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	189b      	adds	r3, r3, r2
 8008584:	4a99      	ldr	r2, [pc, #612]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 8008586:	7892      	ldrb	r2, [r2, #2]
 8008588:	4293      	cmp	r3, r2
 800858a:	dc05      	bgt.n	8008598 <_Z11CheckButtonRK13GamepadButtonh+0x4c>
		{
			gameOver = true;
 800858c:	4b98      	ldr	r3, [pc, #608]	; (80087f0 <_Z11CheckButtonRK13GamepadButtonh+0x2a4>)
 800858e:	2201      	movs	r2, #1
 8008590:	701a      	strb	r2, [r3, #0]
			return count;
 8008592:	1cfb      	adds	r3, r7, #3
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	e121      	b.n	80087dc <_Z11CheckButtonRK13GamepadButtonh+0x290>
		}
		else if (count + currentLength - 1 > oldLineEndPoses[2]) {
 8008598:	1cfb      	adds	r3, r7, #3
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	4a92      	ldr	r2, [pc, #584]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	189b      	adds	r3, r3, r2
 80085a2:	3b01      	subs	r3, #1
 80085a4:	4a8f      	ldr	r2, [pc, #572]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80085a6:	7892      	ldrb	r2, [r2, #2]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	dd39      	ble.n	8008620 <_Z11CheckButtonRK13GamepadButtonh+0xd4>
			cutAmount = ((count + currentLength - 1) - oldLineEndPoses[2]);
 80085ac:	4b8e      	ldr	r3, [pc, #568]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	1cfb      	adds	r3, r7, #3
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	18d3      	adds	r3, r2, r3
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	4b8a      	ldr	r3, [pc, #552]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	4b8b      	ldr	r3, [pc, #556]	; (80087f4 <_Z11CheckButtonRK13GamepadButtonh+0x2a8>)
 80085c6:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= cutAmount; i++) {
 80085c8:	2301      	movs	r3, #1
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	4b89      	ldr	r3, [pc, #548]	; (80087f4 <_Z11CheckButtonRK13GamepadButtonh+0x2a8>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	001a      	movs	r2, r3
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	dc63      	bgt.n	80086a0 <_Z11CheckButtonRK13GamepadButtonh+0x154>
				LCD_setPixel(oldLineEndPoses[2] + i, yLevel, false);
 80085d8:	4b82      	ldr	r3, [pc, #520]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80085da:	789a      	ldrb	r2, [r3, #2]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	18d3      	adds	r3, r2, r3
 80085e2:	b2d8      	uxtb	r0, r3
 80085e4:	4b84      	ldr	r3, [pc, #528]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2200      	movs	r2, #0
 80085ea:	0019      	movs	r1, r3
 80085ec:	f000 ff58 	bl	80094a0 <LCD_setPixel>
				LCD_setPixel(oldLineEndPoses[2] + i, yLevel - 1, false);
 80085f0:	4b7c      	ldr	r3, [pc, #496]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80085f2:	789a      	ldrb	r2, [r3, #2]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	18d3      	adds	r3, r2, r3
 80085fa:	b2d8      	uxtb	r0, r3
 80085fc:	4b7e      	ldr	r3, [pc, #504]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	3b01      	subs	r3, #1
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2200      	movs	r2, #0
 8008606:	0019      	movs	r1, r3
 8008608:	f000 ff4a 	bl	80094a0 <LCD_setPixel>
				currentLength--;
 800860c:	4b76      	ldr	r3, [pc, #472]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	3b01      	subs	r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	4b74      	ldr	r3, [pc, #464]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 8008616:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= cutAmount; i++) {
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	3301      	adds	r3, #1
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	e7d5      	b.n	80085cc <_Z11CheckButtonRK13GamepadButtonh+0x80>
			}
		} else if (count < oldLinePoses[2]) {
 8008620:	4b72      	ldr	r3, [pc, #456]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 8008622:	789b      	ldrb	r3, [r3, #2]
 8008624:	1cfa      	adds	r2, r7, #3
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d239      	bcs.n	80086a0 <_Z11CheckButtonRK13GamepadButtonh+0x154>
			cutAmount = (oldLinePoses[2] - count);
 800862c:	4b6f      	ldr	r3, [pc, #444]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 800862e:	789a      	ldrb	r2, [r3, #2]
 8008630:	1cfb      	adds	r3, r7, #3
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	b2da      	uxtb	r2, r3
 8008638:	4b6e      	ldr	r3, [pc, #440]	; (80087f4 <_Z11CheckButtonRK13GamepadButtonh+0x2a8>)
 800863a:	701a      	strb	r2, [r3, #0]
			currentLength -= cutAmount;
 800863c:	4b6a      	ldr	r3, [pc, #424]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 800863e:	781a      	ldrb	r2, [r3, #0]
 8008640:	4b6c      	ldr	r3, [pc, #432]	; (80087f4 <_Z11CheckButtonRK13GamepadButtonh+0x2a8>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	b2da      	uxtb	r2, r3
 8008648:	4b67      	ldr	r3, [pc, #412]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 800864a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <= cutAmount; i++) {
 800864c:	2300      	movs	r3, #0
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	4b68      	ldr	r3, [pc, #416]	; (80087f4 <_Z11CheckButtonRK13GamepadButtonh+0x2a8>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	001a      	movs	r2, r3
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4293      	cmp	r3, r2
 800865a:	dc1d      	bgt.n	8008698 <_Z11CheckButtonRK13GamepadButtonh+0x14c>
				LCD_setPixel(oldLinePoses[2] - i, yLevel, false);
 800865c:	4b63      	ldr	r3, [pc, #396]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 800865e:	789a      	ldrb	r2, [r3, #2]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	b2d8      	uxtb	r0, r3
 8008668:	4b63      	ldr	r3, [pc, #396]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	0019      	movs	r1, r3
 8008670:	f000 ff16 	bl	80094a0 <LCD_setPixel>
				LCD_setPixel(oldLinePoses[2] - i, yLevel - 1, false);
 8008674:	4b5d      	ldr	r3, [pc, #372]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 8008676:	789a      	ldrb	r2, [r3, #2]
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	b2d8      	uxtb	r0, r3
 8008680:	4b5d      	ldr	r3, [pc, #372]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	3b01      	subs	r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2200      	movs	r2, #0
 800868a:	0019      	movs	r1, r3
 800868c:	f000 ff08 	bl	80094a0 <LCD_setPixel>
			for (int i = 0; i <= cutAmount; i++) {
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	3301      	adds	r3, #1
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	e7db      	b.n	8008650 <_Z11CheckButtonRK13GamepadButtonh+0x104>
			}
			count = oldLinePoses[2];
 8008698:	1cfb      	adds	r3, r7, #3
 800869a:	4a54      	ldr	r2, [pc, #336]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 800869c:	7892      	ldrb	r2, [r2, #2]
 800869e:	701a      	strb	r2, [r3, #0]
			gameOver = true;
			return count;
		}


		oldLineEndPoses[0] = oldLineEndPoses[1];
 80086a0:	4b50      	ldr	r3, [pc, #320]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80086a2:	785a      	ldrb	r2, [r3, #1]
 80086a4:	4b4f      	ldr	r3, [pc, #316]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80086a6:	701a      	strb	r2, [r3, #0]
		oldLineEndPoses[1] = oldLineEndPoses[2];
 80086a8:	4b4e      	ldr	r3, [pc, #312]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80086aa:	789a      	ldrb	r2, [r3, #2]
 80086ac:	4b4d      	ldr	r3, [pc, #308]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80086ae:	705a      	strb	r2, [r3, #1]
		oldLineEndPoses[2] = count + currentLength - 1;
 80086b0:	4b4d      	ldr	r3, [pc, #308]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	1cfb      	adds	r3, r7, #3
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	18d3      	adds	r3, r2, r3
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	3b01      	subs	r3, #1
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	4b48      	ldr	r3, [pc, #288]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 80086c2:	709a      	strb	r2, [r3, #2]

		oldLinePoses[0] = oldLinePoses[1];
 80086c4:	4b49      	ldr	r3, [pc, #292]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 80086c6:	785a      	ldrb	r2, [r3, #1]
 80086c8:	4b48      	ldr	r3, [pc, #288]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 80086ca:	701a      	strb	r2, [r3, #0]
		oldLinePoses[1] = oldLinePoses[2];
 80086cc:	4b47      	ldr	r3, [pc, #284]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 80086ce:	789a      	ldrb	r2, [r3, #2]
 80086d0:	4b46      	ldr	r3, [pc, #280]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 80086d2:	705a      	strb	r2, [r3, #1]
		oldLinePoses[2] = count;
 80086d4:	4b45      	ldr	r3, [pc, #276]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 80086d6:	1cfa      	adds	r2, r7, #3
 80086d8:	7812      	ldrb	r2, [r2, #0]
 80086da:	709a      	strb	r2, [r3, #2]

		if (currentLength % 2 == 0)
 80086dc:	4b42      	ldr	r3, [pc, #264]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	001a      	movs	r2, r3
 80086e2:	2301      	movs	r3, #1
 80086e4:	4013      	ands	r3, r2
 80086e6:	d105      	bne.n	80086f4 <_Z11CheckButtonRK13GamepadButtonh+0x1a8>
			currentLength++;
 80086e8:	4b3f      	ldr	r3, [pc, #252]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	3301      	adds	r3, #1
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	4b3d      	ldr	r3, [pc, #244]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 80086f2:	701a      	strb	r2, [r3, #0]

		count = 0;
 80086f4:	1cfb      	adds	r3, r7, #3
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
		goingRight = true;
 80086fa:	4b40      	ldr	r3, [pc, #256]	; (80087fc <_Z11CheckButtonRK13GamepadButtonh+0x2b0>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
		yLevel -= 2;
 8008700:	4b3d      	ldr	r3, [pc, #244]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	3b02      	subs	r3, #2
 8008706:	b2da      	uxtb	r2, r3
 8008708:	4b3b      	ldr	r3, [pc, #236]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 800870a:	701a      	strb	r2, [r3, #0]

		if(yLevel < 41)
 800870c:	4b3a      	ldr	r3, [pc, #232]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b28      	cmp	r3, #40	; 0x28
 8008712:	d841      	bhi.n	8008798 <_Z11CheckButtonRK13GamepadButtonh+0x24c>
		{
			yLevel = START_POS;
 8008714:	4b38      	ldr	r3, [pc, #224]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 8008716:	222f      	movs	r2, #47	; 0x2f
 8008718:	701a      	strb	r2, [r3, #0]
			LCD_clrBuffer();
 800871a:	f000 fde7 	bl	80092ec <LCD_clrBuffer>

			for(int i = 1; i < 3; i++)
 800871e:	2301      	movs	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b02      	cmp	r3, #2
 8008726:	dc37      	bgt.n	8008798 <_Z11CheckButtonRK13GamepadButtonh+0x24c>
			{
				LCD_drawHLine(oldLinePoses[i], yLevel, oldLineEndPoses[i] - oldLinePoses[i] + 1);
 8008728:	4a30      	ldr	r2, [pc, #192]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	18d3      	adds	r3, r2, r3
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	0018      	movs	r0, r3
 8008732:	4b31      	ldr	r3, [pc, #196]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	001c      	movs	r4, r3
 8008738:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	18d3      	adds	r3, r2, r3
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	0019      	movs	r1, r3
 8008742:	4a2a      	ldr	r2, [pc, #168]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	1acb      	subs	r3, r1, r3
 800874c:	3301      	adds	r3, #1
 800874e:	001a      	movs	r2, r3
 8008750:	0021      	movs	r1, r4
 8008752:	f000 ff0d 	bl	8009570 <LCD_drawHLine>
				LCD_drawHLine(oldLinePoses[i], yLevel - 1, oldLineEndPoses[i] - oldLinePoses[i] + 1);
 8008756:	4a25      	ldr	r2, [pc, #148]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	18d3      	adds	r3, r2, r3
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	001c      	movs	r4, r3
 8008760:	4b25      	ldr	r3, [pc, #148]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	1e59      	subs	r1, r3, #1
 8008766:	4a1f      	ldr	r2, [pc, #124]	; (80087e4 <_Z11CheckButtonRK13GamepadButtonh+0x298>)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	18d3      	adds	r3, r2, r3
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	0018      	movs	r0, r3
 8008770:	4a1e      	ldr	r2, [pc, #120]	; (80087ec <_Z11CheckButtonRK13GamepadButtonh+0x2a0>)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	18d3      	adds	r3, r2, r3
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	1ac3      	subs	r3, r0, r3
 800877a:	3301      	adds	r3, #1
 800877c:	001a      	movs	r2, r3
 800877e:	0020      	movs	r0, r4
 8008780:	f000 fef6 	bl	8009570 <LCD_drawHLine>
				yLevel -= 2;
 8008784:	4b1c      	ldr	r3, [pc, #112]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	3b02      	subs	r3, #2
 800878a:	b2da      	uxtb	r2, r3
 800878c:	4b1a      	ldr	r3, [pc, #104]	; (80087f8 <_Z11CheckButtonRK13GamepadButtonh+0x2ac>)
 800878e:	701a      	strb	r2, [r3, #0]
			for(int i = 1; i < 3; i++)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3301      	adds	r3, #1
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e7c4      	b.n	8008722 <_Z11CheckButtonRK13GamepadButtonh+0x1d6>
			}
		}

		height++;
 8008798:	4b19      	ldr	r3, [pc, #100]	; (8008800 <_Z11CheckButtonRK13GamepadButtonh+0x2b4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	4b18      	ldr	r3, [pc, #96]	; (8008800 <_Z11CheckButtonRK13GamepadButtonh+0x2b4>)
 80087a0:	601a      	str	r2, [r3, #0]
		score += height * currentLength;
 80087a2:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <_Z11CheckButtonRK13GamepadButtonh+0x29c>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	001a      	movs	r2, r3
 80087a8:	4b15      	ldr	r3, [pc, #84]	; (8008800 <_Z11CheckButtonRK13GamepadButtonh+0x2b4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	435a      	muls	r2, r3
 80087ae:	4b15      	ldr	r3, [pc, #84]	; (8008804 <_Z11CheckButtonRK13GamepadButtonh+0x2b8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	18d2      	adds	r2, r2, r3
 80087b4:	4b13      	ldr	r3, [pc, #76]	; (8008804 <_Z11CheckButtonRK13GamepadButtonh+0x2b8>)
 80087b6:	601a      	str	r2, [r3, #0]

		if(height % 10 == 0)
 80087b8:	4b11      	ldr	r3, [pc, #68]	; (8008800 <_Z11CheckButtonRK13GamepadButtonh+0x2b4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	210a      	movs	r1, #10
 80087be:	0018      	movs	r0, r3
 80087c0:	f7ff fd28 	bl	8008214 <__aeabi_uidivmod>
 80087c4:	1e0b      	subs	r3, r1, #0
 80087c6:	d105      	bne.n	80087d4 <_Z11CheckButtonRK13GamepadButtonh+0x288>
		{
			currentSpeed++;
 80087c8:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <_Z11CheckButtonRK13GamepadButtonh+0x2bc>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	3301      	adds	r3, #1
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <_Z11CheckButtonRK13GamepadButtonh+0x2bc>)
 80087d2:	701a      	strb	r2, [r3, #0]
		}

		LCD_refreshScr();
 80087d4:	f000 fde2 	bl	800939c <LCD_refreshScr>
	}
	return count;
 80087d8:	1cfb      	adds	r3, r7, #3
 80087da:	781b      	ldrb	r3, [r3, #0]
}
 80087dc:	0018      	movs	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	b007      	add	sp, #28
 80087e2:	bd90      	pop	{r4, r7, pc}
 80087e4:	200000fc 	.word	0x200000fc
 80087e8:	20000002 	.word	0x20000002
 80087ec:	20000100 	.word	0x20000100
 80087f0:	200000f0 	.word	0x200000f0
 80087f4:	20000104 	.word	0x20000104
 80087f8:	20000003 	.word	0x20000003
 80087fc:	20000000 	.word	0x20000000
 8008800:	2000010c 	.word	0x2000010c
 8008804:	20000108 	.word	0x20000108
 8008808:	20000001 	.word	0x20000001

0800880c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800880c:	b5b0      	push	{r4, r5, r7, lr}
 800880e:	b090      	sub	sp, #64	; 0x40
 8008810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008812:	f000 ffb7 	bl	8009784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008816:	f000 f9f3 	bl	8008c00 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800881a:	f000 fae1 	bl	8008de0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800881e:	f000 faab 	bl	8008d78 <_ZL19MX_USART2_UART_Initv>
  MX_TIM6_Init();
 8008822:	f000 fa65 	bl	8008cf0 <_ZL12MX_TIM6_Initv>


  /* USER CODE BEGIN 2 */
#ifdef __cplusplus
  UPrint("Setting up game... \r\n");
 8008826:	4be7      	ldr	r3, [pc, #924]	; (8008bc4 <main+0x3b8>)
 8008828:	0018      	movs	r0, r3
 800882a:	f000 fb85 	bl	8008f38 <_Z6UPrintPc>

  HAL_TIM_Base_Start(&htim6);
 800882e:	4be6      	ldr	r3, [pc, #920]	; (8008bc8 <main+0x3bc>)
 8008830:	0018      	movs	r0, r3
 8008832:	f002 fa53 	bl	800acdc <HAL_TIM_Base_Start>

  LCD_setRST(GPIOB, GPIO_PIN_13);
 8008836:	2380      	movs	r3, #128	; 0x80
 8008838:	019b      	lsls	r3, r3, #6
 800883a:	4ae4      	ldr	r2, [pc, #912]	; (8008bcc <main+0x3c0>)
 800883c:	0019      	movs	r1, r3
 800883e:	0010      	movs	r0, r2
 8008840:	f000 fbbc 	bl	8008fbc <LCD_setRST>
  LCD_setCE(GPIOB, GPIO_PIN_14);
 8008844:	2380      	movs	r3, #128	; 0x80
 8008846:	01db      	lsls	r3, r3, #7
 8008848:	4ae0      	ldr	r2, [pc, #896]	; (8008bcc <main+0x3c0>)
 800884a:	0019      	movs	r1, r3
 800884c:	0010      	movs	r0, r2
 800884e:	f000 fbc9 	bl	8008fe4 <LCD_setCE>
  LCD_setDC(GPIOB, GPIO_PIN_15);
 8008852:	2380      	movs	r3, #128	; 0x80
 8008854:	021b      	lsls	r3, r3, #8
 8008856:	4add      	ldr	r2, [pc, #884]	; (8008bcc <main+0x3c0>)
 8008858:	0019      	movs	r1, r3
 800885a:	0010      	movs	r0, r2
 800885c:	f000 fbd6 	bl	800900c <LCD_setDC>
  LCD_setDIN(GPIOB, GPIO_PIN_1);
 8008860:	4bda      	ldr	r3, [pc, #872]	; (8008bcc <main+0x3c0>)
 8008862:	2102      	movs	r1, #2
 8008864:	0018      	movs	r0, r3
 8008866:	f000 fbe5 	bl	8009034 <LCD_setDIN>
  LCD_setCLK(GPIOB, GPIO_PIN_2);
 800886a:	4bd8      	ldr	r3, [pc, #864]	; (8008bcc <main+0x3c0>)
 800886c:	2104      	movs	r1, #4
 800886e:	0018      	movs	r0, r3
 8008870:	f000 fbf4 	bl	800905c <LCD_setCLK>
  LCD_init();
 8008874:	f000 fc96 	bl	80091a4 <LCD_init>


  //DrawLCD(mario_bros_nes_sprite_sheet_2, sizeof(mario_bros_nes_sprite_sheet_2) / sizeof(mario_bros_nes_sprite_sheet_2[0]), 18, 0);
  //LCD_refreshScr();

  GamepadButton BUTTON_Left(GPIOA, GPIO_PIN_7);
 8008878:	23a0      	movs	r3, #160	; 0xa0
 800887a:	05d9      	lsls	r1, r3, #23
 800887c:	232c      	movs	r3, #44	; 0x2c
 800887e:	18fb      	adds	r3, r7, r3
 8008880:	2280      	movs	r2, #128	; 0x80
 8008882:	0018      	movs	r0, r3
 8008884:	f7ff fe10 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_Right(GPIOA, GPIO_PIN_6);
 8008888:	23a0      	movs	r3, #160	; 0xa0
 800888a:	05d9      	lsls	r1, r3, #23
 800888c:	2324      	movs	r3, #36	; 0x24
 800888e:	18fb      	adds	r3, r7, r3
 8008890:	2240      	movs	r2, #64	; 0x40
 8008892:	0018      	movs	r0, r3
 8008894:	f7ff fe08 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  GamepadButton BUTTON_Up(GPIOA, GPIO_PIN_12);
 8008898:	2380      	movs	r3, #128	; 0x80
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	23a0      	movs	r3, #160	; 0xa0
 800889e:	05d9      	lsls	r1, r3, #23
 80088a0:	231c      	movs	r3, #28
 80088a2:	18fb      	adds	r3, r7, r3
 80088a4:	0018      	movs	r0, r3
 80088a6:	f7ff fdff 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_Down(GPIOA, GPIO_PIN_11);
 80088aa:	2380      	movs	r3, #128	; 0x80
 80088ac:	011a      	lsls	r2, r3, #4
 80088ae:	23a0      	movs	r3, #160	; 0xa0
 80088b0:	05d9      	lsls	r1, r3, #23
 80088b2:	2314      	movs	r3, #20
 80088b4:	18fb      	adds	r3, r7, r3
 80088b6:	0018      	movs	r0, r3
 80088b8:	f7ff fdf6 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  GamepadButton BUTTON_A(GPIOC, GPIO_PIN_7);
 80088bc:	49c4      	ldr	r1, [pc, #784]	; (8008bd0 <main+0x3c4>)
 80088be:	230c      	movs	r3, #12
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	2280      	movs	r2, #128	; 0x80
 80088c4:	0018      	movs	r0, r3
 80088c6:	f7ff fdef 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>
  GamepadButton BUTTON_B(GPIOB, GPIO_PIN_6);
 80088ca:	49c0      	ldr	r1, [pc, #768]	; (8008bcc <main+0x3c0>)
 80088cc:	1d3b      	adds	r3, r7, #4
 80088ce:	2240      	movs	r2, #64	; 0x40
 80088d0:	0018      	movs	r0, r3
 80088d2:	f7ff fde9 	bl	80084a8 <_ZN13GamepadButtonC1EP12GPIO_TypeDeft>

  uint8_t count = 0;
 80088d6:	233f      	movs	r3, #63	; 0x3f
 80088d8:	18fb      	adds	r3, r7, r3
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]

  oldLinePoses[2] = (LCD_WIDTH / 2) - ((currentLength - 1) / 2);
 80088de:	4bbd      	ldr	r3, [pc, #756]	; (8008bd4 <main+0x3c8>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	da00      	bge.n	80088ea <main+0xde>
 80088e8:	3301      	adds	r3, #1
 80088ea:	105b      	asrs	r3, r3, #1
 80088ec:	425b      	negs	r3, r3
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	332a      	adds	r3, #42	; 0x2a
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	4bb8      	ldr	r3, [pc, #736]	; (8008bd8 <main+0x3cc>)
 80088f6:	709a      	strb	r2, [r3, #2]
  oldLineEndPoses[2] = oldLinePoses[2] + currentLength - 1;
 80088f8:	4bb7      	ldr	r3, [pc, #732]	; (8008bd8 <main+0x3cc>)
 80088fa:	789a      	ldrb	r2, [r3, #2]
 80088fc:	4bb5      	ldr	r3, [pc, #724]	; (8008bd4 <main+0x3c8>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	18d3      	adds	r3, r2, r3
 8008902:	b2db      	uxtb	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	4bb4      	ldr	r3, [pc, #720]	; (8008bdc <main+0x3d0>)
 800890a:	709a      	strb	r2, [r3, #2]

  LCD_drawHLine(oldLinePoses[2], yLevel, currentLength);
 800890c:	4bb2      	ldr	r3, [pc, #712]	; (8008bd8 <main+0x3cc>)
 800890e:	789b      	ldrb	r3, [r3, #2]
 8008910:	0018      	movs	r0, r3
 8008912:	4bb3      	ldr	r3, [pc, #716]	; (8008be0 <main+0x3d4>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	0019      	movs	r1, r3
 8008918:	4bae      	ldr	r3, [pc, #696]	; (8008bd4 <main+0x3c8>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	001a      	movs	r2, r3
 800891e:	f000 fe27 	bl	8009570 <LCD_drawHLine>
  LCD_drawHLine(oldLinePoses[2], yLevel - 1, currentLength);
 8008922:	4bad      	ldr	r3, [pc, #692]	; (8008bd8 <main+0x3cc>)
 8008924:	789b      	ldrb	r3, [r3, #2]
 8008926:	0018      	movs	r0, r3
 8008928:	4bad      	ldr	r3, [pc, #692]	; (8008be0 <main+0x3d4>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	1e59      	subs	r1, r3, #1
 800892e:	4ba9      	ldr	r3, [pc, #676]	; (8008bd4 <main+0x3c8>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	001a      	movs	r2, r3
 8008934:	f000 fe1c 	bl	8009570 <LCD_drawHLine>

  oldLinePoses[2]--;
 8008938:	4ba7      	ldr	r3, [pc, #668]	; (8008bd8 <main+0x3cc>)
 800893a:	789b      	ldrb	r3, [r3, #2]
 800893c:	3b01      	subs	r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	4ba5      	ldr	r3, [pc, #660]	; (8008bd8 <main+0x3cc>)
 8008942:	709a      	strb	r2, [r3, #2]
  yLevel -= 2;
 8008944:	4ba6      	ldr	r3, [pc, #664]	; (8008be0 <main+0x3d4>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	3b02      	subs	r3, #2
 800894a:	b2da      	uxtb	r2, r3
 800894c:	4ba4      	ldr	r3, [pc, #656]	; (8008be0 <main+0x3d4>)
 800894e:	701a      	strb	r2, [r3, #0]

  LCD_refreshScr();
 8008950:	f000 fd24 	bl	800939c <LCD_refreshScr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		BUTTON_Left.UpdateButton();
 8008954:	232c      	movs	r3, #44	; 0x2c
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	0018      	movs	r0, r3
 800895a:	f7ff fdd0 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_Right.UpdateButton();
 800895e:	2324      	movs	r3, #36	; 0x24
 8008960:	18fb      	adds	r3, r7, r3
 8008962:	0018      	movs	r0, r3
 8008964:	f7ff fdcb 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_Up.UpdateButton();
 8008968:	231c      	movs	r3, #28
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	0018      	movs	r0, r3
 800896e:	f7ff fdc6 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_Down.UpdateButton();
 8008972:	2314      	movs	r3, #20
 8008974:	18fb      	adds	r3, r7, r3
 8008976:	0018      	movs	r0, r3
 8008978:	f7ff fdc1 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_A.UpdateButton();
 800897c:	230c      	movs	r3, #12
 800897e:	18fb      	adds	r3, r7, r3
 8008980:	0018      	movs	r0, r3
 8008982:	f7ff fdbc 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>
		BUTTON_B.UpdateButton();
 8008986:	1d3b      	adds	r3, r7, #4
 8008988:	0018      	movs	r0, r3
 800898a:	f7ff fdb8 	bl	80084fe <_ZN13GamepadButton12UpdateButtonEv>

		LCD_drawHLine(count, yLevel, currentLength);
 800898e:	243f      	movs	r4, #63	; 0x3f
 8008990:	193b      	adds	r3, r7, r4
 8008992:	7818      	ldrb	r0, [r3, #0]
 8008994:	4b92      	ldr	r3, [pc, #584]	; (8008be0 <main+0x3d4>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	0019      	movs	r1, r3
 800899a:	4b8e      	ldr	r3, [pc, #568]	; (8008bd4 <main+0x3c8>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	001a      	movs	r2, r3
 80089a0:	f000 fde6 	bl	8009570 <LCD_drawHLine>
		LCD_drawHLine(count, yLevel - 1, currentLength);
 80089a4:	193b      	adds	r3, r7, r4
 80089a6:	7818      	ldrb	r0, [r3, #0]
 80089a8:	4b8d      	ldr	r3, [pc, #564]	; (8008be0 <main+0x3d4>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	1e59      	subs	r1, r3, #1
 80089ae:	4b89      	ldr	r3, [pc, #548]	; (8008bd4 <main+0x3c8>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	001a      	movs	r2, r3
 80089b4:	f000 fddc 	bl	8009570 <LCD_drawHLine>

		  itoa((int) score, scoreText, 10);
 80089b8:	4b8a      	ldr	r3, [pc, #552]	; (8008be4 <main+0x3d8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	0018      	movs	r0, r3
 80089be:	4b8a      	ldr	r3, [pc, #552]	; (8008be8 <main+0x3dc>)
 80089c0:	220a      	movs	r2, #10
 80089c2:	0019      	movs	r1, r3
 80089c4:	f003 f828 	bl	800ba18 <itoa>
		  LCD_print(scoreText, 0, 0);
 80089c8:	4b87      	ldr	r3, [pc, #540]	; (8008be8 <main+0x3dc>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	0018      	movs	r0, r3
 80089d0:	f000 fc66 	bl	80092a0 <LCD_print>

		if(!gameOver)
 80089d4:	4b85      	ldr	r3, [pc, #532]	; (8008bec <main+0x3e0>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2201      	movs	r2, #1
 80089da:	4053      	eors	r3, r2
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d100      	bne.n	80089e4 <main+0x1d8>
 80089e2:	e0c3      	b.n	8008b6c <main+0x360>
		{
			if(goingRight)
 80089e4:	4b82      	ldr	r3, [pc, #520]	; (8008bf0 <main+0x3e4>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d05d      	beq.n	8008aa8 <main+0x29c>
			{
			  for(int i = 0; i < currentSpeed; i++)
 80089ec:	2300      	movs	r3, #0
 80089ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80089f0:	4b80      	ldr	r3, [pc, #512]	; (8008bf4 <main+0x3e8>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	001a      	movs	r2, r3
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	4293      	cmp	r3, r2
 80089fa:	da1e      	bge.n	8008a3a <main+0x22e>
			  {
				  LCD_setPixel(count - i, yLevel, false);
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	243f      	movs	r4, #63	; 0x3f
 8008a02:	193a      	adds	r2, r7, r4
 8008a04:	7812      	ldrb	r2, [r2, #0]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	b2d8      	uxtb	r0, r3
 8008a0a:	4b75      	ldr	r3, [pc, #468]	; (8008be0 <main+0x3d4>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	0019      	movs	r1, r3
 8008a12:	f000 fd45 	bl	80094a0 <LCD_setPixel>
				  LCD_setPixel(count - i, yLevel - 1, false);
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	193a      	adds	r2, r7, r4
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	b2d8      	uxtb	r0, r3
 8008a22:	4b6f      	ldr	r3, [pc, #444]	; (8008be0 <main+0x3d4>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	0019      	movs	r1, r3
 8008a2e:	f000 fd37 	bl	80094a0 <LCD_setPixel>
			  for(int i = 0; i < currentSpeed; i++)
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	3301      	adds	r3, #1
 8008a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a38:	e7da      	b.n	80089f0 <main+0x1e4>
			  }
			  LCD_refreshArea(count - currentSpeed, yLevel - 1, count + currentLength, yLevel);
 8008a3a:	4b6e      	ldr	r3, [pc, #440]	; (8008bf4 <main+0x3e8>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	253f      	movs	r5, #63	; 0x3f
 8008a40:	197a      	adds	r2, r7, r5
 8008a42:	7812      	ldrb	r2, [r2, #0]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	b2d8      	uxtb	r0, r3
 8008a48:	4b65      	ldr	r3, [pc, #404]	; (8008be0 <main+0x3d4>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b2d9      	uxtb	r1, r3
 8008a50:	4b60      	ldr	r3, [pc, #384]	; (8008bd4 <main+0x3c8>)
 8008a52:	781a      	ldrb	r2, [r3, #0]
 8008a54:	197b      	adds	r3, r7, r5
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	18d3      	adds	r3, r2, r3
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	4b60      	ldr	r3, [pc, #384]	; (8008be0 <main+0x3d4>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f000 fcc8 	bl	80093f4 <LCD_refreshArea>

			  count = CheckButton(BUTTON_A, count);
 8008a64:	197c      	adds	r4, r7, r5
 8008a66:	197b      	adds	r3, r7, r5
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	230c      	movs	r3, #12
 8008a6c:	18fb      	adds	r3, r7, r3
 8008a6e:	0011      	movs	r1, r2
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff fd6b 	bl	800854c <_Z11CheckButtonRK13GamepadButtonh>
 8008a76:	0003      	movs	r3, r0
 8008a78:	7023      	strb	r3, [r4, #0]

			  count += currentSpeed;
 8008a7a:	4b5e      	ldr	r3, [pc, #376]	; (8008bf4 <main+0x3e8>)
 8008a7c:	7819      	ldrb	r1, [r3, #0]
 8008a7e:	197b      	adds	r3, r7, r5
 8008a80:	197a      	adds	r2, r7, r5
 8008a82:	7812      	ldrb	r2, [r2, #0]
 8008a84:	188a      	adds	r2, r1, r2
 8008a86:	701a      	strb	r2, [r3, #0]

			  if(count + currentLength >= LCD_WIDTH - xLimit - 16)
 8008a88:	197b      	adds	r3, r7, r5
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	4a51      	ldr	r2, [pc, #324]	; (8008bd4 <main+0x3c8>)
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	189a      	adds	r2, r3, r2
 8008a92:	4b59      	ldr	r3, [pc, #356]	; (8008bf8 <main+0x3ec>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	0019      	movs	r1, r3
 8008a98:	2344      	movs	r3, #68	; 0x44
 8008a9a:	1a5b      	subs	r3, r3, r1
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	db72      	blt.n	8008b86 <main+0x37a>
			  {
				  goingRight = false;
 8008aa0:	4b53      	ldr	r3, [pc, #332]	; (8008bf0 <main+0x3e4>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	701a      	strb	r2, [r3, #0]
 8008aa6:	e06e      	b.n	8008b86 <main+0x37a>
			  }
			}
			else
			{
			  for(int i = 0; i < currentSpeed; i++)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8008aac:	4b51      	ldr	r3, [pc, #324]	; (8008bf4 <main+0x3e8>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	da26      	bge.n	8008b06 <main+0x2fa>
			  {
				  LCD_setPixel(count + currentLength + i, yLevel, false);
 8008ab8:	4b46      	ldr	r3, [pc, #280]	; (8008bd4 <main+0x3c8>)
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	243f      	movs	r4, #63	; 0x3f
 8008abe:	193b      	adds	r3, r7, r4
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	18d3      	adds	r3, r2, r3
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	18d3      	adds	r3, r2, r3
 8008acc:	b2d8      	uxtb	r0, r3
 8008ace:	4b44      	ldr	r3, [pc, #272]	; (8008be0 <main+0x3d4>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	0019      	movs	r1, r3
 8008ad6:	f000 fce3 	bl	80094a0 <LCD_setPixel>
				  LCD_setPixel(count + currentLength + i, yLevel - 1, false);
 8008ada:	4b3e      	ldr	r3, [pc, #248]	; (8008bd4 <main+0x3c8>)
 8008adc:	781a      	ldrb	r2, [r3, #0]
 8008ade:	193b      	adds	r3, r7, r4
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	18d3      	adds	r3, r2, r3
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	18d3      	adds	r3, r2, r3
 8008aec:	b2d8      	uxtb	r0, r3
 8008aee:	4b3c      	ldr	r3, [pc, #240]	; (8008be0 <main+0x3d4>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2200      	movs	r2, #0
 8008af8:	0019      	movs	r1, r3
 8008afa:	f000 fcd1 	bl	80094a0 <LCD_setPixel>
			  for(int i = 0; i < currentSpeed; i++)
 8008afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b00:	3301      	adds	r3, #1
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
 8008b04:	e7d2      	b.n	8008aac <main+0x2a0>
			  }
			  LCD_refreshArea(count, yLevel - 1, count + currentLength + currentSpeed, yLevel);
 8008b06:	4b36      	ldr	r3, [pc, #216]	; (8008be0 <main+0x3d4>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b2d9      	uxtb	r1, r3
 8008b0e:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <main+0x3c8>)
 8008b10:	781a      	ldrb	r2, [r3, #0]
 8008b12:	253f      	movs	r5, #63	; 0x3f
 8008b14:	197b      	adds	r3, r7, r5
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	18d3      	adds	r3, r2, r3
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	4b35      	ldr	r3, [pc, #212]	; (8008bf4 <main+0x3e8>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	18d3      	adds	r3, r2, r3
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <main+0x3d4>)
 8008b26:	781c      	ldrb	r4, [r3, #0]
 8008b28:	197b      	adds	r3, r7, r5
 8008b2a:	7818      	ldrb	r0, [r3, #0]
 8008b2c:	0023      	movs	r3, r4
 8008b2e:	f000 fc61 	bl	80093f4 <LCD_refreshArea>

			  count = CheckButton(BUTTON_A, count);
 8008b32:	197c      	adds	r4, r7, r5
 8008b34:	197b      	adds	r3, r7, r5
 8008b36:	781a      	ldrb	r2, [r3, #0]
 8008b38:	230c      	movs	r3, #12
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	0011      	movs	r1, r2
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f7ff fd04 	bl	800854c <_Z11CheckButtonRK13GamepadButtonh>
 8008b44:	0003      	movs	r3, r0
 8008b46:	7023      	strb	r3, [r4, #0]

			  count -= currentSpeed;
 8008b48:	4b2a      	ldr	r3, [pc, #168]	; (8008bf4 <main+0x3e8>)
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	197b      	adds	r3, r7, r5
 8008b4e:	1979      	adds	r1, r7, r5
 8008b50:	7809      	ldrb	r1, [r1, #0]
 8008b52:	1a8a      	subs	r2, r1, r2
 8008b54:	701a      	strb	r2, [r3, #0]

			  if(count <= xLimit + 8)
 8008b56:	197b      	adds	r3, r7, r5
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	4b27      	ldr	r3, [pc, #156]	; (8008bf8 <main+0x3ec>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dc10      	bgt.n	8008b86 <main+0x37a>
			  {
				  goingRight = true;
 8008b64:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <main+0x3e4>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	e00c      	b.n	8008b86 <main+0x37a>

			}
		}
		else
		{
			LCD_print("GameOver...", 8, 32);
 8008b6c:	4b23      	ldr	r3, [pc, #140]	; (8008bfc <main+0x3f0>)
 8008b6e:	2220      	movs	r2, #32
 8008b70:	2108      	movs	r1, #8
 8008b72:	0018      	movs	r0, r3
 8008b74:	f000 fb94 	bl	80092a0 <LCD_print>

			if(BUTTON_A.IsPressing)
 8008b78:	230c      	movs	r3, #12
 8008b7a:	18fb      	adds	r3, r7, r3
 8008b7c:	79db      	ldrb	r3, [r3, #7]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <main+0x37a>
			{
				ResetGame();
 8008b82:	f000 fa05 	bl	8008f90 <_ZL9ResetGamev>
			}
		}

		  itoa((int) score, scoreText, 10);
 8008b86:	4b17      	ldr	r3, [pc, #92]	; (8008be4 <main+0x3d8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	4b16      	ldr	r3, [pc, #88]	; (8008be8 <main+0x3dc>)
 8008b8e:	220a      	movs	r2, #10
 8008b90:	0019      	movs	r1, r3
 8008b92:	f002 ff41 	bl	800ba18 <itoa>
		  LCD_print(scoreText, 0, 0);
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <main+0x3dc>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f000 fb7f 	bl	80092a0 <LCD_print>


	while(4000 > __HAL_TIM_GET_COUNTER(&htim6)); //wait for 25fps
 8008ba2:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <main+0x3bc>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ba8:	23fa      	movs	r3, #250	; 0xfa
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	429a      	cmp	r2, r3
 8008bae:	419b      	sbcs	r3, r3
 8008bb0:	425b      	negs	r3, r3
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d000      	beq.n	8008bba <main+0x3ae>
 8008bb8:	e7f3      	b.n	8008ba2 <main+0x396>

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8008bba:	4b03      	ldr	r3, [pc, #12]	; (8008bc8 <main+0x3bc>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	625a      	str	r2, [r3, #36]	; 0x24



    /* USER CODE BEGIN 3 */

	}
 8008bc2:	e6c7      	b.n	8008954 <main+0x148>
 8008bc4:	0800bac8 	.word	0x0800bac8
 8008bc8:	2000002c 	.word	0x2000002c
 8008bcc:	50000400 	.word	0x50000400
 8008bd0:	50000800 	.word	0x50000800
 8008bd4:	20000002 	.word	0x20000002
 8008bd8:	20000100 	.word	0x20000100
 8008bdc:	200000fc 	.word	0x200000fc
 8008be0:	20000003 	.word	0x20000003
 8008be4:	20000108 	.word	0x20000108
 8008be8:	200000f4 	.word	0x200000f4
 8008bec:	200000f0 	.word	0x200000f0
 8008bf0:	20000000 	.word	0x20000000
 8008bf4:	20000001 	.word	0x20000001
 8008bf8:	20000103 	.word	0x20000103
 8008bfc:	0800bae0 	.word	0x0800bae0

08008c00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c00:	b590      	push	{r4, r7, lr}
 8008c02:	b09f      	sub	sp, #124	; 0x7c
 8008c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c06:	2440      	movs	r4, #64	; 0x40
 8008c08:	193b      	adds	r3, r7, r4
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	2338      	movs	r3, #56	; 0x38
 8008c0e:	001a      	movs	r2, r3
 8008c10:	2100      	movs	r1, #0
 8008c12:	f002 ff05 	bl	800ba20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c16:	232c      	movs	r3, #44	; 0x2c
 8008c18:	18fb      	adds	r3, r7, r3
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	2314      	movs	r3, #20
 8008c1e:	001a      	movs	r2, r3
 8008c20:	2100      	movs	r1, #0
 8008c22:	f002 fefd 	bl	800ba20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c26:	1d3b      	adds	r3, r7, #4
 8008c28:	0018      	movs	r0, r3
 8008c2a:	2328      	movs	r3, #40	; 0x28
 8008c2c:	001a      	movs	r2, r3
 8008c2e:	2100      	movs	r1, #0
 8008c30:	f002 fef6 	bl	800ba20 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c34:	4b2c      	ldr	r3, [pc, #176]	; (8008ce8 <_Z18SystemClock_Configv+0xe8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a2c      	ldr	r2, [pc, #176]	; (8008cec <_Z18SystemClock_Configv+0xec>)
 8008c3a:	401a      	ands	r2, r3
 8008c3c:	4b2a      	ldr	r3, [pc, #168]	; (8008ce8 <_Z18SystemClock_Configv+0xe8>)
 8008c3e:	2180      	movs	r1, #128	; 0x80
 8008c40:	0109      	lsls	r1, r1, #4
 8008c42:	430a      	orrs	r2, r1
 8008c44:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008c46:	0021      	movs	r1, r4
 8008c48:	187b      	adds	r3, r7, r1
 8008c4a:	2210      	movs	r2, #16
 8008c4c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008c4e:	187b      	adds	r3, r7, r1
 8008c50:	2201      	movs	r2, #1
 8008c52:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008c54:	187b      	adds	r3, r7, r1
 8008c56:	2200      	movs	r2, #0
 8008c58:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8008c5a:	187b      	adds	r3, r7, r1
 8008c5c:	22a0      	movs	r2, #160	; 0xa0
 8008c5e:	0212      	lsls	r2, r2, #8
 8008c60:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008c62:	187b      	adds	r3, r7, r1
 8008c64:	2200      	movs	r2, #0
 8008c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c68:	187b      	adds	r3, r7, r1
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	f001 f88a 	bl	8009d84 <HAL_RCC_OscConfig>
 8008c70:	0003      	movs	r3, r0
 8008c72:	1e5a      	subs	r2, r3, #1
 8008c74:	4193      	sbcs	r3, r2
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8008c7c:	f000 f998 	bl	8008fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c80:	212c      	movs	r1, #44	; 0x2c
 8008c82:	187b      	adds	r3, r7, r1
 8008c84:	220f      	movs	r2, #15
 8008c86:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8008c88:	187b      	adds	r3, r7, r1
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c8e:	187b      	adds	r3, r7, r1
 8008c90:	2200      	movs	r2, #0
 8008c92:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008c94:	187b      	adds	r3, r7, r1
 8008c96:	2200      	movs	r2, #0
 8008c98:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c9a:	187b      	adds	r3, r7, r1
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f001 fc41 	bl	800a52c <HAL_RCC_ClockConfig>
 8008caa:	0003      	movs	r3, r0
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	4193      	sbcs	r3, r2
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8008cb6:	f000 f97b 	bl	8008fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008cba:	1d3b      	adds	r3, r7, #4
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008cc0:	1d3b      	adds	r3, r7, #4
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008cc6:	1d3b      	adds	r3, r7, #4
 8008cc8:	0018      	movs	r0, r3
 8008cca:	f001 fe53 	bl	800a974 <HAL_RCCEx_PeriphCLKConfig>
 8008cce:	0003      	movs	r3, r0
 8008cd0:	1e5a      	subs	r2, r3, #1
 8008cd2:	4193      	sbcs	r3, r2
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8008cda:	f000 f969 	bl	8008fb0 <Error_Handler>
  }
}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b01f      	add	sp, #124	; 0x7c
 8008ce4:	bd90      	pop	{r4, r7, pc}
 8008ce6:	46c0      	nop			; (mov r8, r8)
 8008ce8:	40007000 	.word	0x40007000
 8008cec:	ffffe7ff 	.word	0xffffe7ff

08008cf0 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cf6:	003b      	movs	r3, r7
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	001a      	movs	r2, r3
 8008cfe:	2100      	movs	r1, #0
 8008d00:	f002 fe8e 	bl	800ba20 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008d04:	4b19      	ldr	r3, [pc, #100]	; (8008d6c <_ZL12MX_TIM6_Initv+0x7c>)
 8008d06:	4a1a      	ldr	r2, [pc, #104]	; (8008d70 <_ZL12MX_TIM6_Initv+0x80>)
 8008d08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80 - 1;
 8008d0a:	4b18      	ldr	r3, [pc, #96]	; (8008d6c <_ZL12MX_TIM6_Initv+0x7c>)
 8008d0c:	224f      	movs	r2, #79	; 0x4f
 8008d0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d10:	4b16      	ldr	r3, [pc, #88]	; (8008d6c <_ZL12MX_TIM6_Initv+0x7c>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8008d16:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <_ZL12MX_TIM6_Initv+0x7c>)
 8008d18:	4a16      	ldr	r2, [pc, #88]	; (8008d74 <_ZL12MX_TIM6_Initv+0x84>)
 8008d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d1c:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <_ZL12MX_TIM6_Initv+0x7c>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008d22:	4b12      	ldr	r3, [pc, #72]	; (8008d6c <_ZL12MX_TIM6_Initv+0x7c>)
 8008d24:	0018      	movs	r0, r3
 8008d26:	f001 ff99 	bl	800ac5c <HAL_TIM_Base_Init>
 8008d2a:	0003      	movs	r3, r0
 8008d2c:	1e5a      	subs	r2, r3, #1
 8008d2e:	4193      	sbcs	r3, r2
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8008d36:	f000 f93b 	bl	8008fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d3a:	003b      	movs	r3, r7
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d40:	003b      	movs	r3, r7
 8008d42:	2200      	movs	r2, #0
 8008d44:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008d46:	003a      	movs	r2, r7
 8008d48:	4b08      	ldr	r3, [pc, #32]	; (8008d6c <_ZL12MX_TIM6_Initv+0x7c>)
 8008d4a:	0011      	movs	r1, r2
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f002 f86d 	bl	800ae2c <HAL_TIMEx_MasterConfigSynchronization>
 8008d52:	0003      	movs	r3, r0
 8008d54:	1e5a      	subs	r2, r3, #1
 8008d56:	4193      	sbcs	r3, r2
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <_ZL12MX_TIM6_Initv+0x72>
  {
    Error_Handler();
 8008d5e:	f000 f927 	bl	8008fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	46bd      	mov	sp, r7
 8008d66:	b002      	add	sp, #8
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	2000002c 	.word	0x2000002c
 8008d70:	40001000 	.word	0x40001000
 8008d74:	0000ffff 	.word	0x0000ffff

08008d78 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008d7c:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008d7e:	4a17      	ldr	r2, [pc, #92]	; (8008ddc <_ZL19MX_USART2_UART_Initv+0x64>)
 8008d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008d82:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008d84:	22e1      	movs	r2, #225	; 0xe1
 8008d86:	0252      	lsls	r2, r2, #9
 8008d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008d90:	4b11      	ldr	r3, [pc, #68]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008d96:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008d9e:	220c      	movs	r2, #12
 8008da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008da2:	4b0d      	ldr	r3, [pc, #52]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008da8:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008dae:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008db4:	4b08      	ldr	r3, [pc, #32]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008dba:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	f002 f893 	bl	800aee8 <HAL_UART_Init>
 8008dc2:	0003      	movs	r3, r0
 8008dc4:	1e5a      	subs	r2, r3, #1
 8008dc6:	4193      	sbcs	r3, r2
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8008dce:	f000 f8ef 	bl	8008fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	2000006c 	.word	0x2000006c
 8008ddc:	40004400 	.word	0x40004400

08008de0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008de0:	b590      	push	{r4, r7, lr}
 8008de2:	b08b      	sub	sp, #44	; 0x2c
 8008de4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de6:	2414      	movs	r4, #20
 8008de8:	193b      	adds	r3, r7, r4
 8008dea:	0018      	movs	r0, r3
 8008dec:	2314      	movs	r3, #20
 8008dee:	001a      	movs	r2, r3
 8008df0:	2100      	movs	r1, #0
 8008df2:	f002 fe15 	bl	800ba20 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008df6:	4b4c      	ldr	r3, [pc, #304]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfa:	4b4b      	ldr	r3, [pc, #300]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008dfc:	2104      	movs	r1, #4
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e02:	4b49      	ldr	r3, [pc, #292]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	2204      	movs	r2, #4
 8008e08:	4013      	ands	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e0e:	4b46      	ldr	r3, [pc, #280]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e12:	4b45      	ldr	r3, [pc, #276]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e14:	2180      	movs	r1, #128	; 0x80
 8008e16:	430a      	orrs	r2, r1
 8008e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e1a:	4b43      	ldr	r3, [pc, #268]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	2280      	movs	r2, #128	; 0x80
 8008e20:	4013      	ands	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e26:	4b40      	ldr	r3, [pc, #256]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	4b3f      	ldr	r3, [pc, #252]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e32:	4b3d      	ldr	r3, [pc, #244]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	2201      	movs	r2, #1
 8008e38:	4013      	ands	r3, r2
 8008e3a:	60bb      	str	r3, [r7, #8]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e3e:	4b3a      	ldr	r3, [pc, #232]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e42:	4b39      	ldr	r3, [pc, #228]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e44:	2102      	movs	r1, #2
 8008e46:	430a      	orrs	r2, r1
 8008e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e4a:	4b37      	ldr	r3, [pc, #220]	; (8008f28 <_ZL12MX_GPIO_Initv+0x148>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	2202      	movs	r2, #2
 8008e50:	4013      	ands	r3, r2
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008e56:	23a0      	movs	r3, #160	; 0xa0
 8008e58:	05db      	lsls	r3, r3, #23
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2120      	movs	r1, #32
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f000 ff73 	bl	8009d4a <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8008e64:	4931      	ldr	r1, [pc, #196]	; (8008f2c <_ZL12MX_GPIO_Initv+0x14c>)
 8008e66:	4b32      	ldr	r3, [pc, #200]	; (8008f30 <_ZL12MX_GPIO_Initv+0x150>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	f000 ff6d 	bl	8009d4a <HAL_GPIO_WritePin>
	                          |GPIO_PIN_15, GPIO_PIN_RESET);

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8008e70:	193b      	adds	r3, r7, r4
 8008e72:	2280      	movs	r2, #128	; 0x80
 8008e74:	0192      	lsls	r2, r2, #6
 8008e76:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008e78:	193b      	adds	r3, r7, r4
 8008e7a:	2284      	movs	r2, #132	; 0x84
 8008e7c:	0392      	lsls	r2, r2, #14
 8008e7e:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e80:	193b      	adds	r3, r7, r4
 8008e82:	2200      	movs	r2, #0
 8008e84:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008e86:	193b      	adds	r3, r7, r4
 8008e88:	4a2a      	ldr	r2, [pc, #168]	; (8008f34 <_ZL12MX_GPIO_Initv+0x154>)
 8008e8a:	0019      	movs	r1, r3
 8008e8c:	0010      	movs	r0, r2
 8008e8e:	f000 fdc1 	bl	8009a14 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PC1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008e92:	193b      	adds	r3, r7, r4
 8008e94:	2202      	movs	r2, #2
 8008e96:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e98:	193b      	adds	r3, r7, r4
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e9e:	193b      	adds	r3, r7, r4
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ea4:	193b      	adds	r3, r7, r4
 8008ea6:	4a23      	ldr	r2, [pc, #140]	; (8008f34 <_ZL12MX_GPIO_Initv+0x154>)
 8008ea8:	0019      	movs	r1, r3
 8008eaa:	0010      	movs	r0, r2
 8008eac:	f000 fdb2 	bl	8009a14 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 8008eb0:	193b      	adds	r3, r7, r4
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008eb6:	193b      	adds	r3, r7, r4
 8008eb8:	2201      	movs	r2, #1
 8008eba:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ebc:	193b      	adds	r3, r7, r4
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ec2:	193b      	adds	r3, r7, r4
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008ec8:	193a      	adds	r2, r7, r4
 8008eca:	23a0      	movs	r3, #160	; 0xa0
 8008ecc:	05db      	lsls	r3, r3, #23
 8008ece:	0011      	movs	r1, r2
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	f000 fd9f 	bl	8009a14 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB1 PB2 PB13 PB14
	                           PB15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8008ed6:	193b      	adds	r3, r7, r4
 8008ed8:	4a14      	ldr	r2, [pc, #80]	; (8008f2c <_ZL12MX_GPIO_Initv+0x14c>)
 8008eda:	601a      	str	r2, [r3, #0]
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008edc:	193b      	adds	r3, r7, r4
 8008ede:	2201      	movs	r2, #1
 8008ee0:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee2:	193b      	adds	r3, r7, r4
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ee8:	193b      	adds	r3, r7, r4
 8008eea:	2203      	movs	r2, #3
 8008eec:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eee:	193b      	adds	r3, r7, r4
 8008ef0:	4a0f      	ldr	r2, [pc, #60]	; (8008f30 <_ZL12MX_GPIO_Initv+0x150>)
 8008ef2:	0019      	movs	r1, r3
 8008ef4:	0010      	movs	r0, r2
 8008ef6:	f000 fd8d 	bl	8009a14 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA8 PA9 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8008efa:	0021      	movs	r1, r4
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	2283      	movs	r2, #131	; 0x83
 8008f00:	0212      	lsls	r2, r2, #8
 8008f02:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f04:	187b      	adds	r3, r7, r1
 8008f06:	2200      	movs	r2, #0
 8008f08:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f10:	187a      	adds	r2, r7, r1
 8008f12:	23a0      	movs	r3, #160	; 0xa0
 8008f14:	05db      	lsls	r3, r3, #23
 8008f16:	0011      	movs	r1, r2
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f000 fd7b 	bl	8009a14 <HAL_GPIO_Init>

}
 8008f1e:	46c0      	nop			; (mov r8, r8)
 8008f20:	46bd      	mov	sp, r7
 8008f22:	b00b      	add	sp, #44	; 0x2c
 8008f24:	bd90      	pop	{r4, r7, pc}
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	40021000 	.word	0x40021000
 8008f2c:	0000e006 	.word	0x0000e006
 8008f30:	50000400 	.word	0x50000400
 8008f34:	50000800 	.word	0x50000800

08008f38 <_Z6UPrintPc>:

/* USER CODE BEGIN 4 */
void UPrint(char _out[])
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) _out, length_of_string(_out),10);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	0018      	movs	r0, r3
 8008f44:	f000 f80e 	bl	8008f64 <_Z16length_of_stringPc>
 8008f48:	0003      	movs	r3, r0
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	4804      	ldr	r0, [pc, #16]	; (8008f60 <_Z6UPrintPc+0x28>)
 8008f50:	230a      	movs	r3, #10
 8008f52:	f002 f81d 	bl	800af90 <HAL_UART_Transmit>
}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	b002      	add	sp, #8
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	2000006c 	.word	0x2000006c

08008f64 <_Z16length_of_stringPc>:

int length_of_string(char* p) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
    int count = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]

    while (*p != '\0') {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d006      	beq.n	8008f86 <_Z16length_of_stringPc+0x22>
        count++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	60fb      	str	r3, [r7, #12]
        p++;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3301      	adds	r3, #1
 8008f82:	607b      	str	r3, [r7, #4]
    while (*p != '\0') {
 8008f84:	e7f4      	b.n	8008f70 <_Z16length_of_stringPc+0xc>
    }

    return count;
 8008f86:	68fb      	ldr	r3, [r7, #12]
}
 8008f88:	0018      	movs	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b004      	add	sp, #16
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZL9ResetGamev>:

static void ResetGame ( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0

    uint32_t reset_handler_add = *((volatile uint32_t *)(0x08008000 + 4));
 8008f96:	4b05      	ldr	r3, [pc, #20]	; (8008fac <_ZL9ResetGamev+0x1c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	607b      	str	r3, [r7, #4]
    void (*app_reset_handler)(void) = (void (*)(void))reset_handler_add;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	603b      	str	r3, [r7, #0]
    app_reset_handler();
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	4798      	blx	r3
}
 8008fa4:	46c0      	nop			; (mov r8, r8)
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	b002      	add	sp, #8
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	08008004 	.word	0x08008004

08008fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008fb4:	b672      	cpsid	i
}
 8008fb6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008fb8:	e7fe      	b.n	8008fb8 <Error_Handler+0x8>
	...

08008fbc <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	000a      	movs	r2, r1
 8008fc6:	1cbb      	adds	r3, r7, #2
 8008fc8:	801a      	strh	r2, [r3, #0]
	lcd_gpio.RSTPORT = PORT;
 8008fca:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <LCD_setRST+0x24>)
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	601a      	str	r2, [r3, #0]
	lcd_gpio.RSTPIN = PIN;
 8008fd0:	4b03      	ldr	r3, [pc, #12]	; (8008fe0 <LCD_setRST+0x24>)
 8008fd2:	1cba      	adds	r2, r7, #2
 8008fd4:	8812      	ldrh	r2, [r2, #0]
 8008fd6:	809a      	strh	r2, [r3, #4]
}
 8008fd8:	46c0      	nop			; (mov r8, r8)
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	b002      	add	sp, #8
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	2000030c 	.word	0x2000030c

08008fe4 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	000a      	movs	r2, r1
 8008fee:	1cbb      	adds	r3, r7, #2
 8008ff0:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CEPORT = PORT;
 8008ff2:	4b05      	ldr	r3, [pc, #20]	; (8009008 <LCD_setCE+0x24>)
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	609a      	str	r2, [r3, #8]
	lcd_gpio.CEPIN = PIN;
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <LCD_setCE+0x24>)
 8008ffa:	1cba      	adds	r2, r7, #2
 8008ffc:	8812      	ldrh	r2, [r2, #0]
 8008ffe:	819a      	strh	r2, [r3, #12]
}
 8009000:	46c0      	nop			; (mov r8, r8)
 8009002:	46bd      	mov	sp, r7
 8009004:	b002      	add	sp, #8
 8009006:	bd80      	pop	{r7, pc}
 8009008:	2000030c 	.word	0x2000030c

0800900c <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	000a      	movs	r2, r1
 8009016:	1cbb      	adds	r3, r7, #2
 8009018:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DCPORT = PORT;
 800901a:	4b05      	ldr	r3, [pc, #20]	; (8009030 <LCD_setDC+0x24>)
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	611a      	str	r2, [r3, #16]
	lcd_gpio.DCPIN = PIN;
 8009020:	4b03      	ldr	r3, [pc, #12]	; (8009030 <LCD_setDC+0x24>)
 8009022:	1cba      	adds	r2, r7, #2
 8009024:	8812      	ldrh	r2, [r2, #0]
 8009026:	829a      	strh	r2, [r3, #20]
}
 8009028:	46c0      	nop			; (mov r8, r8)
 800902a:	46bd      	mov	sp, r7
 800902c:	b002      	add	sp, #8
 800902e:	bd80      	pop	{r7, pc}
 8009030:	2000030c 	.word	0x2000030c

08009034 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	000a      	movs	r2, r1
 800903e:	1cbb      	adds	r3, r7, #2
 8009040:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DINPORT = PORT;
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <LCD_setDIN+0x24>)
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	619a      	str	r2, [r3, #24]
	lcd_gpio.DINPIN = PIN;
 8009048:	4b03      	ldr	r3, [pc, #12]	; (8009058 <LCD_setDIN+0x24>)
 800904a:	1cba      	adds	r2, r7, #2
 800904c:	8812      	ldrh	r2, [r2, #0]
 800904e:	839a      	strh	r2, [r3, #28]
}
 8009050:	46c0      	nop			; (mov r8, r8)
 8009052:	46bd      	mov	sp, r7
 8009054:	b002      	add	sp, #8
 8009056:	bd80      	pop	{r7, pc}
 8009058:	2000030c 	.word	0x2000030c

0800905c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	000a      	movs	r2, r1
 8009066:	1cbb      	adds	r3, r7, #2
 8009068:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CLKPORT = PORT;
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <LCD_setCLK+0x24>)
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	621a      	str	r2, [r3, #32]
	lcd_gpio.CLKPIN = PIN;
 8009070:	4b03      	ldr	r3, [pc, #12]	; (8009080 <LCD_setCLK+0x24>)
 8009072:	1cba      	adds	r2, r7, #2
 8009074:	8812      	ldrh	r2, [r2, #0]
 8009076:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8009078:	46c0      	nop			; (mov r8, r8)
 800907a:	46bd      	mov	sp, r7
 800907c:	b002      	add	sp, #8
 800907e:	bd80      	pop	{r7, pc}
 8009080:	2000030c 	.word	0x2000030c

08009084 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8009084:	b5b0      	push	{r4, r5, r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	0002      	movs	r2, r0
 800908c:	1dfb      	adds	r3, r7, #7
 800908e:	701a      	strb	r2, [r3, #0]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8009090:	230f      	movs	r3, #15
 8009092:	18fb      	adds	r3, r7, r3
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	e029      	b.n	80090ee <LCD_send+0x6a>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 800909a:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <LCD_send+0x80>)
 800909c:	6998      	ldr	r0, [r3, #24]
 800909e:	4b19      	ldr	r3, [pc, #100]	; (8009104 <LCD_send+0x80>)
 80090a0:	8b99      	ldrh	r1, [r3, #28]
 80090a2:	1dfb      	adds	r3, r7, #7
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	250f      	movs	r5, #15
 80090a8:	197b      	adds	r3, r7, r5
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2407      	movs	r4, #7
 80090ae:	1ae3      	subs	r3, r4, r3
 80090b0:	411a      	asrs	r2, r3
 80090b2:	0013      	movs	r3, r2
 80090b4:	2201      	movs	r2, #1
 80090b6:	4013      	ands	r3, r2
 80090b8:	1e5a      	subs	r2, r3, #1
 80090ba:	4193      	sbcs	r3, r2
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	001a      	movs	r2, r3
 80090c0:	f000 fe43 	bl	8009d4a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 80090c4:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <LCD_send+0x80>)
 80090c6:	6a18      	ldr	r0, [r3, #32]
 80090c8:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <LCD_send+0x80>)
 80090ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090cc:	2201      	movs	r2, #1
 80090ce:	0019      	movs	r1, r3
 80090d0:	f000 fe3b 	bl	8009d4a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <LCD_send+0x80>)
 80090d6:	6a18      	ldr	r0, [r3, #32]
 80090d8:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <LCD_send+0x80>)
 80090da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090dc:	2200      	movs	r2, #0
 80090de:	0019      	movs	r1, r3
 80090e0:	f000 fe33 	bl	8009d4a <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 80090e4:	197b      	adds	r3, r7, r5
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	197b      	adds	r3, r7, r5
 80090ea:	3201      	adds	r2, #1
 80090ec:	701a      	strb	r2, [r3, #0]
 80090ee:	230f      	movs	r3, #15
 80090f0:	18fb      	adds	r3, r7, r3
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b07      	cmp	r3, #7
 80090f6:	d9d0      	bls.n	800909a <LCD_send+0x16>
  }
}
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	46bd      	mov	sp, r7
 80090fe:	b004      	add	sp, #16
 8009100:	bdb0      	pop	{r4, r5, r7, pc}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	2000030c 	.word	0x2000030c

08009108 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	0002      	movs	r2, r0
 8009110:	1dfb      	adds	r3, r7, #7
 8009112:	701a      	strb	r2, [r3, #0]
 8009114:	1dbb      	adds	r3, r7, #6
 8009116:	1c0a      	adds	r2, r1, #0
 8009118:	701a      	strb	r2, [r3, #0]
  if(mode == LCD_COMMAND){
 800911a:	1dbb      	adds	r3, r7, #6
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d11d      	bne.n	800915e <LCD_write+0x56>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8009122:	4b1f      	ldr	r3, [pc, #124]	; (80091a0 <LCD_write+0x98>)
 8009124:	6918      	ldr	r0, [r3, #16]
 8009126:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <LCD_write+0x98>)
 8009128:	8a9b      	ldrh	r3, [r3, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	0019      	movs	r1, r3
 800912e:	f000 fe0c 	bl	8009d4a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8009132:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <LCD_write+0x98>)
 8009134:	6898      	ldr	r0, [r3, #8]
 8009136:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <LCD_write+0x98>)
 8009138:	899b      	ldrh	r3, [r3, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	0019      	movs	r1, r3
 800913e:	f000 fe04 	bl	8009d4a <HAL_GPIO_WritePin>
    LCD_send(data);
 8009142:	1dfb      	adds	r3, r7, #7
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	0018      	movs	r0, r3
 8009148:	f7ff ff9c 	bl	8009084 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 800914c:	4b14      	ldr	r3, [pc, #80]	; (80091a0 <LCD_write+0x98>)
 800914e:	6898      	ldr	r0, [r3, #8]
 8009150:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <LCD_write+0x98>)
 8009152:	899b      	ldrh	r3, [r3, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	0019      	movs	r1, r3
 8009158:	f000 fdf7 	bl	8009d4a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 800915c:	e01c      	b.n	8009198 <LCD_write+0x90>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <LCD_write+0x98>)
 8009160:	6918      	ldr	r0, [r3, #16]
 8009162:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <LCD_write+0x98>)
 8009164:	8a9b      	ldrh	r3, [r3, #20]
 8009166:	2201      	movs	r2, #1
 8009168:	0019      	movs	r1, r3
 800916a:	f000 fdee 	bl	8009d4a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800916e:	4b0c      	ldr	r3, [pc, #48]	; (80091a0 <LCD_write+0x98>)
 8009170:	6898      	ldr	r0, [r3, #8]
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <LCD_write+0x98>)
 8009174:	899b      	ldrh	r3, [r3, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	0019      	movs	r1, r3
 800917a:	f000 fde6 	bl	8009d4a <HAL_GPIO_WritePin>
    LCD_send(data);
 800917e:	1dfb      	adds	r3, r7, #7
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	0018      	movs	r0, r3
 8009184:	f7ff ff7e 	bl	8009084 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <LCD_write+0x98>)
 800918a:	6898      	ldr	r0, [r3, #8]
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <LCD_write+0x98>)
 800918e:	899b      	ldrh	r3, [r3, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	0019      	movs	r1, r3
 8009194:	f000 fdd9 	bl	8009d4a <HAL_GPIO_WritePin>
}
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	46bd      	mov	sp, r7
 800919c:	b002      	add	sp, #8
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	2000030c 	.word	0x2000030c

080091a4 <LCD_init>:


/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 80091a8:	4b18      	ldr	r3, [pc, #96]	; (800920c <LCD_init+0x68>)
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	4b17      	ldr	r3, [pc, #92]	; (800920c <LCD_init+0x68>)
 80091ae:	889b      	ldrh	r3, [r3, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	0019      	movs	r1, r3
 80091b4:	f000 fdc9 	bl	8009d4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 80091b8:	4b14      	ldr	r3, [pc, #80]	; (800920c <LCD_init+0x68>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	4b13      	ldr	r3, [pc, #76]	; (800920c <LCD_init+0x68>)
 80091be:	889b      	ldrh	r3, [r3, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	0019      	movs	r1, r3
 80091c4:	f000 fdc1 	bl	8009d4a <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 80091c8:	2100      	movs	r1, #0
 80091ca:	2021      	movs	r0, #33	; 0x21
 80091cc:	f7ff ff9c 	bl	8009108 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 80091d0:	2100      	movs	r1, #0
 80091d2:	20b8      	movs	r0, #184	; 0xb8
 80091d4:	f7ff ff98 	bl	8009108 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 80091d8:	2100      	movs	r1, #0
 80091da:	2004      	movs	r0, #4
 80091dc:	f7ff ff94 	bl	8009108 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80091e0:	2100      	movs	r1, #0
 80091e2:	2014      	movs	r0, #20
 80091e4:	f7ff ff90 	bl	8009108 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80091e8:	2100      	movs	r1, #0
 80091ea:	2020      	movs	r0, #32
 80091ec:	f7ff ff8c 	bl	8009108 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 80091f0:	2100      	movs	r1, #0
 80091f2:	200c      	movs	r0, #12
 80091f4:	f7ff ff88 	bl	8009108 <LCD_write>
  LCD_clrScr();
 80091f8:	f000 f892 	bl	8009320 <LCD_clrScr>
  lcd.inverttext = false;
 80091fc:	4a04      	ldr	r2, [pc, #16]	; (8009210 <LCD_init+0x6c>)
 80091fe:	23fc      	movs	r3, #252	; 0xfc
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	2100      	movs	r1, #0
 8009204:	54d1      	strb	r1, [r2, r3]
}
 8009206:	46c0      	nop			; (mov r8, r8)
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	2000030c 	.word	0x2000030c
 8009210:	20000110 	.word	0x20000110

08009214 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	0002      	movs	r2, r0
 800921c:	1dfb      	adds	r3, r7, #7
 800921e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e030      	b.n	8009288 <LCD_putChar+0x74>
    if(lcd.inverttext != true)
 8009226:	4a1c      	ldr	r2, [pc, #112]	; (8009298 <LCD_putChar+0x84>)
 8009228:	23fc      	movs	r3, #252	; 0xfc
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	5cd3      	ldrb	r3, [r2, r3]
 800922e:	2201      	movs	r2, #1
 8009230:	4053      	eors	r3, r2
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d011      	beq.n	800925c <LCD_putChar+0x48>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8009238:	1dfb      	adds	r3, r7, #7
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	3b20      	subs	r3, #32
 800923e:	001a      	movs	r2, r3
 8009240:	4916      	ldr	r1, [pc, #88]	; (800929c <LCD_putChar+0x88>)
 8009242:	0013      	movs	r3, r2
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	189b      	adds	r3, r3, r2
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	18ca      	adds	r2, r1, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	18d3      	adds	r3, r2, r3
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2101      	movs	r1, #1
 8009254:	0018      	movs	r0, r3
 8009256:	f7ff ff57 	bl	8009108 <LCD_write>
 800925a:	e012      	b.n	8009282 <LCD_putChar+0x6e>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 800925c:	1dfb      	adds	r3, r7, #7
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	3b20      	subs	r3, #32
 8009262:	001a      	movs	r2, r3
 8009264:	490d      	ldr	r1, [pc, #52]	; (800929c <LCD_putChar+0x88>)
 8009266:	0013      	movs	r3, r2
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	189b      	adds	r3, r3, r2
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	18ca      	adds	r2, r1, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	18d3      	adds	r3, r2, r3
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	43db      	mvns	r3, r3
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2101      	movs	r1, #1
 800927c:	0018      	movs	r0, r3
 800927e:	f7ff ff43 	bl	8009108 <LCD_write>
  for(int i = 0; i < 6; i++){
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3301      	adds	r3, #1
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b05      	cmp	r3, #5
 800928c:	ddcb      	ble.n	8009226 <LCD_putChar+0x12>
  }
}
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	46c0      	nop			; (mov r8, r8)
 8009292:	46bd      	mov	sp, r7
 8009294:	b004      	add	sp, #16
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20000110 	.word	0x20000110
 800929c:	0800baec 	.word	0x0800baec

080092a0 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	0008      	movs	r0, r1
 80092aa:	0011      	movs	r1, r2
 80092ac:	1cfb      	adds	r3, r7, #3
 80092ae:	1c02      	adds	r2, r0, #0
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	1cbb      	adds	r3, r7, #2
 80092b4:	1c0a      	adds	r2, r1, #0
 80092b6:	701a      	strb	r2, [r3, #0]
  LCD_goXY(x, y);
 80092b8:	1cbb      	adds	r3, r7, #2
 80092ba:	781a      	ldrb	r2, [r3, #0]
 80092bc:	1cfb      	adds	r3, r7, #3
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	0011      	movs	r1, r2
 80092c2:	0018      	movs	r0, r3
 80092c4:	f000 f84a 	bl	800935c <LCD_goXY>
  while(*str){
 80092c8:	e006      	b.n	80092d8 <LCD_print+0x38>
    LCD_putChar(*str++);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7ff ff9e 	bl	8009214 <LCD_putChar>
  while(*str){
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1f4      	bne.n	80092ca <LCD_print+0x2a>
  }
}
 80092e0:	46c0      	nop			; (mov r8, r8)
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b002      	add	sp, #8
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <LCD_clrBuffer>:

void LCD_clrBuffer(){
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 504; i++){
 80092f2:	2300      	movs	r3, #0
 80092f4:	607b      	str	r3, [r7, #4]
 80092f6:	e007      	b.n	8009308 <LCD_clrBuffer+0x1c>
		lcd.buffer[i] = 0;
 80092f8:	4a08      	ldr	r2, [pc, #32]	; (800931c <LCD_clrBuffer+0x30>)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	18d3      	adds	r3, r2, r3
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 504; i++){
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3301      	adds	r3, #1
 8009306:	607b      	str	r3, [r7, #4]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	23fc      	movs	r3, #252	; 0xfc
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	429a      	cmp	r2, r3
 8009310:	dbf2      	blt.n	80092f8 <LCD_clrBuffer+0xc>
	}
}
 8009312:	46c0      	nop			; (mov r8, r8)
 8009314:	46c0      	nop			; (mov r8, r8)
 8009316:	46bd      	mov	sp, r7
 8009318:	b002      	add	sp, #8
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000110 	.word	0x20000110

08009320 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8009326:	2300      	movs	r3, #0
 8009328:	607b      	str	r3, [r7, #4]
 800932a:	e00b      	b.n	8009344 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 800932c:	2101      	movs	r1, #1
 800932e:	2000      	movs	r0, #0
 8009330:	f7ff feea 	bl	8009108 <LCD_write>
    lcd.buffer[i] = 0;
 8009334:	4a08      	ldr	r2, [pc, #32]	; (8009358 <LCD_clrScr+0x38>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	18d3      	adds	r3, r2, r3
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3301      	adds	r3, #1
 8009342:	607b      	str	r3, [r7, #4]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	23fc      	movs	r3, #252	; 0xfc
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	429a      	cmp	r2, r3
 800934c:	dbee      	blt.n	800932c <LCD_clrScr+0xc>
  }
}
 800934e:	46c0      	nop			; (mov r8, r8)
 8009350:	46c0      	nop			; (mov r8, r8)
 8009352:	46bd      	mov	sp, r7
 8009354:	b002      	add	sp, #8
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20000110 	.word	0x20000110

0800935c <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	0002      	movs	r2, r0
 8009364:	1dfb      	adds	r3, r7, #7
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	1dbb      	adds	r3, r7, #6
 800936a:	1c0a      	adds	r2, r1, #0
 800936c:	701a      	strb	r2, [r3, #0]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 800936e:	1dfb      	adds	r3, r7, #7
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2280      	movs	r2, #128	; 0x80
 8009374:	4252      	negs	r2, r2
 8009376:	4313      	orrs	r3, r2
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2100      	movs	r1, #0
 800937c:	0018      	movs	r0, r3
 800937e:	f7ff fec3 	bl	8009108 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8009382:	1dbb      	adds	r3, r7, #6
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2240      	movs	r2, #64	; 0x40
 8009388:	4313      	orrs	r3, r2
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2100      	movs	r1, #0
 800938e:	0018      	movs	r0, r3
 8009390:	f7ff feba 	bl	8009108 <LCD_write>
}
 8009394:	46c0      	nop			; (mov r8, r8)
 8009396:	46bd      	mov	sp, r7
 8009398:	b002      	add	sp, #8
 800939a:	bd80      	pop	{r7, pc}

0800939c <LCD_refreshScr>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void LCD_refreshScr(){
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
  LCD_goXY(LCD_SETXADDR, LCD_SETYADDR);
 80093a2:	2140      	movs	r1, #64	; 0x40
 80093a4:	2080      	movs	r0, #128	; 0x80
 80093a6:	f7ff ffd9 	bl	800935c <LCD_goXY>
  for(int i = 0; i < 6; i++){
 80093aa:	2300      	movs	r3, #0
 80093ac:	607b      	str	r3, [r7, #4]
 80093ae:	e016      	b.n	80093de <LCD_refreshScr+0x42>
    for(int j = 0; j < LCD_WIDTH; j++){
 80093b0:	2300      	movs	r3, #0
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	e00d      	b.n	80093d2 <LCD_refreshScr+0x36>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2254      	movs	r2, #84	; 0x54
 80093ba:	435a      	muls	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	18d3      	adds	r3, r2, r3
 80093c0:	4a0b      	ldr	r2, [pc, #44]	; (80093f0 <LCD_refreshScr+0x54>)
 80093c2:	5cd3      	ldrb	r3, [r2, r3]
 80093c4:	2101      	movs	r1, #1
 80093c6:	0018      	movs	r0, r3
 80093c8:	f7ff fe9e 	bl	8009108 <LCD_write>
    for(int j = 0; j < LCD_WIDTH; j++){
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	3301      	adds	r3, #1
 80093d0:	603b      	str	r3, [r7, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	2b53      	cmp	r3, #83	; 0x53
 80093d6:	ddee      	ble.n	80093b6 <LCD_refreshScr+0x1a>
  for(int i = 0; i < 6; i++){
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3301      	adds	r3, #1
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b05      	cmp	r3, #5
 80093e2:	dde5      	ble.n	80093b0 <LCD_refreshScr+0x14>
    }
  }
}
 80093e4:	46c0      	nop			; (mov r8, r8)
 80093e6:	46c0      	nop			; (mov r8, r8)
 80093e8:	46bd      	mov	sp, r7
 80093ea:	b002      	add	sp, #8
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	20000110 	.word	0x20000110

080093f4 <LCD_refreshArea>:
 * @param xmin: starting point on the x-axis
 * @param xmax: ending point on the x-axis
 * @param ymin: starting point on the y-axis
 * @param ymax: ending point on the y-axis
 */
void LCD_refreshArea(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax){
 80093f4:	b5b0      	push	{r4, r5, r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	0005      	movs	r5, r0
 80093fc:	000c      	movs	r4, r1
 80093fe:	0010      	movs	r0, r2
 8009400:	0019      	movs	r1, r3
 8009402:	1dfb      	adds	r3, r7, #7
 8009404:	1c2a      	adds	r2, r5, #0
 8009406:	701a      	strb	r2, [r3, #0]
 8009408:	1dbb      	adds	r3, r7, #6
 800940a:	1c22      	adds	r2, r4, #0
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	1d7b      	adds	r3, r7, #5
 8009410:	1c02      	adds	r2, r0, #0
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	1d3b      	adds	r3, r7, #4
 8009416:	1c0a      	adds	r2, r1, #0
 8009418:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
 800941e:	e033      	b.n	8009488 <LCD_refreshArea+0x94>
    if(i * 8 > ymax){
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	00da      	lsls	r2, r3, #3
 8009424:	1d3b      	adds	r3, r7, #4
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	dc31      	bgt.n	8009490 <LCD_refreshArea+0x9c>
      break;
    }
    //LCD_goXY(xmin, i);
    LCD_write(LCD_SETYADDR | i, LCD_COMMAND);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	b25b      	sxtb	r3, r3
 8009430:	2240      	movs	r2, #64	; 0x40
 8009432:	4313      	orrs	r3, r2
 8009434:	b25b      	sxtb	r3, r3
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2100      	movs	r1, #0
 800943a:	0018      	movs	r0, r3
 800943c:	f7ff fe64 	bl	8009108 <LCD_write>
    LCD_write(LCD_SETXADDR | xmin, LCD_COMMAND);
 8009440:	1dfb      	adds	r3, r7, #7
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2280      	movs	r2, #128	; 0x80
 8009446:	4252      	negs	r2, r2
 8009448:	4313      	orrs	r3, r2
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2100      	movs	r1, #0
 800944e:	0018      	movs	r0, r3
 8009450:	f7ff fe5a 	bl	8009108 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8009454:	1dfb      	adds	r3, r7, #7
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	60bb      	str	r3, [r7, #8]
 800945a:	e00d      	b.n	8009478 <LCD_refreshArea+0x84>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2254      	movs	r2, #84	; 0x54
 8009460:	435a      	muls	r2, r3
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	18d3      	adds	r3, r2, r3
 8009466:	4a0d      	ldr	r2, [pc, #52]	; (800949c <LCD_refreshArea+0xa8>)
 8009468:	5cd3      	ldrb	r3, [r2, r3]
 800946a:	2101      	movs	r1, #1
 800946c:	0018      	movs	r0, r3
 800946e:	f7ff fe4b 	bl	8009108 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3301      	adds	r3, #1
 8009476:	60bb      	str	r3, [r7, #8]
 8009478:	1d7b      	adds	r3, r7, #5
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	429a      	cmp	r2, r3
 8009480:	ddec      	ble.n	800945c <LCD_refreshArea+0x68>
  for(int i = 0; i < 6; i++){
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b05      	cmp	r3, #5
 800948c:	ddc8      	ble.n	8009420 <LCD_refreshArea+0x2c>
    }
  }
}
 800948e:	e000      	b.n	8009492 <LCD_refreshArea+0x9e>
      break;
 8009490:	46c0      	nop			; (mov r8, r8)
}
 8009492:	46c0      	nop			; (mov r8, r8)
 8009494:	46bd      	mov	sp, r7
 8009496:	b004      	add	sp, #16
 8009498:	bdb0      	pop	{r4, r5, r7, pc}
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	20000110 	.word	0x20000110

080094a0 <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 80094a0:	b590      	push	{r4, r7, lr}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	0004      	movs	r4, r0
 80094a8:	0008      	movs	r0, r1
 80094aa:	0011      	movs	r1, r2
 80094ac:	1dfb      	adds	r3, r7, #7
 80094ae:	1c22      	adds	r2, r4, #0
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	1dbb      	adds	r3, r7, #6
 80094b4:	1c02      	adds	r2, r0, #0
 80094b6:	701a      	strb	r2, [r3, #0]
 80094b8:	1d7b      	adds	r3, r7, #5
 80094ba:	1c0a      	adds	r2, r1, #0
 80094bc:	701a      	strb	r2, [r3, #0]
  if(x >= LCD_WIDTH)
 80094be:	1dfb      	adds	r3, r7, #7
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b53      	cmp	r3, #83	; 0x53
 80094c4:	d902      	bls.n	80094cc <LCD_setPixel+0x2c>
    x = LCD_WIDTH - 1;
 80094c6:	1dfb      	adds	r3, r7, #7
 80094c8:	2253      	movs	r2, #83	; 0x53
 80094ca:	701a      	strb	r2, [r3, #0]
  if(y >= LCD_HEIGHT)
 80094cc:	1dbb      	adds	r3, r7, #6
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b2f      	cmp	r3, #47	; 0x2f
 80094d2:	d902      	bls.n	80094da <LCD_setPixel+0x3a>
    y = LCD_HEIGHT - 1;
 80094d4:	1dbb      	adds	r3, r7, #6
 80094d6:	222f      	movs	r2, #47	; 0x2f
 80094d8:	701a      	strb	r2, [r3, #0]
    
  if(pixel != false){
 80094da:	1d7b      	adds	r3, r7, #5
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d01f      	beq.n	8009522 <LCD_setPixel+0x82>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 80094e2:	1dfb      	adds	r3, r7, #7
 80094e4:	781a      	ldrb	r2, [r3, #0]
 80094e6:	1dbb      	adds	r3, r7, #6
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	08db      	lsrs	r3, r3, #3
 80094ec:	b2d8      	uxtb	r0, r3
 80094ee:	0001      	movs	r1, r0
 80094f0:	2354      	movs	r3, #84	; 0x54
 80094f2:	434b      	muls	r3, r1
 80094f4:	18d3      	adds	r3, r2, r3
 80094f6:	4a1d      	ldr	r2, [pc, #116]	; (800956c <LCD_setPixel+0xcc>)
 80094f8:	5cd3      	ldrb	r3, [r2, r3]
 80094fa:	b25a      	sxtb	r2, r3
 80094fc:	1dbb      	adds	r3, r7, #6
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2107      	movs	r1, #7
 8009502:	400b      	ands	r3, r1
 8009504:	2101      	movs	r1, #1
 8009506:	4099      	lsls	r1, r3
 8009508:	000b      	movs	r3, r1
 800950a:	b25b      	sxtb	r3, r3
 800950c:	4313      	orrs	r3, r2
 800950e:	b259      	sxtb	r1, r3
 8009510:	1dfb      	adds	r3, r7, #7
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	2354      	movs	r3, #84	; 0x54
 8009516:	4343      	muls	r3, r0
 8009518:	18d3      	adds	r3, r2, r3
 800951a:	b2c9      	uxtb	r1, r1
 800951c:	4a13      	ldr	r2, [pc, #76]	; (800956c <LCD_setPixel+0xcc>)
 800951e:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8009520:	e020      	b.n	8009564 <LCD_setPixel+0xc4>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8009522:	1dfb      	adds	r3, r7, #7
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	1dbb      	adds	r3, r7, #6
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	08db      	lsrs	r3, r3, #3
 800952c:	b2d8      	uxtb	r0, r3
 800952e:	0001      	movs	r1, r0
 8009530:	2354      	movs	r3, #84	; 0x54
 8009532:	434b      	muls	r3, r1
 8009534:	18d3      	adds	r3, r2, r3
 8009536:	4a0d      	ldr	r2, [pc, #52]	; (800956c <LCD_setPixel+0xcc>)
 8009538:	5cd3      	ldrb	r3, [r2, r3]
 800953a:	b25b      	sxtb	r3, r3
 800953c:	1dba      	adds	r2, r7, #6
 800953e:	7812      	ldrb	r2, [r2, #0]
 8009540:	2107      	movs	r1, #7
 8009542:	400a      	ands	r2, r1
 8009544:	2101      	movs	r1, #1
 8009546:	4091      	lsls	r1, r2
 8009548:	000a      	movs	r2, r1
 800954a:	b252      	sxtb	r2, r2
 800954c:	43d2      	mvns	r2, r2
 800954e:	b252      	sxtb	r2, r2
 8009550:	4013      	ands	r3, r2
 8009552:	b259      	sxtb	r1, r3
 8009554:	1dfb      	adds	r3, r7, #7
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	2354      	movs	r3, #84	; 0x54
 800955a:	4343      	muls	r3, r0
 800955c:	18d3      	adds	r3, r2, r3
 800955e:	b2c9      	uxtb	r1, r1
 8009560:	4a02      	ldr	r2, [pc, #8]	; (800956c <LCD_setPixel+0xcc>)
 8009562:	54d1      	strb	r1, [r2, r3]
}
 8009564:	46c0      	nop			; (mov r8, r8)
 8009566:	46bd      	mov	sp, r7
 8009568:	b003      	add	sp, #12
 800956a:	bd90      	pop	{r4, r7, pc}
 800956c:	20000110 	.word	0x20000110

08009570 <LCD_drawHLine>:
 * @brief Draws a horizontal line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void LCD_drawHLine(int x, int y, int l){
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  int by, bi;

  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT)){
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	db3a      	blt.n	80095f8 <LCD_drawHLine+0x88>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b53      	cmp	r3, #83	; 0x53
 8009586:	dc37      	bgt.n	80095f8 <LCD_drawHLine+0x88>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	db34      	blt.n	80095f8 <LCD_drawHLine+0x88>
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2b2f      	cmp	r3, #47	; 0x2f
 8009592:	dc31      	bgt.n	80095f8 <LCD_drawHLine+0x88>
    for (int cx=0; cx<l; cx++){
 8009594:	2300      	movs	r3, #0
 8009596:	61fb      	str	r3, [r7, #28]
 8009598:	e02a      	b.n	80095f0 <LCD_drawHLine+0x80>
      by=((y/8)*84)+x;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da00      	bge.n	80095a2 <LCD_drawHLine+0x32>
 80095a0:	3307      	adds	r3, #7
 80095a2:	10db      	asrs	r3, r3, #3
 80095a4:	001a      	movs	r2, r3
 80095a6:	2354      	movs	r3, #84	; 0x54
 80095a8:	4353      	muls	r3, r2
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	18d3      	adds	r3, r2, r3
 80095ae:	61bb      	str	r3, [r7, #24]
      bi=y % 8;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4a13      	ldr	r2, [pc, #76]	; (8009600 <LCD_drawHLine+0x90>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	d504      	bpl.n	80095c2 <LCD_drawHLine+0x52>
 80095b8:	3b01      	subs	r3, #1
 80095ba:	2208      	movs	r2, #8
 80095bc:	4252      	negs	r2, r2
 80095be:	4313      	orrs	r3, r2
 80095c0:	3301      	adds	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]
      lcd.buffer[by+cx] |= (1<<bi);
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	18d3      	adds	r3, r2, r3
 80095ca:	4a0e      	ldr	r2, [pc, #56]	; (8009604 <LCD_drawHLine+0x94>)
 80095cc:	5cd3      	ldrb	r3, [r2, r3]
 80095ce:	b25a      	sxtb	r2, r3
 80095d0:	2101      	movs	r1, #1
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	4099      	lsls	r1, r3
 80095d6:	000b      	movs	r3, r1
 80095d8:	b25b      	sxtb	r3, r3
 80095da:	4313      	orrs	r3, r2
 80095dc:	b259      	sxtb	r1, r3
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	18d3      	adds	r3, r2, r3
 80095e4:	b2c9      	uxtb	r1, r1
 80095e6:	4a07      	ldr	r2, [pc, #28]	; (8009604 <LCD_drawHLine+0x94>)
 80095e8:	54d1      	strb	r1, [r2, r3]
    for (int cx=0; cx<l; cx++){
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	3301      	adds	r3, #1
 80095ee:	61fb      	str	r3, [r7, #28]
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	dbd0      	blt.n	800959a <LCD_drawHLine+0x2a>
    }
  }
}
 80095f8:	46c0      	nop			; (mov r8, r8)
 80095fa:	46bd      	mov	sp, r7
 80095fc:	b008      	add	sp, #32
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	80000007 	.word	0x80000007
 8009604:	20000110 	.word	0x20000110

08009608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800960c:	4b07      	ldr	r3, [pc, #28]	; (800962c <HAL_MspInit+0x24>)
 800960e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <HAL_MspInit+0x24>)
 8009612:	2101      	movs	r1, #1
 8009614:	430a      	orrs	r2, r1
 8009616:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8009618:	4b04      	ldr	r3, [pc, #16]	; (800962c <HAL_MspInit+0x24>)
 800961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961c:	4b03      	ldr	r3, [pc, #12]	; (800962c <HAL_MspInit+0x24>)
 800961e:	2180      	movs	r1, #128	; 0x80
 8009620:	0549      	lsls	r1, r1, #21
 8009622:	430a      	orrs	r2, r1
 8009624:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	40021000 	.word	0x40021000

08009630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a06      	ldr	r2, [pc, #24]	; (8009658 <HAL_TIM_Base_MspInit+0x28>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d105      	bne.n	800964e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009642:	4b06      	ldr	r3, [pc, #24]	; (800965c <HAL_TIM_Base_MspInit+0x2c>)
 8009644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <HAL_TIM_Base_MspInit+0x2c>)
 8009648:	2110      	movs	r1, #16
 800964a:	430a      	orrs	r2, r1
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	46bd      	mov	sp, r7
 8009652:	b002      	add	sp, #8
 8009654:	bd80      	pop	{r7, pc}
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	40001000 	.word	0x40001000
 800965c:	40021000 	.word	0x40021000

08009660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009660:	b590      	push	{r4, r7, lr}
 8009662:	b089      	sub	sp, #36	; 0x24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009668:	240c      	movs	r4, #12
 800966a:	193b      	adds	r3, r7, r4
 800966c:	0018      	movs	r0, r3
 800966e:	2314      	movs	r3, #20
 8009670:	001a      	movs	r2, r3
 8009672:	2100      	movs	r1, #0
 8009674:	f002 f9d4 	bl	800ba20 <memset>
  if(huart->Instance==USART2)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a18      	ldr	r2, [pc, #96]	; (80096e0 <HAL_UART_MspInit+0x80>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d129      	bne.n	80096d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009682:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <HAL_UART_MspInit+0x84>)
 8009684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009686:	4b17      	ldr	r3, [pc, #92]	; (80096e4 <HAL_UART_MspInit+0x84>)
 8009688:	2180      	movs	r1, #128	; 0x80
 800968a:	0289      	lsls	r1, r1, #10
 800968c:	430a      	orrs	r2, r1
 800968e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009690:	4b14      	ldr	r3, [pc, #80]	; (80096e4 <HAL_UART_MspInit+0x84>)
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	4b13      	ldr	r3, [pc, #76]	; (80096e4 <HAL_UART_MspInit+0x84>)
 8009696:	2101      	movs	r1, #1
 8009698:	430a      	orrs	r2, r1
 800969a:	62da      	str	r2, [r3, #44]	; 0x2c
 800969c:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <HAL_UART_MspInit+0x84>)
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	2201      	movs	r2, #1
 80096a2:	4013      	ands	r3, r2
 80096a4:	60bb      	str	r3, [r7, #8]
 80096a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80096a8:	0021      	movs	r1, r4
 80096aa:	187b      	adds	r3, r7, r1
 80096ac:	220c      	movs	r2, #12
 80096ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b0:	187b      	adds	r3, r7, r1
 80096b2:	2202      	movs	r2, #2
 80096b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b6:	187b      	adds	r3, r7, r1
 80096b8:	2200      	movs	r2, #0
 80096ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096bc:	187b      	adds	r3, r7, r1
 80096be:	2203      	movs	r2, #3
 80096c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80096c2:	187b      	adds	r3, r7, r1
 80096c4:	2204      	movs	r2, #4
 80096c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096c8:	187a      	adds	r2, r7, r1
 80096ca:	23a0      	movs	r3, #160	; 0xa0
 80096cc:	05db      	lsls	r3, r3, #23
 80096ce:	0011      	movs	r1, r2
 80096d0:	0018      	movs	r0, r3
 80096d2:	f000 f99f 	bl	8009a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80096d6:	46c0      	nop			; (mov r8, r8)
 80096d8:	46bd      	mov	sp, r7
 80096da:	b009      	add	sp, #36	; 0x24
 80096dc:	bd90      	pop	{r4, r7, pc}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	40004400 	.word	0x40004400
 80096e4:	40021000 	.word	0x40021000

080096e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80096ec:	e7fe      	b.n	80096ec <NMI_Handler+0x4>

080096ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80096f2:	e7fe      	b.n	80096f2 <HardFault_Handler+0x4>

080096f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80096f8:	46c0      	nop			; (mov r8, r8)
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800970c:	f000 f88e 	bl	800982c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009710:	46c0      	nop			; (mov r8, r8)
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <SystemInit+0x10>)
 800971e:	4a03      	ldr	r2, [pc, #12]	; (800972c <SystemInit+0x14>)
 8009720:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	e000ed00 	.word	0xe000ed00
 800972c:	08008000 	.word	0x08008000

08009730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009730:	480d      	ldr	r0, [pc, #52]	; (8009768 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009732:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009734:	480d      	ldr	r0, [pc, #52]	; (800976c <LoopForever+0x6>)
  ldr r1, =_edata
 8009736:	490e      	ldr	r1, [pc, #56]	; (8009770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009738:	4a0e      	ldr	r2, [pc, #56]	; (8009774 <LoopForever+0xe>)
  movs r3, #0
 800973a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800973c:	e002      	b.n	8009744 <LoopCopyDataInit>

0800973e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800973e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009742:	3304      	adds	r3, #4

08009744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009748:	d3f9      	bcc.n	800973e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800974a:	4a0b      	ldr	r2, [pc, #44]	; (8009778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800974c:	4c0b      	ldr	r4, [pc, #44]	; (800977c <LoopForever+0x16>)
  movs r3, #0
 800974e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009750:	e001      	b.n	8009756 <LoopFillZerobss>

08009752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009754:	3204      	adds	r2, #4

08009756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009758:	d3fb      	bcc.n	8009752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800975a:	f7ff ffdd 	bl	8009718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800975e:	f002 f91f 	bl	800b9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009762:	f7ff f853 	bl	800880c <main>

08009766 <LoopForever>:

LoopForever:
    b LoopForever
 8009766:	e7fe      	b.n	8009766 <LoopForever>
   ldr   r0, =_estack
 8009768:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800976c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009770:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8009774:	0800bdd0 	.word	0x0800bdd0
  ldr r2, =_sbss
 8009778:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800977c:	20000338 	.word	0x20000338

08009780 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009780:	e7fe      	b.n	8009780 <ADC1_COMP_IRQHandler>
	...

08009784 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800978a:	1dfb      	adds	r3, r7, #7
 800978c:	2200      	movs	r2, #0
 800978e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009790:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <HAL_Init+0x3c>)
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <HAL_Init+0x3c>)
 8009796:	2140      	movs	r1, #64	; 0x40
 8009798:	430a      	orrs	r2, r1
 800979a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800979c:	2000      	movs	r0, #0
 800979e:	f000 f811 	bl	80097c4 <HAL_InitTick>
 80097a2:	1e03      	subs	r3, r0, #0
 80097a4:	d003      	beq.n	80097ae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80097a6:	1dfb      	adds	r3, r7, #7
 80097a8:	2201      	movs	r2, #1
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	e001      	b.n	80097b2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80097ae:	f7ff ff2b 	bl	8009608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80097b2:	1dfb      	adds	r3, r7, #7
 80097b4:	781b      	ldrb	r3, [r3, #0]
}
 80097b6:	0018      	movs	r0, r3
 80097b8:	46bd      	mov	sp, r7
 80097ba:	b002      	add	sp, #8
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	40022000 	.word	0x40022000

080097c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80097cc:	4b14      	ldr	r3, [pc, #80]	; (8009820 <HAL_InitTick+0x5c>)
 80097ce:	681c      	ldr	r4, [r3, #0]
 80097d0:	4b14      	ldr	r3, [pc, #80]	; (8009824 <HAL_InitTick+0x60>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	0019      	movs	r1, r3
 80097d6:	23fa      	movs	r3, #250	; 0xfa
 80097d8:	0098      	lsls	r0, r3, #2
 80097da:	f7fe fc95 	bl	8008108 <__udivsi3>
 80097de:	0003      	movs	r3, r0
 80097e0:	0019      	movs	r1, r3
 80097e2:	0020      	movs	r0, r4
 80097e4:	f7fe fc90 	bl	8008108 <__udivsi3>
 80097e8:	0003      	movs	r3, r0
 80097ea:	0018      	movs	r0, r3
 80097ec:	f000 f905 	bl	80099fa <HAL_SYSTICK_Config>
 80097f0:	1e03      	subs	r3, r0, #0
 80097f2:	d001      	beq.n	80097f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e00f      	b.n	8009818 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d80b      	bhi.n	8009816 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	2301      	movs	r3, #1
 8009802:	425b      	negs	r3, r3
 8009804:	2200      	movs	r2, #0
 8009806:	0018      	movs	r0, r3
 8009808:	f000 f8e2 	bl	80099d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800980c:	4b06      	ldr	r3, [pc, #24]	; (8009828 <HAL_InitTick+0x64>)
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	e000      	b.n	8009818 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
}
 8009818:	0018      	movs	r0, r3
 800981a:	46bd      	mov	sp, r7
 800981c:	b003      	add	sp, #12
 800981e:	bd90      	pop	{r4, r7, pc}
 8009820:	20000004 	.word	0x20000004
 8009824:	2000000c 	.word	0x2000000c
 8009828:	20000008 	.word	0x20000008

0800982c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <HAL_IncTick+0x1c>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	001a      	movs	r2, r3
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <HAL_IncTick+0x20>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	18d2      	adds	r2, r2, r3
 800983c:	4b03      	ldr	r3, [pc, #12]	; (800984c <HAL_IncTick+0x20>)
 800983e:	601a      	str	r2, [r3, #0]
}
 8009840:	46c0      	nop			; (mov r8, r8)
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	2000000c 	.word	0x2000000c
 800984c:	20000334 	.word	0x20000334

08009850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  return uwTick;
 8009854:	4b02      	ldr	r3, [pc, #8]	; (8009860 <HAL_GetTick+0x10>)
 8009856:	681b      	ldr	r3, [r3, #0]
}
 8009858:	0018      	movs	r0, r3
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	20000334 	.word	0x20000334

08009864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800986c:	f7ff fff0 	bl	8009850 <HAL_GetTick>
 8009870:	0003      	movs	r3, r0
 8009872:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	d005      	beq.n	800988a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800987e:	4b0a      	ldr	r3, [pc, #40]	; (80098a8 <HAL_Delay+0x44>)
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	001a      	movs	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	189b      	adds	r3, r3, r2
 8009888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	f7ff ffe0 	bl	8009850 <HAL_GetTick>
 8009890:	0002      	movs	r2, r0
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	429a      	cmp	r2, r3
 800989a:	d8f7      	bhi.n	800988c <HAL_Delay+0x28>
  {
  }
}
 800989c:	46c0      	nop			; (mov r8, r8)
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	46bd      	mov	sp, r7
 80098a2:	b004      	add	sp, #16
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	2000000c 	.word	0x2000000c

080098ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098ac:	b590      	push	{r4, r7, lr}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	0002      	movs	r2, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	1dfb      	adds	r3, r7, #7
 80098b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80098ba:	1dfb      	adds	r3, r7, #7
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b7f      	cmp	r3, #127	; 0x7f
 80098c0:	d828      	bhi.n	8009914 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80098c2:	4a2f      	ldr	r2, [pc, #188]	; (8009980 <__NVIC_SetPriority+0xd4>)
 80098c4:	1dfb      	adds	r3, r7, #7
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	b25b      	sxtb	r3, r3
 80098ca:	089b      	lsrs	r3, r3, #2
 80098cc:	33c0      	adds	r3, #192	; 0xc0
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	589b      	ldr	r3, [r3, r2]
 80098d2:	1dfa      	adds	r2, r7, #7
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	0011      	movs	r1, r2
 80098d8:	2203      	movs	r2, #3
 80098da:	400a      	ands	r2, r1
 80098dc:	00d2      	lsls	r2, r2, #3
 80098de:	21ff      	movs	r1, #255	; 0xff
 80098e0:	4091      	lsls	r1, r2
 80098e2:	000a      	movs	r2, r1
 80098e4:	43d2      	mvns	r2, r2
 80098e6:	401a      	ands	r2, r3
 80098e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	019b      	lsls	r3, r3, #6
 80098ee:	22ff      	movs	r2, #255	; 0xff
 80098f0:	401a      	ands	r2, r3
 80098f2:	1dfb      	adds	r3, r7, #7
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	0018      	movs	r0, r3
 80098f8:	2303      	movs	r3, #3
 80098fa:	4003      	ands	r3, r0
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009900:	481f      	ldr	r0, [pc, #124]	; (8009980 <__NVIC_SetPriority+0xd4>)
 8009902:	1dfb      	adds	r3, r7, #7
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	b25b      	sxtb	r3, r3
 8009908:	089b      	lsrs	r3, r3, #2
 800990a:	430a      	orrs	r2, r1
 800990c:	33c0      	adds	r3, #192	; 0xc0
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009912:	e031      	b.n	8009978 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009914:	4a1b      	ldr	r2, [pc, #108]	; (8009984 <__NVIC_SetPriority+0xd8>)
 8009916:	1dfb      	adds	r3, r7, #7
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	0019      	movs	r1, r3
 800991c:	230f      	movs	r3, #15
 800991e:	400b      	ands	r3, r1
 8009920:	3b08      	subs	r3, #8
 8009922:	089b      	lsrs	r3, r3, #2
 8009924:	3306      	adds	r3, #6
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	18d3      	adds	r3, r2, r3
 800992a:	3304      	adds	r3, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	1dfa      	adds	r2, r7, #7
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	0011      	movs	r1, r2
 8009934:	2203      	movs	r2, #3
 8009936:	400a      	ands	r2, r1
 8009938:	00d2      	lsls	r2, r2, #3
 800993a:	21ff      	movs	r1, #255	; 0xff
 800993c:	4091      	lsls	r1, r2
 800993e:	000a      	movs	r2, r1
 8009940:	43d2      	mvns	r2, r2
 8009942:	401a      	ands	r2, r3
 8009944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	019b      	lsls	r3, r3, #6
 800994a:	22ff      	movs	r2, #255	; 0xff
 800994c:	401a      	ands	r2, r3
 800994e:	1dfb      	adds	r3, r7, #7
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	0018      	movs	r0, r3
 8009954:	2303      	movs	r3, #3
 8009956:	4003      	ands	r3, r0
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800995c:	4809      	ldr	r0, [pc, #36]	; (8009984 <__NVIC_SetPriority+0xd8>)
 800995e:	1dfb      	adds	r3, r7, #7
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	001c      	movs	r4, r3
 8009964:	230f      	movs	r3, #15
 8009966:	4023      	ands	r3, r4
 8009968:	3b08      	subs	r3, #8
 800996a:	089b      	lsrs	r3, r3, #2
 800996c:	430a      	orrs	r2, r1
 800996e:	3306      	adds	r3, #6
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	18c3      	adds	r3, r0, r3
 8009974:	3304      	adds	r3, #4
 8009976:	601a      	str	r2, [r3, #0]
}
 8009978:	46c0      	nop			; (mov r8, r8)
 800997a:	46bd      	mov	sp, r7
 800997c:	b003      	add	sp, #12
 800997e:	bd90      	pop	{r4, r7, pc}
 8009980:	e000e100 	.word	0xe000e100
 8009984:	e000ed00 	.word	0xe000ed00

08009988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	1e5a      	subs	r2, r3, #1
 8009994:	2380      	movs	r3, #128	; 0x80
 8009996:	045b      	lsls	r3, r3, #17
 8009998:	429a      	cmp	r2, r3
 800999a:	d301      	bcc.n	80099a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800999c:	2301      	movs	r3, #1
 800999e:	e010      	b.n	80099c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <SysTick_Config+0x44>)
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	3a01      	subs	r2, #1
 80099a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099a8:	2301      	movs	r3, #1
 80099aa:	425b      	negs	r3, r3
 80099ac:	2103      	movs	r1, #3
 80099ae:	0018      	movs	r0, r3
 80099b0:	f7ff ff7c 	bl	80098ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <SysTick_Config+0x44>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <SysTick_Config+0x44>)
 80099bc:	2207      	movs	r2, #7
 80099be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	0018      	movs	r0, r3
 80099c4:	46bd      	mov	sp, r7
 80099c6:	b002      	add	sp, #8
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	e000e010 	.word	0xe000e010

080099d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	210f      	movs	r1, #15
 80099dc:	187b      	adds	r3, r7, r1
 80099de:	1c02      	adds	r2, r0, #0
 80099e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	187b      	adds	r3, r7, r1
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	b25b      	sxtb	r3, r3
 80099ea:	0011      	movs	r1, r2
 80099ec:	0018      	movs	r0, r3
 80099ee:	f7ff ff5d 	bl	80098ac <__NVIC_SetPriority>
}
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	46bd      	mov	sp, r7
 80099f6:	b004      	add	sp, #16
 80099f8:	bd80      	pop	{r7, pc}

080099fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	0018      	movs	r0, r3
 8009a06:	f7ff ffbf 	bl	8009988 <SysTick_Config>
 8009a0a:	0003      	movs	r3, r0
}
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	b002      	add	sp, #8
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009a2a:	e155      	b.n	8009cd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2101      	movs	r1, #1
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	4091      	lsls	r1, r2
 8009a36:	000a      	movs	r2, r1
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d100      	bne.n	8009a44 <HAL_GPIO_Init+0x30>
 8009a42:	e146      	b.n	8009cd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2203      	movs	r2, #3
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d005      	beq.n	8009a5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2203      	movs	r2, #3
 8009a56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d130      	bne.n	8009abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	2203      	movs	r2, #3
 8009a68:	409a      	lsls	r2, r3
 8009a6a:	0013      	movs	r3, r2
 8009a6c:	43da      	mvns	r2, r3
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4013      	ands	r3, r2
 8009a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	409a      	lsls	r2, r3
 8009a7e:	0013      	movs	r3, r2
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a92:	2201      	movs	r2, #1
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	409a      	lsls	r2, r3
 8009a98:	0013      	movs	r3, r2
 8009a9a:	43da      	mvns	r2, r3
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	091b      	lsrs	r3, r3, #4
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	401a      	ands	r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	409a      	lsls	r2, r3
 8009ab0:	0013      	movs	r3, r2
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d017      	beq.n	8009afa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	2203      	movs	r2, #3
 8009ad6:	409a      	lsls	r2, r3
 8009ad8:	0013      	movs	r3, r2
 8009ada:	43da      	mvns	r2, r3
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	4013      	ands	r3, r2
 8009ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	689a      	ldr	r2, [r3, #8]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	409a      	lsls	r2, r3
 8009aec:	0013      	movs	r3, r2
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	2203      	movs	r2, #3
 8009b00:	4013      	ands	r3, r2
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d123      	bne.n	8009b4e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	08da      	lsrs	r2, r3, #3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3208      	adds	r2, #8
 8009b0e:	0092      	lsls	r2, r2, #2
 8009b10:	58d3      	ldr	r3, [r2, r3]
 8009b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2207      	movs	r2, #7
 8009b18:	4013      	ands	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	220f      	movs	r2, #15
 8009b1e:	409a      	lsls	r2, r3
 8009b20:	0013      	movs	r3, r2
 8009b22:	43da      	mvns	r2, r3
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	4013      	ands	r3, r2
 8009b28:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	691a      	ldr	r2, [r3, #16]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2107      	movs	r1, #7
 8009b32:	400b      	ands	r3, r1
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	409a      	lsls	r2, r3
 8009b38:	0013      	movs	r3, r2
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	08da      	lsrs	r2, r3, #3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3208      	adds	r2, #8
 8009b48:	0092      	lsls	r2, r2, #2
 8009b4a:	6939      	ldr	r1, [r7, #16]
 8009b4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	2203      	movs	r2, #3
 8009b5a:	409a      	lsls	r2, r3
 8009b5c:	0013      	movs	r3, r2
 8009b5e:	43da      	mvns	r2, r3
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	4013      	ands	r3, r2
 8009b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	2203      	movs	r2, #3
 8009b6c:	401a      	ands	r2, r3
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	409a      	lsls	r2, r3
 8009b74:	0013      	movs	r3, r2
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	23c0      	movs	r3, #192	; 0xc0
 8009b88:	029b      	lsls	r3, r3, #10
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	d100      	bne.n	8009b90 <HAL_GPIO_Init+0x17c>
 8009b8e:	e0a0      	b.n	8009cd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b90:	4b57      	ldr	r3, [pc, #348]	; (8009cf0 <HAL_GPIO_Init+0x2dc>)
 8009b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b94:	4b56      	ldr	r3, [pc, #344]	; (8009cf0 <HAL_GPIO_Init+0x2dc>)
 8009b96:	2101      	movs	r1, #1
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b9c:	4a55      	ldr	r2, [pc, #340]	; (8009cf4 <HAL_GPIO_Init+0x2e0>)
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	089b      	lsrs	r3, r3, #2
 8009ba2:	3302      	adds	r3, #2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	589b      	ldr	r3, [r3, r2]
 8009ba8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2203      	movs	r2, #3
 8009bae:	4013      	ands	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	220f      	movs	r2, #15
 8009bb4:	409a      	lsls	r2, r3
 8009bb6:	0013      	movs	r3, r2
 8009bb8:	43da      	mvns	r2, r3
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	23a0      	movs	r3, #160	; 0xa0
 8009bc4:	05db      	lsls	r3, r3, #23
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d01f      	beq.n	8009c0a <HAL_GPIO_Init+0x1f6>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a4a      	ldr	r2, [pc, #296]	; (8009cf8 <HAL_GPIO_Init+0x2e4>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d019      	beq.n	8009c06 <HAL_GPIO_Init+0x1f2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a49      	ldr	r2, [pc, #292]	; (8009cfc <HAL_GPIO_Init+0x2e8>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d013      	beq.n	8009c02 <HAL_GPIO_Init+0x1ee>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a48      	ldr	r2, [pc, #288]	; (8009d00 <HAL_GPIO_Init+0x2ec>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d00d      	beq.n	8009bfe <HAL_GPIO_Init+0x1ea>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a47      	ldr	r2, [pc, #284]	; (8009d04 <HAL_GPIO_Init+0x2f0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d007      	beq.n	8009bfa <HAL_GPIO_Init+0x1e6>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a46      	ldr	r2, [pc, #280]	; (8009d08 <HAL_GPIO_Init+0x2f4>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d101      	bne.n	8009bf6 <HAL_GPIO_Init+0x1e2>
 8009bf2:	2305      	movs	r3, #5
 8009bf4:	e00a      	b.n	8009c0c <HAL_GPIO_Init+0x1f8>
 8009bf6:	2306      	movs	r3, #6
 8009bf8:	e008      	b.n	8009c0c <HAL_GPIO_Init+0x1f8>
 8009bfa:	2304      	movs	r3, #4
 8009bfc:	e006      	b.n	8009c0c <HAL_GPIO_Init+0x1f8>
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e004      	b.n	8009c0c <HAL_GPIO_Init+0x1f8>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e002      	b.n	8009c0c <HAL_GPIO_Init+0x1f8>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <HAL_GPIO_Init+0x1f8>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	2103      	movs	r1, #3
 8009c10:	400a      	ands	r2, r1
 8009c12:	0092      	lsls	r2, r2, #2
 8009c14:	4093      	lsls	r3, r2
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c1c:	4935      	ldr	r1, [pc, #212]	; (8009cf4 <HAL_GPIO_Init+0x2e0>)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	089b      	lsrs	r3, r3, #2
 8009c22:	3302      	adds	r3, #2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c2a:	4b38      	ldr	r3, [pc, #224]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	43da      	mvns	r2, r3
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	4013      	ands	r3, r2
 8009c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	2380      	movs	r3, #128	; 0x80
 8009c40:	025b      	lsls	r3, r3, #9
 8009c42:	4013      	ands	r3, r2
 8009c44:	d003      	beq.n	8009c4e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009c4e:	4b2f      	ldr	r3, [pc, #188]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8009c54:	4b2d      	ldr	r3, [pc, #180]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	43da      	mvns	r2, r3
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	4013      	ands	r3, r2
 8009c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	2380      	movs	r3, #128	; 0x80
 8009c6a:	029b      	lsls	r3, r3, #10
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009c78:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009c7e:	4b23      	ldr	r3, [pc, #140]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	43da      	mvns	r2, r3
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	2380      	movs	r3, #128	; 0x80
 8009c94:	035b      	lsls	r3, r3, #13
 8009c96:	4013      	ands	r3, r2
 8009c98:	d003      	beq.n	8009ca2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009ca2:	4b1a      	ldr	r3, [pc, #104]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009ca8:	4b18      	ldr	r3, [pc, #96]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	43da      	mvns	r2, r3
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	039b      	lsls	r3, r3, #14
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	d003      	beq.n	8009ccc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009ccc:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <HAL_GPIO_Init+0x2f8>)
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	40da      	lsrs	r2, r3
 8009ce0:	1e13      	subs	r3, r2, #0
 8009ce2:	d000      	beq.n	8009ce6 <HAL_GPIO_Init+0x2d2>
 8009ce4:	e6a2      	b.n	8009a2c <HAL_GPIO_Init+0x18>
  }
}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	46c0      	nop			; (mov r8, r8)
 8009cea:	46bd      	mov	sp, r7
 8009cec:	b006      	add	sp, #24
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	40021000 	.word	0x40021000
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	50000400 	.word	0x50000400
 8009cfc:	50000800 	.word	0x50000800
 8009d00:	50000c00 	.word	0x50000c00
 8009d04:	50001000 	.word	0x50001000
 8009d08:	50001c00 	.word	0x50001c00
 8009d0c:	40010400 	.word	0x40010400

08009d10 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	000a      	movs	r2, r1
 8009d1a:	1cbb      	adds	r3, r7, #2
 8009d1c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	1cba      	adds	r2, r7, #2
 8009d24:	8812      	ldrh	r2, [r2, #0]
 8009d26:	4013      	ands	r3, r2
 8009d28:	d004      	beq.n	8009d34 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8009d2a:	230f      	movs	r3, #15
 8009d2c:	18fb      	adds	r3, r7, r3
 8009d2e:	2201      	movs	r2, #1
 8009d30:	701a      	strb	r2, [r3, #0]
 8009d32:	e003      	b.n	8009d3c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d34:	230f      	movs	r3, #15
 8009d36:	18fb      	adds	r3, r7, r3
 8009d38:	2200      	movs	r2, #0
 8009d3a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8009d3c:	230f      	movs	r3, #15
 8009d3e:	18fb      	adds	r3, r7, r3
 8009d40:	781b      	ldrb	r3, [r3, #0]
}
 8009d42:	0018      	movs	r0, r3
 8009d44:	46bd      	mov	sp, r7
 8009d46:	b004      	add	sp, #16
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	0008      	movs	r0, r1
 8009d54:	0011      	movs	r1, r2
 8009d56:	1cbb      	adds	r3, r7, #2
 8009d58:	1c02      	adds	r2, r0, #0
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	1c7b      	adds	r3, r7, #1
 8009d5e:	1c0a      	adds	r2, r1, #0
 8009d60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d62:	1c7b      	adds	r3, r7, #1
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d6a:	1cbb      	adds	r3, r7, #2
 8009d6c:	881a      	ldrh	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8009d72:	e003      	b.n	8009d7c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8009d74:	1cbb      	adds	r3, r7, #2
 8009d76:	881a      	ldrh	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009d7c:	46c0      	nop			; (mov r8, r8)
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	b002      	add	sp, #8
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d84:	b5b0      	push	{r4, r5, r7, lr}
 8009d86:	b08a      	sub	sp, #40	; 0x28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	f000 fbbf 	bl	800a516 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d98:	4bc9      	ldr	r3, [pc, #804]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	220c      	movs	r2, #12
 8009d9e:	4013      	ands	r3, r2
 8009da0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009da2:	4bc7      	ldr	r3, [pc, #796]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	2380      	movs	r3, #128	; 0x80
 8009da8:	025b      	lsls	r3, r3, #9
 8009daa:	4013      	ands	r3, r2
 8009dac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2201      	movs	r2, #1
 8009db4:	4013      	ands	r3, r2
 8009db6:	d100      	bne.n	8009dba <HAL_RCC_OscConfig+0x36>
 8009db8:	e07e      	b.n	8009eb8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	d007      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b0c      	cmp	r3, #12
 8009dc4:	d112      	bne.n	8009dec <HAL_RCC_OscConfig+0x68>
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	025b      	lsls	r3, r3, #9
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d10d      	bne.n	8009dec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dd0:	4bbb      	ldr	r3, [pc, #748]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	2380      	movs	r3, #128	; 0x80
 8009dd6:	029b      	lsls	r3, r3, #10
 8009dd8:	4013      	ands	r3, r2
 8009dda:	d100      	bne.n	8009dde <HAL_RCC_OscConfig+0x5a>
 8009ddc:	e06b      	b.n	8009eb6 <HAL_RCC_OscConfig+0x132>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d167      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	f000 fb95 	bl	800a516 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685a      	ldr	r2, [r3, #4]
 8009df0:	2380      	movs	r3, #128	; 0x80
 8009df2:	025b      	lsls	r3, r3, #9
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d107      	bne.n	8009e08 <HAL_RCC_OscConfig+0x84>
 8009df8:	4bb1      	ldr	r3, [pc, #708]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	4bb0      	ldr	r3, [pc, #704]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009dfe:	2180      	movs	r1, #128	; 0x80
 8009e00:	0249      	lsls	r1, r1, #9
 8009e02:	430a      	orrs	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	e027      	b.n	8009e58 <HAL_RCC_OscConfig+0xd4>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	23a0      	movs	r3, #160	; 0xa0
 8009e0e:	02db      	lsls	r3, r3, #11
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d10e      	bne.n	8009e32 <HAL_RCC_OscConfig+0xae>
 8009e14:	4baa      	ldr	r3, [pc, #680]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	4ba9      	ldr	r3, [pc, #676]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e1a:	2180      	movs	r1, #128	; 0x80
 8009e1c:	02c9      	lsls	r1, r1, #11
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	4ba7      	ldr	r3, [pc, #668]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4ba6      	ldr	r3, [pc, #664]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e28:	2180      	movs	r1, #128	; 0x80
 8009e2a:	0249      	lsls	r1, r1, #9
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	e012      	b.n	8009e58 <HAL_RCC_OscConfig+0xd4>
 8009e32:	4ba3      	ldr	r3, [pc, #652]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4ba2      	ldr	r3, [pc, #648]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e38:	49a2      	ldr	r1, [pc, #648]	; (800a0c4 <HAL_RCC_OscConfig+0x340>)
 8009e3a:	400a      	ands	r2, r1
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	4ba0      	ldr	r3, [pc, #640]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	2380      	movs	r3, #128	; 0x80
 8009e44:	025b      	lsls	r3, r3, #9
 8009e46:	4013      	ands	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4b9c      	ldr	r3, [pc, #624]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	4b9b      	ldr	r3, [pc, #620]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e52:	499d      	ldr	r1, [pc, #628]	; (800a0c8 <HAL_RCC_OscConfig+0x344>)
 8009e54:	400a      	ands	r2, r1
 8009e56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d015      	beq.n	8009e8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e60:	f7ff fcf6 	bl	8009850 <HAL_GetTick>
 8009e64:	0003      	movs	r3, r0
 8009e66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e68:	e009      	b.n	8009e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e6a:	f7ff fcf1 	bl	8009850 <HAL_GetTick>
 8009e6e:	0002      	movs	r2, r0
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	2b64      	cmp	r3, #100	; 0x64
 8009e76:	d902      	bls.n	8009e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	f000 fb4c 	bl	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e7e:	4b90      	ldr	r3, [pc, #576]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	2380      	movs	r3, #128	; 0x80
 8009e84:	029b      	lsls	r3, r3, #10
 8009e86:	4013      	ands	r3, r2
 8009e88:	d0ef      	beq.n	8009e6a <HAL_RCC_OscConfig+0xe6>
 8009e8a:	e015      	b.n	8009eb8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e8c:	f7ff fce0 	bl	8009850 <HAL_GetTick>
 8009e90:	0003      	movs	r3, r0
 8009e92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e94:	e008      	b.n	8009ea8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e96:	f7ff fcdb 	bl	8009850 <HAL_GetTick>
 8009e9a:	0002      	movs	r2, r0
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	2b64      	cmp	r3, #100	; 0x64
 8009ea2:	d901      	bls.n	8009ea8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e336      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ea8:	4b85      	ldr	r3, [pc, #532]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	2380      	movs	r3, #128	; 0x80
 8009eae:	029b      	lsls	r3, r3, #10
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	d1f0      	bne.n	8009e96 <HAL_RCC_OscConfig+0x112>
 8009eb4:	e000      	b.n	8009eb8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eb6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	d100      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x140>
 8009ec2:	e099      	b.n	8009ff8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	2220      	movs	r2, #32
 8009ece:	4013      	ands	r3, r2
 8009ed0:	d009      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8009ed2:	4b7b      	ldr	r3, [pc, #492]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	4b7a      	ldr	r3, [pc, #488]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009ed8:	2120      	movs	r1, #32
 8009eda:	430a      	orrs	r2, r1
 8009edc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	4393      	bics	r3, r2
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d005      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	2b0c      	cmp	r3, #12
 8009ef0:	d13e      	bne.n	8009f70 <HAL_RCC_OscConfig+0x1ec>
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d13b      	bne.n	8009f70 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8009ef8:	4b71      	ldr	r3, [pc, #452]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2204      	movs	r2, #4
 8009efe:	4013      	ands	r3, r2
 8009f00:	d004      	beq.n	8009f0c <HAL_RCC_OscConfig+0x188>
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e304      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f0c:	4b6c      	ldr	r3, [pc, #432]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a6e      	ldr	r2, [pc, #440]	; (800a0cc <HAL_RCC_OscConfig+0x348>)
 8009f12:	4013      	ands	r3, r2
 8009f14:	0019      	movs	r1, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	021a      	lsls	r2, r3, #8
 8009f1c:	4b68      	ldr	r3, [pc, #416]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009f22:	4b67      	ldr	r3, [pc, #412]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2209      	movs	r2, #9
 8009f28:	4393      	bics	r3, r2
 8009f2a:	0019      	movs	r1, r3
 8009f2c:	4b64      	ldr	r3, [pc, #400]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f30:	430a      	orrs	r2, r1
 8009f32:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f34:	f000 fc42 	bl	800a7bc <HAL_RCC_GetSysClockFreq>
 8009f38:	0001      	movs	r1, r0
 8009f3a:	4b61      	ldr	r3, [pc, #388]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	091b      	lsrs	r3, r3, #4
 8009f40:	220f      	movs	r2, #15
 8009f42:	4013      	ands	r3, r2
 8009f44:	4a62      	ldr	r2, [pc, #392]	; (800a0d0 <HAL_RCC_OscConfig+0x34c>)
 8009f46:	5cd3      	ldrb	r3, [r2, r3]
 8009f48:	000a      	movs	r2, r1
 8009f4a:	40da      	lsrs	r2, r3
 8009f4c:	4b61      	ldr	r3, [pc, #388]	; (800a0d4 <HAL_RCC_OscConfig+0x350>)
 8009f4e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8009f50:	4b61      	ldr	r3, [pc, #388]	; (800a0d8 <HAL_RCC_OscConfig+0x354>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2513      	movs	r5, #19
 8009f56:	197c      	adds	r4, r7, r5
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f7ff fc33 	bl	80097c4 <HAL_InitTick>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8009f62:	197b      	adds	r3, r7, r5
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d046      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8009f6a:	197b      	adds	r3, r7, r5
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	e2d2      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d027      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009f76:	4b52      	ldr	r3, [pc, #328]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2209      	movs	r2, #9
 8009f7c:	4393      	bics	r3, r2
 8009f7e:	0019      	movs	r1, r3
 8009f80:	4b4f      	ldr	r3, [pc, #316]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f84:	430a      	orrs	r2, r1
 8009f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f88:	f7ff fc62 	bl	8009850 <HAL_GetTick>
 8009f8c:	0003      	movs	r3, r0
 8009f8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f90:	e008      	b.n	8009fa4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f92:	f7ff fc5d 	bl	8009850 <HAL_GetTick>
 8009f96:	0002      	movs	r2, r0
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d901      	bls.n	8009fa4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e2b8      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fa4:	4b46      	ldr	r3, [pc, #280]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2204      	movs	r2, #4
 8009faa:	4013      	ands	r3, r2
 8009fac:	d0f1      	beq.n	8009f92 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fae:	4b44      	ldr	r3, [pc, #272]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4a46      	ldr	r2, [pc, #280]	; (800a0cc <HAL_RCC_OscConfig+0x348>)
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	0019      	movs	r1, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	021a      	lsls	r2, r3, #8
 8009fbe:	4b40      	ldr	r3, [pc, #256]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	605a      	str	r2, [r3, #4]
 8009fc4:	e018      	b.n	8009ff8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fc6:	4b3e      	ldr	r3, [pc, #248]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	4b3d      	ldr	r3, [pc, #244]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009fcc:	2101      	movs	r1, #1
 8009fce:	438a      	bics	r2, r1
 8009fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fd2:	f7ff fc3d 	bl	8009850 <HAL_GetTick>
 8009fd6:	0003      	movs	r3, r0
 8009fd8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fda:	e008      	b.n	8009fee <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fdc:	f7ff fc38 	bl	8009850 <HAL_GetTick>
 8009fe0:	0002      	movs	r2, r0
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d901      	bls.n	8009fee <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e293      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fee:	4b34      	ldr	r3, [pc, #208]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2204      	movs	r2, #4
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	d1f1      	bne.n	8009fdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2210      	movs	r2, #16
 8009ffe:	4013      	ands	r3, r2
 800a000:	d100      	bne.n	800a004 <HAL_RCC_OscConfig+0x280>
 800a002:	e0a2      	b.n	800a14a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d140      	bne.n	800a08c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a00a:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	2380      	movs	r3, #128	; 0x80
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4013      	ands	r3, r2
 800a014:	d005      	beq.n	800a022 <HAL_RCC_OscConfig+0x29e>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e279      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a022:	4b27      	ldr	r3, [pc, #156]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	4a2d      	ldr	r2, [pc, #180]	; (800a0dc <HAL_RCC_OscConfig+0x358>)
 800a028:	4013      	ands	r3, r2
 800a02a:	0019      	movs	r1, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a030:	4b23      	ldr	r3, [pc, #140]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a036:	4b22      	ldr	r3, [pc, #136]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	021b      	lsls	r3, r3, #8
 800a03c:	0a19      	lsrs	r1, r3, #8
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	061a      	lsls	r2, r3, #24
 800a044:	4b1e      	ldr	r3, [pc, #120]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	0b5b      	lsrs	r3, r3, #13
 800a050:	3301      	adds	r3, #1
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	0212      	lsls	r2, r2, #8
 800a056:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a058:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	091b      	lsrs	r3, r3, #4
 800a05e:	210f      	movs	r1, #15
 800a060:	400b      	ands	r3, r1
 800a062:	491b      	ldr	r1, [pc, #108]	; (800a0d0 <HAL_RCC_OscConfig+0x34c>)
 800a064:	5ccb      	ldrb	r3, [r1, r3]
 800a066:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a068:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <HAL_RCC_OscConfig+0x350>)
 800a06a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800a06c:	4b1a      	ldr	r3, [pc, #104]	; (800a0d8 <HAL_RCC_OscConfig+0x354>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2513      	movs	r5, #19
 800a072:	197c      	adds	r4, r7, r5
 800a074:	0018      	movs	r0, r3
 800a076:	f7ff fba5 	bl	80097c4 <HAL_InitTick>
 800a07a:	0003      	movs	r3, r0
 800a07c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800a07e:	197b      	adds	r3, r7, r5
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d061      	beq.n	800a14a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800a086:	197b      	adds	r3, r7, r5
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	e244      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d040      	beq.n	800a116 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a094:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	4b09      	ldr	r3, [pc, #36]	; (800a0c0 <HAL_RCC_OscConfig+0x33c>)
 800a09a:	2180      	movs	r1, #128	; 0x80
 800a09c:	0049      	lsls	r1, r1, #1
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0a2:	f7ff fbd5 	bl	8009850 <HAL_GetTick>
 800a0a6:	0003      	movs	r3, r0
 800a0a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a0aa:	e019      	b.n	800a0e0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a0ac:	f7ff fbd0 	bl	8009850 <HAL_GetTick>
 800a0b0:	0002      	movs	r2, r0
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d912      	bls.n	800a0e0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e22b      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
 800a0be:	46c0      	nop			; (mov r8, r8)
 800a0c0:	40021000 	.word	0x40021000
 800a0c4:	fffeffff 	.word	0xfffeffff
 800a0c8:	fffbffff 	.word	0xfffbffff
 800a0cc:	ffffe0ff 	.word	0xffffe0ff
 800a0d0:	0800bd2c 	.word	0x0800bd2c
 800a0d4:	20000004 	.word	0x20000004
 800a0d8:	20000008 	.word	0x20000008
 800a0dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a0e0:	4bca      	ldr	r3, [pc, #808]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	2380      	movs	r3, #128	; 0x80
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	d0df      	beq.n	800a0ac <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a0ec:	4bc7      	ldr	r3, [pc, #796]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4ac7      	ldr	r2, [pc, #796]	; (800a410 <HAL_RCC_OscConfig+0x68c>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	0019      	movs	r1, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0fa:	4bc4      	ldr	r3, [pc, #784]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a100:	4bc2      	ldr	r3, [pc, #776]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	021b      	lsls	r3, r3, #8
 800a106:	0a19      	lsrs	r1, r3, #8
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	061a      	lsls	r2, r3, #24
 800a10e:	4bbf      	ldr	r3, [pc, #764]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a110:	430a      	orrs	r2, r1
 800a112:	605a      	str	r2, [r3, #4]
 800a114:	e019      	b.n	800a14a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a116:	4bbd      	ldr	r3, [pc, #756]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4bbc      	ldr	r3, [pc, #752]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a11c:	49bd      	ldr	r1, [pc, #756]	; (800a414 <HAL_RCC_OscConfig+0x690>)
 800a11e:	400a      	ands	r2, r1
 800a120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a122:	f7ff fb95 	bl	8009850 <HAL_GetTick>
 800a126:	0003      	movs	r3, r0
 800a128:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a12a:	e008      	b.n	800a13e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a12c:	f7ff fb90 	bl	8009850 <HAL_GetTick>
 800a130:	0002      	movs	r2, r0
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	2b02      	cmp	r3, #2
 800a138:	d901      	bls.n	800a13e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e1eb      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a13e:	4bb3      	ldr	r3, [pc, #716]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	2380      	movs	r3, #128	; 0x80
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4013      	ands	r3, r2
 800a148:	d1f0      	bne.n	800a12c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2208      	movs	r2, #8
 800a150:	4013      	ands	r3, r2
 800a152:	d036      	beq.n	800a1c2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d019      	beq.n	800a190 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a15c:	4bab      	ldr	r3, [pc, #684]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a15e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a160:	4baa      	ldr	r3, [pc, #680]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a162:	2101      	movs	r1, #1
 800a164:	430a      	orrs	r2, r1
 800a166:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a168:	f7ff fb72 	bl	8009850 <HAL_GetTick>
 800a16c:	0003      	movs	r3, r0
 800a16e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a170:	e008      	b.n	800a184 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a172:	f7ff fb6d 	bl	8009850 <HAL_GetTick>
 800a176:	0002      	movs	r2, r0
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d901      	bls.n	800a184 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e1c8      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a184:	4ba1      	ldr	r3, [pc, #644]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a188:	2202      	movs	r2, #2
 800a18a:	4013      	ands	r3, r2
 800a18c:	d0f1      	beq.n	800a172 <HAL_RCC_OscConfig+0x3ee>
 800a18e:	e018      	b.n	800a1c2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a190:	4b9e      	ldr	r3, [pc, #632]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a194:	4b9d      	ldr	r3, [pc, #628]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a196:	2101      	movs	r1, #1
 800a198:	438a      	bics	r2, r1
 800a19a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a19c:	f7ff fb58 	bl	8009850 <HAL_GetTick>
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a1a4:	e008      	b.n	800a1b8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1a6:	f7ff fb53 	bl	8009850 <HAL_GetTick>
 800a1aa:	0002      	movs	r2, r0
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e1ae      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a1b8:	4b94      	ldr	r3, [pc, #592]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1bc:	2202      	movs	r2, #2
 800a1be:	4013      	ands	r3, r2
 800a1c0:	d1f1      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2204      	movs	r2, #4
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	d100      	bne.n	800a1ce <HAL_RCC_OscConfig+0x44a>
 800a1cc:	e0ae      	b.n	800a32c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1ce:	2023      	movs	r0, #35	; 0x23
 800a1d0:	183b      	adds	r3, r7, r0
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1d6:	4b8d      	ldr	r3, [pc, #564]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1da:	2380      	movs	r3, #128	; 0x80
 800a1dc:	055b      	lsls	r3, r3, #21
 800a1de:	4013      	ands	r3, r2
 800a1e0:	d109      	bne.n	800a1f6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1e2:	4b8a      	ldr	r3, [pc, #552]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e6:	4b89      	ldr	r3, [pc, #548]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a1e8:	2180      	movs	r1, #128	; 0x80
 800a1ea:	0549      	lsls	r1, r1, #21
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800a1f0:	183b      	adds	r3, r7, r0
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1f6:	4b88      	ldr	r3, [pc, #544]	; (800a418 <HAL_RCC_OscConfig+0x694>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	2380      	movs	r3, #128	; 0x80
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	4013      	ands	r3, r2
 800a200:	d11a      	bne.n	800a238 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a202:	4b85      	ldr	r3, [pc, #532]	; (800a418 <HAL_RCC_OscConfig+0x694>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	4b84      	ldr	r3, [pc, #528]	; (800a418 <HAL_RCC_OscConfig+0x694>)
 800a208:	2180      	movs	r1, #128	; 0x80
 800a20a:	0049      	lsls	r1, r1, #1
 800a20c:	430a      	orrs	r2, r1
 800a20e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a210:	f7ff fb1e 	bl	8009850 <HAL_GetTick>
 800a214:	0003      	movs	r3, r0
 800a216:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a218:	e008      	b.n	800a22c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a21a:	f7ff fb19 	bl	8009850 <HAL_GetTick>
 800a21e:	0002      	movs	r2, r0
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	2b64      	cmp	r3, #100	; 0x64
 800a226:	d901      	bls.n	800a22c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e174      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a22c:	4b7a      	ldr	r3, [pc, #488]	; (800a418 <HAL_RCC_OscConfig+0x694>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4013      	ands	r3, r2
 800a236:	d0f0      	beq.n	800a21a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	2380      	movs	r3, #128	; 0x80
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	429a      	cmp	r2, r3
 800a242:	d107      	bne.n	800a254 <HAL_RCC_OscConfig+0x4d0>
 800a244:	4b71      	ldr	r3, [pc, #452]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a248:	4b70      	ldr	r3, [pc, #448]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a24a:	2180      	movs	r1, #128	; 0x80
 800a24c:	0049      	lsls	r1, r1, #1
 800a24e:	430a      	orrs	r2, r1
 800a250:	651a      	str	r2, [r3, #80]	; 0x50
 800a252:	e031      	b.n	800a2b8 <HAL_RCC_OscConfig+0x534>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10c      	bne.n	800a276 <HAL_RCC_OscConfig+0x4f2>
 800a25c:	4b6b      	ldr	r3, [pc, #428]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a25e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a260:	4b6a      	ldr	r3, [pc, #424]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a262:	496c      	ldr	r1, [pc, #432]	; (800a414 <HAL_RCC_OscConfig+0x690>)
 800a264:	400a      	ands	r2, r1
 800a266:	651a      	str	r2, [r3, #80]	; 0x50
 800a268:	4b68      	ldr	r3, [pc, #416]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a26a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a26c:	4b67      	ldr	r3, [pc, #412]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a26e:	496b      	ldr	r1, [pc, #428]	; (800a41c <HAL_RCC_OscConfig+0x698>)
 800a270:	400a      	ands	r2, r1
 800a272:	651a      	str	r2, [r3, #80]	; 0x50
 800a274:	e020      	b.n	800a2b8 <HAL_RCC_OscConfig+0x534>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	23a0      	movs	r3, #160	; 0xa0
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	429a      	cmp	r2, r3
 800a280:	d10e      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x51c>
 800a282:	4b62      	ldr	r3, [pc, #392]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a286:	4b61      	ldr	r3, [pc, #388]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a288:	2180      	movs	r1, #128	; 0x80
 800a28a:	00c9      	lsls	r1, r1, #3
 800a28c:	430a      	orrs	r2, r1
 800a28e:	651a      	str	r2, [r3, #80]	; 0x50
 800a290:	4b5e      	ldr	r3, [pc, #376]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a294:	4b5d      	ldr	r3, [pc, #372]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a296:	2180      	movs	r1, #128	; 0x80
 800a298:	0049      	lsls	r1, r1, #1
 800a29a:	430a      	orrs	r2, r1
 800a29c:	651a      	str	r2, [r3, #80]	; 0x50
 800a29e:	e00b      	b.n	800a2b8 <HAL_RCC_OscConfig+0x534>
 800a2a0:	4b5a      	ldr	r3, [pc, #360]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a2a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2a4:	4b59      	ldr	r3, [pc, #356]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a2a6:	495b      	ldr	r1, [pc, #364]	; (800a414 <HAL_RCC_OscConfig+0x690>)
 800a2a8:	400a      	ands	r2, r1
 800a2aa:	651a      	str	r2, [r3, #80]	; 0x50
 800a2ac:	4b57      	ldr	r3, [pc, #348]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a2ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2b0:	4b56      	ldr	r3, [pc, #344]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a2b2:	495a      	ldr	r1, [pc, #360]	; (800a41c <HAL_RCC_OscConfig+0x698>)
 800a2b4:	400a      	ands	r2, r1
 800a2b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d015      	beq.n	800a2ec <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2c0:	f7ff fac6 	bl	8009850 <HAL_GetTick>
 800a2c4:	0003      	movs	r3, r0
 800a2c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2c8:	e009      	b.n	800a2de <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2ca:	f7ff fac1 	bl	8009850 <HAL_GetTick>
 800a2ce:	0002      	movs	r2, r0
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	4a52      	ldr	r2, [pc, #328]	; (800a420 <HAL_RCC_OscConfig+0x69c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d901      	bls.n	800a2de <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e11b      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2de:	4b4b      	ldr	r3, [pc, #300]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a2e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2e2:	2380      	movs	r3, #128	; 0x80
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	d0ef      	beq.n	800a2ca <HAL_RCC_OscConfig+0x546>
 800a2ea:	e014      	b.n	800a316 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2ec:	f7ff fab0 	bl	8009850 <HAL_GetTick>
 800a2f0:	0003      	movs	r3, r0
 800a2f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2f4:	e009      	b.n	800a30a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2f6:	f7ff faab 	bl	8009850 <HAL_GetTick>
 800a2fa:	0002      	movs	r2, r0
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	4a47      	ldr	r2, [pc, #284]	; (800a420 <HAL_RCC_OscConfig+0x69c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d901      	bls.n	800a30a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e105      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a30a:	4b40      	ldr	r3, [pc, #256]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a30c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a30e:	2380      	movs	r3, #128	; 0x80
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4013      	ands	r3, r2
 800a314:	d1ef      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a316:	2323      	movs	r3, #35	; 0x23
 800a318:	18fb      	adds	r3, r7, r3
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d105      	bne.n	800a32c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a320:	4b3a      	ldr	r3, [pc, #232]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a324:	4b39      	ldr	r3, [pc, #228]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a326:	493f      	ldr	r1, [pc, #252]	; (800a424 <HAL_RCC_OscConfig+0x6a0>)
 800a328:	400a      	ands	r2, r1
 800a32a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2220      	movs	r2, #32
 800a332:	4013      	ands	r3, r2
 800a334:	d049      	beq.n	800a3ca <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d026      	beq.n	800a38c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800a33e:	4b33      	ldr	r3, [pc, #204]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	4b32      	ldr	r3, [pc, #200]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a344:	2101      	movs	r1, #1
 800a346:	430a      	orrs	r2, r1
 800a348:	609a      	str	r2, [r3, #8]
 800a34a:	4b30      	ldr	r3, [pc, #192]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a34c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a34e:	4b2f      	ldr	r3, [pc, #188]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a350:	2101      	movs	r1, #1
 800a352:	430a      	orrs	r2, r1
 800a354:	635a      	str	r2, [r3, #52]	; 0x34
 800a356:	4b34      	ldr	r3, [pc, #208]	; (800a428 <HAL_RCC_OscConfig+0x6a4>)
 800a358:	6a1a      	ldr	r2, [r3, #32]
 800a35a:	4b33      	ldr	r3, [pc, #204]	; (800a428 <HAL_RCC_OscConfig+0x6a4>)
 800a35c:	2180      	movs	r1, #128	; 0x80
 800a35e:	0189      	lsls	r1, r1, #6
 800a360:	430a      	orrs	r2, r1
 800a362:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a364:	f7ff fa74 	bl	8009850 <HAL_GetTick>
 800a368:	0003      	movs	r3, r0
 800a36a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a36c:	e008      	b.n	800a380 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a36e:	f7ff fa6f 	bl	8009850 <HAL_GetTick>
 800a372:	0002      	movs	r2, r0
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d901      	bls.n	800a380 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e0ca      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a380:	4b22      	ldr	r3, [pc, #136]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	2202      	movs	r2, #2
 800a386:	4013      	ands	r3, r2
 800a388:	d0f1      	beq.n	800a36e <HAL_RCC_OscConfig+0x5ea>
 800a38a:	e01e      	b.n	800a3ca <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800a38c:	4b1f      	ldr	r3, [pc, #124]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	4b1e      	ldr	r3, [pc, #120]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a392:	2101      	movs	r1, #1
 800a394:	438a      	bics	r2, r1
 800a396:	609a      	str	r2, [r3, #8]
 800a398:	4b23      	ldr	r3, [pc, #140]	; (800a428 <HAL_RCC_OscConfig+0x6a4>)
 800a39a:	6a1a      	ldr	r2, [r3, #32]
 800a39c:	4b22      	ldr	r3, [pc, #136]	; (800a428 <HAL_RCC_OscConfig+0x6a4>)
 800a39e:	4923      	ldr	r1, [pc, #140]	; (800a42c <HAL_RCC_OscConfig+0x6a8>)
 800a3a0:	400a      	ands	r2, r1
 800a3a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3a4:	f7ff fa54 	bl	8009850 <HAL_GetTick>
 800a3a8:	0003      	movs	r3, r0
 800a3aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3ac:	e008      	b.n	800a3c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3ae:	f7ff fa4f 	bl	8009850 <HAL_GetTick>
 800a3b2:	0002      	movs	r2, r0
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d901      	bls.n	800a3c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e0aa      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3c0:	4b12      	ldr	r3, [pc, #72]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	d1f1      	bne.n	800a3ae <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d100      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x650>
 800a3d2:	e09f      	b.n	800a514 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	2b0c      	cmp	r3, #12
 800a3d8:	d100      	bne.n	800a3dc <HAL_RCC_OscConfig+0x658>
 800a3da:	e078      	b.n	800a4ce <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d159      	bne.n	800a498 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3e4:	4b09      	ldr	r3, [pc, #36]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	4b08      	ldr	r3, [pc, #32]	; (800a40c <HAL_RCC_OscConfig+0x688>)
 800a3ea:	4911      	ldr	r1, [pc, #68]	; (800a430 <HAL_RCC_OscConfig+0x6ac>)
 800a3ec:	400a      	ands	r2, r1
 800a3ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3f0:	f7ff fa2e 	bl	8009850 <HAL_GetTick>
 800a3f4:	0003      	movs	r3, r0
 800a3f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a3f8:	e01c      	b.n	800a434 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3fa:	f7ff fa29 	bl	8009850 <HAL_GetTick>
 800a3fe:	0002      	movs	r2, r0
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d915      	bls.n	800a434 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e084      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
 800a40c:	40021000 	.word	0x40021000
 800a410:	ffff1fff 	.word	0xffff1fff
 800a414:	fffffeff 	.word	0xfffffeff
 800a418:	40007000 	.word	0x40007000
 800a41c:	fffffbff 	.word	0xfffffbff
 800a420:	00001388 	.word	0x00001388
 800a424:	efffffff 	.word	0xefffffff
 800a428:	40010000 	.word	0x40010000
 800a42c:	ffffdfff 	.word	0xffffdfff
 800a430:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a434:	4b3a      	ldr	r3, [pc, #232]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	2380      	movs	r3, #128	; 0x80
 800a43a:	049b      	lsls	r3, r3, #18
 800a43c:	4013      	ands	r3, r2
 800a43e:	d1dc      	bne.n	800a3fa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a440:	4b37      	ldr	r3, [pc, #220]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	4a37      	ldr	r2, [pc, #220]	; (800a524 <HAL_RCC_OscConfig+0x7a0>)
 800a446:	4013      	ands	r3, r2
 800a448:	0019      	movs	r1, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a458:	431a      	orrs	r2, r3
 800a45a:	4b31      	ldr	r3, [pc, #196]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a45c:	430a      	orrs	r2, r1
 800a45e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a460:	4b2f      	ldr	r3, [pc, #188]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	4b2e      	ldr	r3, [pc, #184]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a466:	2180      	movs	r1, #128	; 0x80
 800a468:	0449      	lsls	r1, r1, #17
 800a46a:	430a      	orrs	r2, r1
 800a46c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a46e:	f7ff f9ef 	bl	8009850 <HAL_GetTick>
 800a472:	0003      	movs	r3, r0
 800a474:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a476:	e008      	b.n	800a48a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a478:	f7ff f9ea 	bl	8009850 <HAL_GetTick>
 800a47c:	0002      	movs	r2, r0
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d901      	bls.n	800a48a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e045      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a48a:	4b25      	ldr	r3, [pc, #148]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	2380      	movs	r3, #128	; 0x80
 800a490:	049b      	lsls	r3, r3, #18
 800a492:	4013      	ands	r3, r2
 800a494:	d0f0      	beq.n	800a478 <HAL_RCC_OscConfig+0x6f4>
 800a496:	e03d      	b.n	800a514 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a498:	4b21      	ldr	r3, [pc, #132]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	4b20      	ldr	r3, [pc, #128]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a49e:	4922      	ldr	r1, [pc, #136]	; (800a528 <HAL_RCC_OscConfig+0x7a4>)
 800a4a0:	400a      	ands	r2, r1
 800a4a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4a4:	f7ff f9d4 	bl	8009850 <HAL_GetTick>
 800a4a8:	0003      	movs	r3, r0
 800a4aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a4ac:	e008      	b.n	800a4c0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4ae:	f7ff f9cf 	bl	8009850 <HAL_GetTick>
 800a4b2:	0002      	movs	r2, r0
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e02a      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a4c0:	4b17      	ldr	r3, [pc, #92]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	049b      	lsls	r3, r3, #18
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	d1f0      	bne.n	800a4ae <HAL_RCC_OscConfig+0x72a>
 800a4cc:	e022      	b.n	800a514 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d101      	bne.n	800a4da <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e01d      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a4da:	4b11      	ldr	r3, [pc, #68]	; (800a520 <HAL_RCC_OscConfig+0x79c>)
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e0:	69ba      	ldr	r2, [r7, #24]
 800a4e2:	2380      	movs	r3, #128	; 0x80
 800a4e4:	025b      	lsls	r3, r3, #9
 800a4e6:	401a      	ands	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d10f      	bne.n	800a510 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	23f0      	movs	r3, #240	; 0xf0
 800a4f4:	039b      	lsls	r3, r3, #14
 800a4f6:	401a      	ands	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d107      	bne.n	800a510 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	23c0      	movs	r3, #192	; 0xc0
 800a504:	041b      	lsls	r3, r3, #16
 800a506:	401a      	ands	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d001      	beq.n	800a514 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e000      	b.n	800a516 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	0018      	movs	r0, r3
 800a518:	46bd      	mov	sp, r7
 800a51a:	b00a      	add	sp, #40	; 0x28
 800a51c:	bdb0      	pop	{r4, r5, r7, pc}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	40021000 	.word	0x40021000
 800a524:	ff02ffff 	.word	0xff02ffff
 800a528:	feffffff 	.word	0xfeffffff

0800a52c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a52c:	b5b0      	push	{r4, r5, r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e128      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a540:	4b96      	ldr	r3, [pc, #600]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2201      	movs	r2, #1
 800a546:	4013      	ands	r3, r2
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d91e      	bls.n	800a58c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a54e:	4b93      	ldr	r3, [pc, #588]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2201      	movs	r2, #1
 800a554:	4393      	bics	r3, r2
 800a556:	0019      	movs	r1, r3
 800a558:	4b90      	ldr	r3, [pc, #576]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a560:	f7ff f976 	bl	8009850 <HAL_GetTick>
 800a564:	0003      	movs	r3, r0
 800a566:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a568:	e009      	b.n	800a57e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a56a:	f7ff f971 	bl	8009850 <HAL_GetTick>
 800a56e:	0002      	movs	r2, r0
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	4a8a      	ldr	r2, [pc, #552]	; (800a7a0 <HAL_RCC_ClockConfig+0x274>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e109      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a57e:	4b87      	ldr	r3, [pc, #540]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2201      	movs	r2, #1
 800a584:	4013      	ands	r3, r2
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d1ee      	bne.n	800a56a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2202      	movs	r2, #2
 800a592:	4013      	ands	r3, r2
 800a594:	d009      	beq.n	800a5aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a596:	4b83      	ldr	r3, [pc, #524]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	22f0      	movs	r2, #240	; 0xf0
 800a59c:	4393      	bics	r3, r2
 800a59e:	0019      	movs	r1, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	4b7f      	ldr	r3, [pc, #508]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	d100      	bne.n	800a5b6 <HAL_RCC_ClockConfig+0x8a>
 800a5b4:	e089      	b.n	800a6ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d107      	bne.n	800a5ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5be:	4b79      	ldr	r3, [pc, #484]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	2380      	movs	r3, #128	; 0x80
 800a5c4:	029b      	lsls	r3, r3, #10
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	d120      	bne.n	800a60c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e0e1      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d107      	bne.n	800a5e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5d6:	4b73      	ldr	r3, [pc, #460]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	2380      	movs	r3, #128	; 0x80
 800a5dc:	049b      	lsls	r3, r3, #18
 800a5de:	4013      	ands	r3, r2
 800a5e0:	d114      	bne.n	800a60c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e0d5      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d106      	bne.n	800a5fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5ee:	4b6d      	ldr	r3, [pc, #436]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2204      	movs	r2, #4
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	d109      	bne.n	800a60c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e0ca      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a5fc:	4b69      	ldr	r3, [pc, #420]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	2380      	movs	r3, #128	; 0x80
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4013      	ands	r3, r2
 800a606:	d101      	bne.n	800a60c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e0c2      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a60c:	4b65      	ldr	r3, [pc, #404]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	2203      	movs	r2, #3
 800a612:	4393      	bics	r3, r2
 800a614:	0019      	movs	r1, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	4b62      	ldr	r3, [pc, #392]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a61c:	430a      	orrs	r2, r1
 800a61e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a620:	f7ff f916 	bl	8009850 <HAL_GetTick>
 800a624:	0003      	movs	r3, r0
 800a626:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d111      	bne.n	800a654 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a630:	e009      	b.n	800a646 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a632:	f7ff f90d 	bl	8009850 <HAL_GetTick>
 800a636:	0002      	movs	r2, r0
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	4a58      	ldr	r2, [pc, #352]	; (800a7a0 <HAL_RCC_ClockConfig+0x274>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d901      	bls.n	800a646 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e0a5      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a646:	4b57      	ldr	r3, [pc, #348]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	220c      	movs	r2, #12
 800a64c:	4013      	ands	r3, r2
 800a64e:	2b08      	cmp	r3, #8
 800a650:	d1ef      	bne.n	800a632 <HAL_RCC_ClockConfig+0x106>
 800a652:	e03a      	b.n	800a6ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d111      	bne.n	800a680 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a65c:	e009      	b.n	800a672 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a65e:	f7ff f8f7 	bl	8009850 <HAL_GetTick>
 800a662:	0002      	movs	r2, r0
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	4a4d      	ldr	r2, [pc, #308]	; (800a7a0 <HAL_RCC_ClockConfig+0x274>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d901      	bls.n	800a672 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e08f      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a672:	4b4c      	ldr	r3, [pc, #304]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	220c      	movs	r2, #12
 800a678:	4013      	ands	r3, r2
 800a67a:	2b0c      	cmp	r3, #12
 800a67c:	d1ef      	bne.n	800a65e <HAL_RCC_ClockConfig+0x132>
 800a67e:	e024      	b.n	800a6ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d11b      	bne.n	800a6c0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a688:	e009      	b.n	800a69e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a68a:	f7ff f8e1 	bl	8009850 <HAL_GetTick>
 800a68e:	0002      	movs	r2, r0
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	4a42      	ldr	r2, [pc, #264]	; (800a7a0 <HAL_RCC_ClockConfig+0x274>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d901      	bls.n	800a69e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e079      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a69e:	4b41      	ldr	r3, [pc, #260]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	220c      	movs	r2, #12
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d1ef      	bne.n	800a68a <HAL_RCC_ClockConfig+0x15e>
 800a6aa:	e00e      	b.n	800a6ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6ac:	f7ff f8d0 	bl	8009850 <HAL_GetTick>
 800a6b0:	0002      	movs	r2, r0
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	4a3a      	ldr	r2, [pc, #232]	; (800a7a0 <HAL_RCC_ClockConfig+0x274>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d901      	bls.n	800a6c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e068      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a6c0:	4b38      	ldr	r3, [pc, #224]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	220c      	movs	r2, #12
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	d1f0      	bne.n	800a6ac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a6ca:	4b34      	ldr	r3, [pc, #208]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d21e      	bcs.n	800a716 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6d8:	4b30      	ldr	r3, [pc, #192]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	4393      	bics	r3, r2
 800a6e0:	0019      	movs	r1, r3
 800a6e2:	4b2e      	ldr	r3, [pc, #184]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a6ea:	f7ff f8b1 	bl	8009850 <HAL_GetTick>
 800a6ee:	0003      	movs	r3, r0
 800a6f0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6f2:	e009      	b.n	800a708 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6f4:	f7ff f8ac 	bl	8009850 <HAL_GetTick>
 800a6f8:	0002      	movs	r2, r0
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	4a28      	ldr	r2, [pc, #160]	; (800a7a0 <HAL_RCC_ClockConfig+0x274>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d901      	bls.n	800a708 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e044      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a708:	4b24      	ldr	r3, [pc, #144]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2201      	movs	r2, #1
 800a70e:	4013      	ands	r3, r2
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	d1ee      	bne.n	800a6f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2204      	movs	r2, #4
 800a71c:	4013      	ands	r3, r2
 800a71e:	d009      	beq.n	800a734 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a720:	4b20      	ldr	r3, [pc, #128]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	4a20      	ldr	r2, [pc, #128]	; (800a7a8 <HAL_RCC_ClockConfig+0x27c>)
 800a726:	4013      	ands	r3, r2
 800a728:	0019      	movs	r1, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	4b1d      	ldr	r3, [pc, #116]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a730:	430a      	orrs	r2, r1
 800a732:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2208      	movs	r2, #8
 800a73a:	4013      	ands	r3, r2
 800a73c:	d00a      	beq.n	800a754 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a73e:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	4a1a      	ldr	r2, [pc, #104]	; (800a7ac <HAL_RCC_ClockConfig+0x280>)
 800a744:	4013      	ands	r3, r2
 800a746:	0019      	movs	r1, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	00da      	lsls	r2, r3, #3
 800a74e:	4b15      	ldr	r3, [pc, #84]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a750:	430a      	orrs	r2, r1
 800a752:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a754:	f000 f832 	bl	800a7bc <HAL_RCC_GetSysClockFreq>
 800a758:	0001      	movs	r1, r0
 800a75a:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <HAL_RCC_ClockConfig+0x278>)
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	091b      	lsrs	r3, r3, #4
 800a760:	220f      	movs	r2, #15
 800a762:	4013      	ands	r3, r2
 800a764:	4a12      	ldr	r2, [pc, #72]	; (800a7b0 <HAL_RCC_ClockConfig+0x284>)
 800a766:	5cd3      	ldrb	r3, [r2, r3]
 800a768:	000a      	movs	r2, r1
 800a76a:	40da      	lsrs	r2, r3
 800a76c:	4b11      	ldr	r3, [pc, #68]	; (800a7b4 <HAL_RCC_ClockConfig+0x288>)
 800a76e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a770:	4b11      	ldr	r3, [pc, #68]	; (800a7b8 <HAL_RCC_ClockConfig+0x28c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	250b      	movs	r5, #11
 800a776:	197c      	adds	r4, r7, r5
 800a778:	0018      	movs	r0, r3
 800a77a:	f7ff f823 	bl	80097c4 <HAL_InitTick>
 800a77e:	0003      	movs	r3, r0
 800a780:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800a782:	197b      	adds	r3, r7, r5
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800a78a:	197b      	adds	r3, r7, r5
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	e000      	b.n	800a792 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	0018      	movs	r0, r3
 800a794:	46bd      	mov	sp, r7
 800a796:	b004      	add	sp, #16
 800a798:	bdb0      	pop	{r4, r5, r7, pc}
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	40022000 	.word	0x40022000
 800a7a0:	00001388 	.word	0x00001388
 800a7a4:	40021000 	.word	0x40021000
 800a7a8:	fffff8ff 	.word	0xfffff8ff
 800a7ac:	ffffc7ff 	.word	0xffffc7ff
 800a7b0:	0800bd2c 	.word	0x0800bd2c
 800a7b4:	20000004 	.word	0x20000004
 800a7b8:	20000008 	.word	0x20000008

0800a7bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7bc:	b5b0      	push	{r4, r5, r7, lr}
 800a7be:	b08e      	sub	sp, #56	; 0x38
 800a7c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800a7c2:	4b4c      	ldr	r3, [pc, #304]	; (800a8f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	2b0c      	cmp	r3, #12
 800a7d0:	d014      	beq.n	800a7fc <HAL_RCC_GetSysClockFreq+0x40>
 800a7d2:	d900      	bls.n	800a7d6 <HAL_RCC_GetSysClockFreq+0x1a>
 800a7d4:	e07b      	b.n	800a8ce <HAL_RCC_GetSysClockFreq+0x112>
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d002      	beq.n	800a7e0 <HAL_RCC_GetSysClockFreq+0x24>
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	d00b      	beq.n	800a7f6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a7de:	e076      	b.n	800a8ce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a7e0:	4b44      	ldr	r3, [pc, #272]	; (800a8f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2210      	movs	r2, #16
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	d002      	beq.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800a7ea:	4b43      	ldr	r3, [pc, #268]	; (800a8f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a7ec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800a7ee:	e07c      	b.n	800a8ea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800a7f0:	4b42      	ldr	r3, [pc, #264]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x140>)
 800a7f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a7f4:	e079      	b.n	800a8ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a7f6:	4b42      	ldr	r3, [pc, #264]	; (800a900 <HAL_RCC_GetSysClockFreq+0x144>)
 800a7f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a7fa:	e076      	b.n	800a8ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	0c9a      	lsrs	r2, r3, #18
 800a800:	230f      	movs	r3, #15
 800a802:	401a      	ands	r2, r3
 800a804:	4b3f      	ldr	r3, [pc, #252]	; (800a904 <HAL_RCC_GetSysClockFreq+0x148>)
 800a806:	5c9b      	ldrb	r3, [r3, r2]
 800a808:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	0d9a      	lsrs	r2, r3, #22
 800a80e:	2303      	movs	r3, #3
 800a810:	4013      	ands	r3, r2
 800a812:	3301      	adds	r3, #1
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a816:	4b37      	ldr	r3, [pc, #220]	; (800a8f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a818:	68da      	ldr	r2, [r3, #12]
 800a81a:	2380      	movs	r3, #128	; 0x80
 800a81c:	025b      	lsls	r3, r3, #9
 800a81e:	4013      	ands	r3, r2
 800a820:	d01a      	beq.n	800a858 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	61bb      	str	r3, [r7, #24]
 800a826:	2300      	movs	r3, #0
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	4a35      	ldr	r2, [pc, #212]	; (800a900 <HAL_RCC_GetSysClockFreq+0x144>)
 800a82c:	2300      	movs	r3, #0
 800a82e:	69b8      	ldr	r0, [r7, #24]
 800a830:	69f9      	ldr	r1, [r7, #28]
 800a832:	f7fd fd15 	bl	8008260 <__aeabi_lmul>
 800a836:	0002      	movs	r2, r0
 800a838:	000b      	movs	r3, r1
 800a83a:	0010      	movs	r0, r2
 800a83c:	0019      	movs	r1, r3
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	613b      	str	r3, [r7, #16]
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f7fd fce9 	bl	8008220 <__aeabi_uldivmod>
 800a84e:	0002      	movs	r2, r0
 800a850:	000b      	movs	r3, r1
 800a852:	0013      	movs	r3, r2
 800a854:	637b      	str	r3, [r7, #52]	; 0x34
 800a856:	e037      	b.n	800a8c8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a858:	4b26      	ldr	r3, [pc, #152]	; (800a8f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2210      	movs	r2, #16
 800a85e:	4013      	ands	r3, r2
 800a860:	d01a      	beq.n	800a898 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	60bb      	str	r3, [r7, #8]
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	4a23      	ldr	r2, [pc, #140]	; (800a8f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	68f9      	ldr	r1, [r7, #12]
 800a872:	f7fd fcf5 	bl	8008260 <__aeabi_lmul>
 800a876:	0002      	movs	r2, r0
 800a878:	000b      	movs	r3, r1
 800a87a:	0010      	movs	r0, r2
 800a87c:	0019      	movs	r1, r3
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	603b      	str	r3, [r7, #0]
 800a882:	2300      	movs	r3, #0
 800a884:	607b      	str	r3, [r7, #4]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f7fd fcc9 	bl	8008220 <__aeabi_uldivmod>
 800a88e:	0002      	movs	r2, r0
 800a890:	000b      	movs	r3, r1
 800a892:	0013      	movs	r3, r2
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
 800a896:	e017      	b.n	800a8c8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	0018      	movs	r0, r3
 800a89c:	2300      	movs	r3, #0
 800a89e:	0019      	movs	r1, r3
 800a8a0:	4a16      	ldr	r2, [pc, #88]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x140>)
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f7fd fcdc 	bl	8008260 <__aeabi_lmul>
 800a8a8:	0002      	movs	r2, r0
 800a8aa:	000b      	movs	r3, r1
 800a8ac:	0010      	movs	r0, r2
 800a8ae:	0019      	movs	r1, r3
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	001c      	movs	r4, r3
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	001d      	movs	r5, r3
 800a8b8:	0022      	movs	r2, r4
 800a8ba:	002b      	movs	r3, r5
 800a8bc:	f7fd fcb0 	bl	8008220 <__aeabi_uldivmod>
 800a8c0:	0002      	movs	r2, r0
 800a8c2:	000b      	movs	r3, r1
 800a8c4:	0013      	movs	r3, r2
 800a8c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a8cc:	e00d      	b.n	800a8ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a8ce:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	0b5b      	lsrs	r3, r3, #13
 800a8d4:	2207      	movs	r2, #7
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	2280      	movs	r2, #128	; 0x80
 800a8e0:	0212      	lsls	r2, r2, #8
 800a8e2:	409a      	lsls	r2, r3
 800a8e4:	0013      	movs	r3, r2
 800a8e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a8e8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	b00e      	add	sp, #56	; 0x38
 800a8f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a8f4:	40021000 	.word	0x40021000
 800a8f8:	003d0900 	.word	0x003d0900
 800a8fc:	00f42400 	.word	0x00f42400
 800a900:	007a1200 	.word	0x007a1200
 800a904:	0800bd44 	.word	0x0800bd44

0800a908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a90c:	4b02      	ldr	r3, [pc, #8]	; (800a918 <HAL_RCC_GetHCLKFreq+0x10>)
 800a90e:	681b      	ldr	r3, [r3, #0]
}
 800a910:	0018      	movs	r0, r3
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	20000004 	.word	0x20000004

0800a91c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a920:	f7ff fff2 	bl	800a908 <HAL_RCC_GetHCLKFreq>
 800a924:	0001      	movs	r1, r0
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	2207      	movs	r2, #7
 800a92e:	4013      	ands	r3, r2
 800a930:	4a04      	ldr	r2, [pc, #16]	; (800a944 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a932:	5cd3      	ldrb	r3, [r2, r3]
 800a934:	40d9      	lsrs	r1, r3
 800a936:	000b      	movs	r3, r1
}
 800a938:	0018      	movs	r0, r3
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	40021000 	.word	0x40021000
 800a944:	0800bd3c 	.word	0x0800bd3c

0800a948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a94c:	f7ff ffdc 	bl	800a908 <HAL_RCC_GetHCLKFreq>
 800a950:	0001      	movs	r1, r0
 800a952:	4b06      	ldr	r3, [pc, #24]	; (800a96c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	0adb      	lsrs	r3, r3, #11
 800a958:	2207      	movs	r2, #7
 800a95a:	4013      	ands	r3, r2
 800a95c:	4a04      	ldr	r2, [pc, #16]	; (800a970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a95e:	5cd3      	ldrb	r3, [r2, r3]
 800a960:	40d9      	lsrs	r1, r3
 800a962:	000b      	movs	r3, r1
}
 800a964:	0018      	movs	r0, r3
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	40021000 	.word	0x40021000
 800a970:	0800bd3c 	.word	0x0800bd3c

0800a974 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800a97c:	2317      	movs	r3, #23
 800a97e:	18fb      	adds	r3, r7, r3
 800a980:	2200      	movs	r2, #0
 800a982:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2220      	movs	r2, #32
 800a98a:	4013      	ands	r3, r2
 800a98c:	d106      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	2380      	movs	r3, #128	; 0x80
 800a994:	011b      	lsls	r3, r3, #4
 800a996:	4013      	ands	r3, r2
 800a998:	d100      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800a99a:	e0d9      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a99c:	4ba4      	ldr	r3, [pc, #656]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a99e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a0:	2380      	movs	r3, #128	; 0x80
 800a9a2:	055b      	lsls	r3, r3, #21
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	d10a      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9a8:	4ba1      	ldr	r3, [pc, #644]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9ac:	4ba0      	ldr	r3, [pc, #640]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a9ae:	2180      	movs	r1, #128	; 0x80
 800a9b0:	0549      	lsls	r1, r1, #21
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800a9b6:	2317      	movs	r3, #23
 800a9b8:	18fb      	adds	r3, r7, r3
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9be:	4b9d      	ldr	r3, [pc, #628]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	2380      	movs	r3, #128	; 0x80
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	d11a      	bne.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9ca:	4b9a      	ldr	r3, [pc, #616]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	4b99      	ldr	r3, [pc, #612]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a9d0:	2180      	movs	r1, #128	; 0x80
 800a9d2:	0049      	lsls	r1, r1, #1
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9d8:	f7fe ff3a 	bl	8009850 <HAL_GetTick>
 800a9dc:	0003      	movs	r3, r0
 800a9de:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9e2:	f7fe ff35 	bl	8009850 <HAL_GetTick>
 800a9e6:	0002      	movs	r2, r0
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b64      	cmp	r3, #100	; 0x64
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e118      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9f4:	4b8f      	ldr	r3, [pc, #572]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	2380      	movs	r3, #128	; 0x80
 800a9fa:	005b      	lsls	r3, r3, #1
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	d0f0      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800aa00:	4b8b      	ldr	r3, [pc, #556]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	23c0      	movs	r3, #192	; 0xc0
 800aa06:	039b      	lsls	r3, r3, #14
 800aa08:	4013      	ands	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	23c0      	movs	r3, #192	; 0xc0
 800aa12:	039b      	lsls	r3, r3, #14
 800aa14:	4013      	ands	r3, r2
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d107      	bne.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	23c0      	movs	r3, #192	; 0xc0
 800aa22:	039b      	lsls	r3, r3, #14
 800aa24:	4013      	ands	r3, r2
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d013      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	23c0      	movs	r3, #192	; 0xc0
 800aa32:	029b      	lsls	r3, r3, #10
 800aa34:	401a      	ands	r2, r3
 800aa36:	23c0      	movs	r3, #192	; 0xc0
 800aa38:	029b      	lsls	r3, r3, #10
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d10a      	bne.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa3e:	4b7c      	ldr	r3, [pc, #496]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	2380      	movs	r3, #128	; 0x80
 800aa44:	029b      	lsls	r3, r3, #10
 800aa46:	401a      	ands	r2, r3
 800aa48:	2380      	movs	r3, #128	; 0x80
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d101      	bne.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e0e8      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800aa54:	4b76      	ldr	r3, [pc, #472]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aa56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa58:	23c0      	movs	r3, #192	; 0xc0
 800aa5a:	029b      	lsls	r3, r3, #10
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d049      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x186>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685a      	ldr	r2, [r3, #4]
 800aa6a:	23c0      	movs	r3, #192	; 0xc0
 800aa6c:	029b      	lsls	r3, r3, #10
 800aa6e:	4013      	ands	r3, r2
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d004      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	d10d      	bne.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	23c0      	movs	r3, #192	; 0xc0
 800aa86:	029b      	lsls	r3, r3, #10
 800aa88:	4013      	ands	r3, r2
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d034      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	4013      	ands	r3, r2
 800aa9a:	d02e      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800aa9c:	4b64      	ldr	r3, [pc, #400]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aa9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa0:	4a65      	ldr	r2, [pc, #404]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aaa6:	4b62      	ldr	r3, [pc, #392]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aaa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aaaa:	4b61      	ldr	r3, [pc, #388]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aaac:	2180      	movs	r1, #128	; 0x80
 800aaae:	0309      	lsls	r1, r1, #12
 800aab0:	430a      	orrs	r2, r1
 800aab2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aab4:	4b5e      	ldr	r3, [pc, #376]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aab8:	4b5d      	ldr	r3, [pc, #372]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aaba:	4960      	ldr	r1, [pc, #384]	; (800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800aabc:	400a      	ands	r2, r1
 800aabe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800aac0:	4b5b      	ldr	r3, [pc, #364]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	2380      	movs	r3, #128	; 0x80
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	4013      	ands	r3, r2
 800aace:	d014      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aad0:	f7fe febe 	bl	8009850 <HAL_GetTick>
 800aad4:	0003      	movs	r3, r0
 800aad6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aad8:	e009      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aada:	f7fe feb9 	bl	8009850 <HAL_GetTick>
 800aade:	0002      	movs	r2, r0
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	4a56      	ldr	r2, [pc, #344]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d901      	bls.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e09b      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aaee:	4b50      	ldr	r3, [pc, #320]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aaf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aaf2:	2380      	movs	r3, #128	; 0x80
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	d0ef      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	23c0      	movs	r3, #192	; 0xc0
 800ab00:	029b      	lsls	r3, r3, #10
 800ab02:	401a      	ands	r2, r3
 800ab04:	23c0      	movs	r3, #192	; 0xc0
 800ab06:	029b      	lsls	r3, r3, #10
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d10c      	bne.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800ab0c:	4b48      	ldr	r3, [pc, #288]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a4c      	ldr	r2, [pc, #304]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ab12:	4013      	ands	r3, r2
 800ab14:	0019      	movs	r1, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	23c0      	movs	r3, #192	; 0xc0
 800ab1c:	039b      	lsls	r3, r3, #14
 800ab1e:	401a      	ands	r2, r3
 800ab20:	4b43      	ldr	r3, [pc, #268]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab22:	430a      	orrs	r2, r1
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	4b42      	ldr	r3, [pc, #264]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	23c0      	movs	r3, #192	; 0xc0
 800ab30:	029b      	lsls	r3, r3, #10
 800ab32:	401a      	ands	r2, r3
 800ab34:	4b3e      	ldr	r3, [pc, #248]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab36:	430a      	orrs	r2, r1
 800ab38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ab3a:	2317      	movs	r3, #23
 800ab3c:	18fb      	adds	r3, r7, r3
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d105      	bne.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab44:	4b3a      	ldr	r3, [pc, #232]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab48:	4b39      	ldr	r3, [pc, #228]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab4a:	493f      	ldr	r1, [pc, #252]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab4c:	400a      	ands	r2, r1
 800ab4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2201      	movs	r2, #1
 800ab56:	4013      	ands	r3, r2
 800ab58:	d009      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab5a:	4b35      	ldr	r3, [pc, #212]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5e:	2203      	movs	r2, #3
 800ab60:	4393      	bics	r3, r2
 800ab62:	0019      	movs	r1, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68da      	ldr	r2, [r3, #12]
 800ab68:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2202      	movs	r2, #2
 800ab74:	4013      	ands	r3, r2
 800ab76:	d009      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab78:	4b2d      	ldr	r3, [pc, #180]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab7c:	220c      	movs	r2, #12
 800ab7e:	4393      	bics	r3, r2
 800ab80:	0019      	movs	r1, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691a      	ldr	r2, [r3, #16]
 800ab86:	4b2a      	ldr	r3, [pc, #168]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2204      	movs	r2, #4
 800ab92:	4013      	ands	r3, r2
 800ab94:	d009      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab96:	4b26      	ldr	r3, [pc, #152]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ab98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9a:	4a2c      	ldr	r2, [pc, #176]	; (800ac4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	0019      	movs	r1, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	695a      	ldr	r2, [r3, #20]
 800aba4:	4b22      	ldr	r3, [pc, #136]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800aba6:	430a      	orrs	r2, r1
 800aba8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2208      	movs	r2, #8
 800abb0:	4013      	ands	r3, r2
 800abb2:	d009      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800abb4:	4b1e      	ldr	r3, [pc, #120]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800abb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb8:	4a25      	ldr	r2, [pc, #148]	; (800ac50 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800abba:	4013      	ands	r3, r2
 800abbc:	0019      	movs	r1, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	699a      	ldr	r2, [r3, #24]
 800abc2:	4b1b      	ldr	r3, [pc, #108]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800abc4:	430a      	orrs	r2, r1
 800abc6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	2380      	movs	r3, #128	; 0x80
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	4013      	ands	r3, r2
 800abd2:	d009      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800abd4:	4b16      	ldr	r3, [pc, #88]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800abd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd8:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800abda:	4013      	ands	r3, r2
 800abdc:	0019      	movs	r1, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69da      	ldr	r2, [r3, #28]
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800abe4:	430a      	orrs	r2, r1
 800abe6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2240      	movs	r2, #64	; 0x40
 800abee:	4013      	ands	r3, r2
 800abf0:	d009      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abf2:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800abf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf6:	4a17      	ldr	r2, [pc, #92]	; (800ac54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	0019      	movs	r1, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac00:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ac02:	430a      	orrs	r2, r1
 800ac04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2280      	movs	r2, #128	; 0x80
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	d009      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800ac10:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ac12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac14:	4a10      	ldr	r2, [pc, #64]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	0019      	movs	r1, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a1a      	ldr	r2, [r3, #32]
 800ac1e:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800ac20:	430a      	orrs	r2, r1
 800ac22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	0018      	movs	r0, r3
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	b006      	add	sp, #24
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	46c0      	nop			; (mov r8, r8)
 800ac30:	40021000 	.word	0x40021000
 800ac34:	40007000 	.word	0x40007000
 800ac38:	fffcffff 	.word	0xfffcffff
 800ac3c:	fff7ffff 	.word	0xfff7ffff
 800ac40:	00001388 	.word	0x00001388
 800ac44:	ffcfffff 	.word	0xffcfffff
 800ac48:	efffffff 	.word	0xefffffff
 800ac4c:	fffff3ff 	.word	0xfffff3ff
 800ac50:	ffffcfff 	.word	0xffffcfff
 800ac54:	fbffffff 	.word	0xfbffffff
 800ac58:	fff3ffff 	.word	0xfff3ffff

0800ac5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e032      	b.n	800acd4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2239      	movs	r2, #57	; 0x39
 800ac72:	5c9b      	ldrb	r3, [r3, r2]
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d107      	bne.n	800ac8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2238      	movs	r2, #56	; 0x38
 800ac7e:	2100      	movs	r1, #0
 800ac80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	0018      	movs	r0, r3
 800ac86:	f7fe fcd3 	bl	8009630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2239      	movs	r2, #57	; 0x39
 800ac8e:	2102      	movs	r1, #2
 800ac90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	0019      	movs	r1, r3
 800ac9c:	0010      	movs	r0, r2
 800ac9e:	f000 f867 	bl	800ad70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	223e      	movs	r2, #62	; 0x3e
 800aca6:	2101      	movs	r1, #1
 800aca8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	223a      	movs	r2, #58	; 0x3a
 800acae:	2101      	movs	r1, #1
 800acb0:	5499      	strb	r1, [r3, r2]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	223b      	movs	r2, #59	; 0x3b
 800acb6:	2101      	movs	r1, #1
 800acb8:	5499      	strb	r1, [r3, r2]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	223c      	movs	r2, #60	; 0x3c
 800acbe:	2101      	movs	r1, #1
 800acc0:	5499      	strb	r1, [r3, r2]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	223d      	movs	r2, #61	; 0x3d
 800acc6:	2101      	movs	r1, #1
 800acc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2239      	movs	r2, #57	; 0x39
 800acce:	2101      	movs	r1, #1
 800acd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	0018      	movs	r0, r3
 800acd6:	46bd      	mov	sp, r7
 800acd8:	b002      	add	sp, #8
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2239      	movs	r2, #57	; 0x39
 800ace8:	5c9b      	ldrb	r3, [r3, r2]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b01      	cmp	r3, #1
 800acee:	d001      	beq.n	800acf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e033      	b.n	800ad5c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2239      	movs	r2, #57	; 0x39
 800acf8:	2102      	movs	r1, #2
 800acfa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	2380      	movs	r3, #128	; 0x80
 800ad02:	05db      	lsls	r3, r3, #23
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d00e      	beq.n	800ad26 <HAL_TIM_Base_Start+0x4a>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a15      	ldr	r2, [pc, #84]	; (800ad64 <HAL_TIM_Base_Start+0x88>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d009      	beq.n	800ad26 <HAL_TIM_Base_Start+0x4a>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a14      	ldr	r2, [pc, #80]	; (800ad68 <HAL_TIM_Base_Start+0x8c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d004      	beq.n	800ad26 <HAL_TIM_Base_Start+0x4a>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a12      	ldr	r2, [pc, #72]	; (800ad6c <HAL_TIM_Base_Start+0x90>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d111      	bne.n	800ad4a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	2207      	movs	r2, #7
 800ad2e:	4013      	ands	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b06      	cmp	r3, #6
 800ad36:	d010      	beq.n	800ad5a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2101      	movs	r1, #1
 800ad44:	430a      	orrs	r2, r1
 800ad46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad48:	e007      	b.n	800ad5a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2101      	movs	r1, #1
 800ad56:	430a      	orrs	r2, r1
 800ad58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	b004      	add	sp, #16
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	40000400 	.word	0x40000400
 800ad68:	40010800 	.word	0x40010800
 800ad6c:	40011400 	.word	0x40011400

0800ad70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	2380      	movs	r3, #128	; 0x80
 800ad84:	05db      	lsls	r3, r3, #23
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d00b      	beq.n	800ada2 <TIM_Base_SetConfig+0x32>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a23      	ldr	r2, [pc, #140]	; (800ae1c <TIM_Base_SetConfig+0xac>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d007      	beq.n	800ada2 <TIM_Base_SetConfig+0x32>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a22      	ldr	r2, [pc, #136]	; (800ae20 <TIM_Base_SetConfig+0xb0>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d003      	beq.n	800ada2 <TIM_Base_SetConfig+0x32>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a21      	ldr	r2, [pc, #132]	; (800ae24 <TIM_Base_SetConfig+0xb4>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d108      	bne.n	800adb4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2270      	movs	r2, #112	; 0x70
 800ada6:	4393      	bics	r3, r2
 800ada8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	2380      	movs	r3, #128	; 0x80
 800adb8:	05db      	lsls	r3, r3, #23
 800adba:	429a      	cmp	r2, r3
 800adbc:	d00b      	beq.n	800add6 <TIM_Base_SetConfig+0x66>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a16      	ldr	r2, [pc, #88]	; (800ae1c <TIM_Base_SetConfig+0xac>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d007      	beq.n	800add6 <TIM_Base_SetConfig+0x66>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a15      	ldr	r2, [pc, #84]	; (800ae20 <TIM_Base_SetConfig+0xb0>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d003      	beq.n	800add6 <TIM_Base_SetConfig+0x66>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a14      	ldr	r2, [pc, #80]	; (800ae24 <TIM_Base_SetConfig+0xb4>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d108      	bne.n	800ade8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <TIM_Base_SetConfig+0xb8>)
 800adda:	4013      	ands	r3, r2
 800addc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2280      	movs	r2, #128	; 0x80
 800adec:	4393      	bics	r3, r2
 800adee:	001a      	movs	r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	689a      	ldr	r2, [r3, #8]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	615a      	str	r2, [r3, #20]
}
 800ae14:	46c0      	nop			; (mov r8, r8)
 800ae16:	46bd      	mov	sp, r7
 800ae18:	b004      	add	sp, #16
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	40000400 	.word	0x40000400
 800ae20:	40010800 	.word	0x40010800
 800ae24:	40011400 	.word	0x40011400
 800ae28:	fffffcff 	.word	0xfffffcff

0800ae2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2238      	movs	r2, #56	; 0x38
 800ae3a:	5c9b      	ldrb	r3, [r3, r2]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e047      	b.n	800aed4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2238      	movs	r2, #56	; 0x38
 800ae48:	2101      	movs	r1, #1
 800ae4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2239      	movs	r2, #57	; 0x39
 800ae50:	2102      	movs	r1, #2
 800ae52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2270      	movs	r2, #112	; 0x70
 800ae68:	4393      	bics	r3, r2
 800ae6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	2380      	movs	r3, #128	; 0x80
 800ae84:	05db      	lsls	r3, r3, #23
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d00e      	beq.n	800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a13      	ldr	r2, [pc, #76]	; (800aedc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d009      	beq.n	800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a11      	ldr	r2, [pc, #68]	; (800aee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d004      	beq.n	800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a10      	ldr	r2, [pc, #64]	; (800aee4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d10c      	bne.n	800aec2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2280      	movs	r2, #128	; 0x80
 800aeac:	4393      	bics	r3, r2
 800aeae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2239      	movs	r2, #57	; 0x39
 800aec6:	2101      	movs	r1, #1
 800aec8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2238      	movs	r2, #56	; 0x38
 800aece:	2100      	movs	r1, #0
 800aed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	0018      	movs	r0, r3
 800aed6:	46bd      	mov	sp, r7
 800aed8:	b004      	add	sp, #16
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	40000400 	.word	0x40000400
 800aee0:	40010800 	.word	0x40010800
 800aee4:	40011400 	.word	0x40011400

0800aee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e044      	b.n	800af84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d107      	bne.n	800af12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2274      	movs	r2, #116	; 0x74
 800af06:	2100      	movs	r1, #0
 800af08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	0018      	movs	r0, r3
 800af0e:	f7fe fba7 	bl	8009660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2224      	movs	r2, #36	; 0x24
 800af16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2101      	movs	r1, #1
 800af24:	438a      	bics	r2, r1
 800af26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	0018      	movs	r0, r3
 800af2c:	f000 f8d8 	bl	800b0e0 <UART_SetConfig>
 800af30:	0003      	movs	r3, r0
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e024      	b.n	800af84 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	0018      	movs	r0, r3
 800af46:	f000 fb6b 	bl	800b620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	490d      	ldr	r1, [pc, #52]	; (800af8c <HAL_UART_Init+0xa4>)
 800af56:	400a      	ands	r2, r1
 800af58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	212a      	movs	r1, #42	; 0x2a
 800af66:	438a      	bics	r2, r1
 800af68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2101      	movs	r1, #1
 800af76:	430a      	orrs	r2, r1
 800af78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	0018      	movs	r0, r3
 800af7e:	f000 fc03 	bl	800b788 <UART_CheckIdleState>
 800af82:	0003      	movs	r3, r0
}
 800af84:	0018      	movs	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	b002      	add	sp, #8
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	ffffb7ff 	.word	0xffffb7ff

0800af90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08a      	sub	sp, #40	; 0x28
 800af94:	af02      	add	r7, sp, #8
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	1dbb      	adds	r3, r7, #6
 800af9e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afa4:	2b20      	cmp	r3, #32
 800afa6:	d000      	beq.n	800afaa <HAL_UART_Transmit+0x1a>
 800afa8:	e095      	b.n	800b0d6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <HAL_UART_Transmit+0x28>
 800afb0:	1dbb      	adds	r3, r7, #6
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e08d      	b.n	800b0d8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	689a      	ldr	r2, [r3, #8]
 800afc0:	2380      	movs	r3, #128	; 0x80
 800afc2:	015b      	lsls	r3, r3, #5
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d109      	bne.n	800afdc <HAL_UART_Transmit+0x4c>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d105      	bne.n	800afdc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2201      	movs	r2, #1
 800afd4:	4013      	ands	r3, r2
 800afd6:	d001      	beq.n	800afdc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e07d      	b.n	800b0d8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2274      	movs	r2, #116	; 0x74
 800afe0:	5c9b      	ldrb	r3, [r3, r2]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d101      	bne.n	800afea <HAL_UART_Transmit+0x5a>
 800afe6:	2302      	movs	r3, #2
 800afe8:	e076      	b.n	800b0d8 <HAL_UART_Transmit+0x148>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2274      	movs	r2, #116	; 0x74
 800afee:	2101      	movs	r1, #1
 800aff0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2280      	movs	r2, #128	; 0x80
 800aff6:	2100      	movs	r1, #0
 800aff8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2221      	movs	r2, #33	; 0x21
 800affe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b000:	f7fe fc26 	bl	8009850 <HAL_GetTick>
 800b004:	0003      	movs	r3, r0
 800b006:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	1dba      	adds	r2, r7, #6
 800b00c:	2150      	movs	r1, #80	; 0x50
 800b00e:	8812      	ldrh	r2, [r2, #0]
 800b010:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	1dba      	adds	r2, r7, #6
 800b016:	2152      	movs	r1, #82	; 0x52
 800b018:	8812      	ldrh	r2, [r2, #0]
 800b01a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	2380      	movs	r3, #128	; 0x80
 800b022:	015b      	lsls	r3, r3, #5
 800b024:	429a      	cmp	r2, r3
 800b026:	d108      	bne.n	800b03a <HAL_UART_Transmit+0xaa>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d104      	bne.n	800b03a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800b030:	2300      	movs	r3, #0
 800b032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	61bb      	str	r3, [r7, #24]
 800b038:	e003      	b.n	800b042 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2274      	movs	r2, #116	; 0x74
 800b046:	2100      	movs	r1, #0
 800b048:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800b04a:	e02c      	b.n	800b0a6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	0013      	movs	r3, r2
 800b056:	2200      	movs	r2, #0
 800b058:	2180      	movs	r1, #128	; 0x80
 800b05a:	f000 fbdd 	bl	800b818 <UART_WaitOnFlagUntilTimeout>
 800b05e:	1e03      	subs	r3, r0, #0
 800b060:	d001      	beq.n	800b066 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e038      	b.n	800b0d8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10b      	bne.n	800b084 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	001a      	movs	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	05d2      	lsls	r2, r2, #23
 800b078:	0dd2      	lsrs	r2, r2, #23
 800b07a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	3302      	adds	r3, #2
 800b080:	61bb      	str	r3, [r7, #24]
 800b082:	e007      	b.n	800b094 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	781a      	ldrb	r2, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	3301      	adds	r3, #1
 800b092:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2252      	movs	r2, #82	; 0x52
 800b098:	5a9b      	ldrh	r3, [r3, r2]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b299      	uxth	r1, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2252      	movs	r2, #82	; 0x52
 800b0a4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2252      	movs	r2, #82	; 0x52
 800b0aa:	5a9b      	ldrh	r3, [r3, r2]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1cc      	bne.n	800b04c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	0013      	movs	r3, r2
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2140      	movs	r1, #64	; 0x40
 800b0c0:	f000 fbaa 	bl	800b818 <UART_WaitOnFlagUntilTimeout>
 800b0c4:	1e03      	subs	r3, r0, #0
 800b0c6:	d001      	beq.n	800b0cc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e005      	b.n	800b0d8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e000      	b.n	800b0d8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800b0d6:	2302      	movs	r3, #2
  }
}
 800b0d8:	0018      	movs	r0, r3
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b008      	add	sp, #32
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0e0:	b5b0      	push	{r4, r5, r7, lr}
 800b0e2:	b08e      	sub	sp, #56	; 0x38
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0e8:	231a      	movs	r3, #26
 800b0ea:	2218      	movs	r2, #24
 800b0ec:	189b      	adds	r3, r3, r2
 800b0ee:	19db      	adds	r3, r3, r7
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	689a      	ldr	r2, [r3, #8]
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	431a      	orrs	r2, r3
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	69db      	ldr	r3, [r3, #28]
 800b108:	4313      	orrs	r3, r2
 800b10a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4ac3      	ldr	r2, [pc, #780]	; (800b420 <UART_SetConfig+0x340>)
 800b114:	4013      	ands	r3, r2
 800b116:	0019      	movs	r1, r3
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b11e:	430a      	orrs	r2, r1
 800b120:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	4abe      	ldr	r2, [pc, #760]	; (800b424 <UART_SetConfig+0x344>)
 800b12a:	4013      	ands	r3, r2
 800b12c:	0019      	movs	r1, r3
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4ab8      	ldr	r2, [pc, #736]	; (800b428 <UART_SetConfig+0x348>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d004      	beq.n	800b154 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b150:	4313      	orrs	r3, r2
 800b152:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	4ab4      	ldr	r2, [pc, #720]	; (800b42c <UART_SetConfig+0x34c>)
 800b15c:	4013      	ands	r3, r2
 800b15e:	0019      	movs	r1, r3
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b166:	430a      	orrs	r2, r1
 800b168:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4ab0      	ldr	r2, [pc, #704]	; (800b430 <UART_SetConfig+0x350>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d131      	bne.n	800b1d8 <UART_SetConfig+0xf8>
 800b174:	4baf      	ldr	r3, [pc, #700]	; (800b434 <UART_SetConfig+0x354>)
 800b176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b178:	2203      	movs	r2, #3
 800b17a:	4013      	ands	r3, r2
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d01d      	beq.n	800b1bc <UART_SetConfig+0xdc>
 800b180:	d823      	bhi.n	800b1ca <UART_SetConfig+0xea>
 800b182:	2b02      	cmp	r3, #2
 800b184:	d00c      	beq.n	800b1a0 <UART_SetConfig+0xc0>
 800b186:	d820      	bhi.n	800b1ca <UART_SetConfig+0xea>
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <UART_SetConfig+0xb2>
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d00e      	beq.n	800b1ae <UART_SetConfig+0xce>
 800b190:	e01b      	b.n	800b1ca <UART_SetConfig+0xea>
 800b192:	231b      	movs	r3, #27
 800b194:	2218      	movs	r2, #24
 800b196:	189b      	adds	r3, r3, r2
 800b198:	19db      	adds	r3, r3, r7
 800b19a:	2201      	movs	r2, #1
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	e0b4      	b.n	800b30a <UART_SetConfig+0x22a>
 800b1a0:	231b      	movs	r3, #27
 800b1a2:	2218      	movs	r2, #24
 800b1a4:	189b      	adds	r3, r3, r2
 800b1a6:	19db      	adds	r3, r3, r7
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	701a      	strb	r2, [r3, #0]
 800b1ac:	e0ad      	b.n	800b30a <UART_SetConfig+0x22a>
 800b1ae:	231b      	movs	r3, #27
 800b1b0:	2218      	movs	r2, #24
 800b1b2:	189b      	adds	r3, r3, r2
 800b1b4:	19db      	adds	r3, r3, r7
 800b1b6:	2204      	movs	r2, #4
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	e0a6      	b.n	800b30a <UART_SetConfig+0x22a>
 800b1bc:	231b      	movs	r3, #27
 800b1be:	2218      	movs	r2, #24
 800b1c0:	189b      	adds	r3, r3, r2
 800b1c2:	19db      	adds	r3, r3, r7
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	e09f      	b.n	800b30a <UART_SetConfig+0x22a>
 800b1ca:	231b      	movs	r3, #27
 800b1cc:	2218      	movs	r2, #24
 800b1ce:	189b      	adds	r3, r3, r2
 800b1d0:	19db      	adds	r3, r3, r7
 800b1d2:	2210      	movs	r2, #16
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	e098      	b.n	800b30a <UART_SetConfig+0x22a>
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a96      	ldr	r2, [pc, #600]	; (800b438 <UART_SetConfig+0x358>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d131      	bne.n	800b246 <UART_SetConfig+0x166>
 800b1e2:	4b94      	ldr	r3, [pc, #592]	; (800b434 <UART_SetConfig+0x354>)
 800b1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e6:	220c      	movs	r2, #12
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	2b0c      	cmp	r3, #12
 800b1ec:	d01d      	beq.n	800b22a <UART_SetConfig+0x14a>
 800b1ee:	d823      	bhi.n	800b238 <UART_SetConfig+0x158>
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d00c      	beq.n	800b20e <UART_SetConfig+0x12e>
 800b1f4:	d820      	bhi.n	800b238 <UART_SetConfig+0x158>
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d002      	beq.n	800b200 <UART_SetConfig+0x120>
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d00e      	beq.n	800b21c <UART_SetConfig+0x13c>
 800b1fe:	e01b      	b.n	800b238 <UART_SetConfig+0x158>
 800b200:	231b      	movs	r3, #27
 800b202:	2218      	movs	r2, #24
 800b204:	189b      	adds	r3, r3, r2
 800b206:	19db      	adds	r3, r3, r7
 800b208:	2200      	movs	r2, #0
 800b20a:	701a      	strb	r2, [r3, #0]
 800b20c:	e07d      	b.n	800b30a <UART_SetConfig+0x22a>
 800b20e:	231b      	movs	r3, #27
 800b210:	2218      	movs	r2, #24
 800b212:	189b      	adds	r3, r3, r2
 800b214:	19db      	adds	r3, r3, r7
 800b216:	2202      	movs	r2, #2
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	e076      	b.n	800b30a <UART_SetConfig+0x22a>
 800b21c:	231b      	movs	r3, #27
 800b21e:	2218      	movs	r2, #24
 800b220:	189b      	adds	r3, r3, r2
 800b222:	19db      	adds	r3, r3, r7
 800b224:	2204      	movs	r2, #4
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	e06f      	b.n	800b30a <UART_SetConfig+0x22a>
 800b22a:	231b      	movs	r3, #27
 800b22c:	2218      	movs	r2, #24
 800b22e:	189b      	adds	r3, r3, r2
 800b230:	19db      	adds	r3, r3, r7
 800b232:	2208      	movs	r2, #8
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	e068      	b.n	800b30a <UART_SetConfig+0x22a>
 800b238:	231b      	movs	r3, #27
 800b23a:	2218      	movs	r2, #24
 800b23c:	189b      	adds	r3, r3, r2
 800b23e:	19db      	adds	r3, r3, r7
 800b240:	2210      	movs	r2, #16
 800b242:	701a      	strb	r2, [r3, #0]
 800b244:	e061      	b.n	800b30a <UART_SetConfig+0x22a>
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a7c      	ldr	r2, [pc, #496]	; (800b43c <UART_SetConfig+0x35c>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d106      	bne.n	800b25e <UART_SetConfig+0x17e>
 800b250:	231b      	movs	r3, #27
 800b252:	2218      	movs	r2, #24
 800b254:	189b      	adds	r3, r3, r2
 800b256:	19db      	adds	r3, r3, r7
 800b258:	2200      	movs	r2, #0
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	e055      	b.n	800b30a <UART_SetConfig+0x22a>
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a77      	ldr	r2, [pc, #476]	; (800b440 <UART_SetConfig+0x360>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d106      	bne.n	800b276 <UART_SetConfig+0x196>
 800b268:	231b      	movs	r3, #27
 800b26a:	2218      	movs	r2, #24
 800b26c:	189b      	adds	r3, r3, r2
 800b26e:	19db      	adds	r3, r3, r7
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
 800b274:	e049      	b.n	800b30a <UART_SetConfig+0x22a>
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a6b      	ldr	r2, [pc, #428]	; (800b428 <UART_SetConfig+0x348>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d13e      	bne.n	800b2fe <UART_SetConfig+0x21e>
 800b280:	4b6c      	ldr	r3, [pc, #432]	; (800b434 <UART_SetConfig+0x354>)
 800b282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b284:	23c0      	movs	r3, #192	; 0xc0
 800b286:	011b      	lsls	r3, r3, #4
 800b288:	4013      	ands	r3, r2
 800b28a:	22c0      	movs	r2, #192	; 0xc0
 800b28c:	0112      	lsls	r2, r2, #4
 800b28e:	4293      	cmp	r3, r2
 800b290:	d027      	beq.n	800b2e2 <UART_SetConfig+0x202>
 800b292:	22c0      	movs	r2, #192	; 0xc0
 800b294:	0112      	lsls	r2, r2, #4
 800b296:	4293      	cmp	r3, r2
 800b298:	d82a      	bhi.n	800b2f0 <UART_SetConfig+0x210>
 800b29a:	2280      	movs	r2, #128	; 0x80
 800b29c:	0112      	lsls	r2, r2, #4
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d011      	beq.n	800b2c6 <UART_SetConfig+0x1e6>
 800b2a2:	2280      	movs	r2, #128	; 0x80
 800b2a4:	0112      	lsls	r2, r2, #4
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d822      	bhi.n	800b2f0 <UART_SetConfig+0x210>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <UART_SetConfig+0x1d8>
 800b2ae:	2280      	movs	r2, #128	; 0x80
 800b2b0:	00d2      	lsls	r2, r2, #3
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00e      	beq.n	800b2d4 <UART_SetConfig+0x1f4>
 800b2b6:	e01b      	b.n	800b2f0 <UART_SetConfig+0x210>
 800b2b8:	231b      	movs	r3, #27
 800b2ba:	2218      	movs	r2, #24
 800b2bc:	189b      	adds	r3, r3, r2
 800b2be:	19db      	adds	r3, r3, r7
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	701a      	strb	r2, [r3, #0]
 800b2c4:	e021      	b.n	800b30a <UART_SetConfig+0x22a>
 800b2c6:	231b      	movs	r3, #27
 800b2c8:	2218      	movs	r2, #24
 800b2ca:	189b      	adds	r3, r3, r2
 800b2cc:	19db      	adds	r3, r3, r7
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	701a      	strb	r2, [r3, #0]
 800b2d2:	e01a      	b.n	800b30a <UART_SetConfig+0x22a>
 800b2d4:	231b      	movs	r3, #27
 800b2d6:	2218      	movs	r2, #24
 800b2d8:	189b      	adds	r3, r3, r2
 800b2da:	19db      	adds	r3, r3, r7
 800b2dc:	2204      	movs	r2, #4
 800b2de:	701a      	strb	r2, [r3, #0]
 800b2e0:	e013      	b.n	800b30a <UART_SetConfig+0x22a>
 800b2e2:	231b      	movs	r3, #27
 800b2e4:	2218      	movs	r2, #24
 800b2e6:	189b      	adds	r3, r3, r2
 800b2e8:	19db      	adds	r3, r3, r7
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	e00c      	b.n	800b30a <UART_SetConfig+0x22a>
 800b2f0:	231b      	movs	r3, #27
 800b2f2:	2218      	movs	r2, #24
 800b2f4:	189b      	adds	r3, r3, r2
 800b2f6:	19db      	adds	r3, r3, r7
 800b2f8:	2210      	movs	r2, #16
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	e005      	b.n	800b30a <UART_SetConfig+0x22a>
 800b2fe:	231b      	movs	r3, #27
 800b300:	2218      	movs	r2, #24
 800b302:	189b      	adds	r3, r3, r2
 800b304:	19db      	adds	r3, r3, r7
 800b306:	2210      	movs	r2, #16
 800b308:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a46      	ldr	r2, [pc, #280]	; (800b428 <UART_SetConfig+0x348>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d000      	beq.n	800b316 <UART_SetConfig+0x236>
 800b314:	e09a      	b.n	800b44c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b316:	231b      	movs	r3, #27
 800b318:	2218      	movs	r2, #24
 800b31a:	189b      	adds	r3, r3, r2
 800b31c:	19db      	adds	r3, r3, r7
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2b08      	cmp	r3, #8
 800b322:	d01d      	beq.n	800b360 <UART_SetConfig+0x280>
 800b324:	dc20      	bgt.n	800b368 <UART_SetConfig+0x288>
 800b326:	2b04      	cmp	r3, #4
 800b328:	d015      	beq.n	800b356 <UART_SetConfig+0x276>
 800b32a:	dc1d      	bgt.n	800b368 <UART_SetConfig+0x288>
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <UART_SetConfig+0x256>
 800b330:	2b02      	cmp	r3, #2
 800b332:	d005      	beq.n	800b340 <UART_SetConfig+0x260>
 800b334:	e018      	b.n	800b368 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b336:	f7ff faf1 	bl	800a91c <HAL_RCC_GetPCLK1Freq>
 800b33a:	0003      	movs	r3, r0
 800b33c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b33e:	e01c      	b.n	800b37a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b340:	4b3c      	ldr	r3, [pc, #240]	; (800b434 <UART_SetConfig+0x354>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2210      	movs	r2, #16
 800b346:	4013      	ands	r3, r2
 800b348:	d002      	beq.n	800b350 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b34a:	4b3e      	ldr	r3, [pc, #248]	; (800b444 <UART_SetConfig+0x364>)
 800b34c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b34e:	e014      	b.n	800b37a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800b350:	4b3d      	ldr	r3, [pc, #244]	; (800b448 <UART_SetConfig+0x368>)
 800b352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b354:	e011      	b.n	800b37a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b356:	f7ff fa31 	bl	800a7bc <HAL_RCC_GetSysClockFreq>
 800b35a:	0003      	movs	r3, r0
 800b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b35e:	e00c      	b.n	800b37a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b360:	2380      	movs	r3, #128	; 0x80
 800b362:	021b      	lsls	r3, r3, #8
 800b364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b366:	e008      	b.n	800b37a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b36c:	231a      	movs	r3, #26
 800b36e:	2218      	movs	r2, #24
 800b370:	189b      	adds	r3, r3, r2
 800b372:	19db      	adds	r3, r3, r7
 800b374:	2201      	movs	r2, #1
 800b376:	701a      	strb	r2, [r3, #0]
        break;
 800b378:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d100      	bne.n	800b382 <UART_SetConfig+0x2a2>
 800b380:	e134      	b.n	800b5ec <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	0013      	movs	r3, r2
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	189b      	adds	r3, r3, r2
 800b38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b38e:	429a      	cmp	r2, r3
 800b390:	d305      	bcc.n	800b39e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d906      	bls.n	800b3ac <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800b39e:	231a      	movs	r3, #26
 800b3a0:	2218      	movs	r2, #24
 800b3a2:	189b      	adds	r3, r3, r2
 800b3a4:	19db      	adds	r3, r3, r7
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	e11f      	b.n	800b5ec <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	6939      	ldr	r1, [r7, #16]
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	000b      	movs	r3, r1
 800b3ba:	0e1b      	lsrs	r3, r3, #24
 800b3bc:	0010      	movs	r0, r2
 800b3be:	0205      	lsls	r5, r0, #8
 800b3c0:	431d      	orrs	r5, r3
 800b3c2:	000b      	movs	r3, r1
 800b3c4:	021c      	lsls	r4, r3, #8
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	60bb      	str	r3, [r7, #8]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
 800b3d2:	68b8      	ldr	r0, [r7, #8]
 800b3d4:	68f9      	ldr	r1, [r7, #12]
 800b3d6:	1900      	adds	r0, r0, r4
 800b3d8:	4169      	adcs	r1, r5
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	607b      	str	r3, [r7, #4]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f7fc ff1a 	bl	8008220 <__aeabi_uldivmod>
 800b3ec:	0002      	movs	r2, r0
 800b3ee:	000b      	movs	r3, r1
 800b3f0:	0013      	movs	r3, r2
 800b3f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3f6:	23c0      	movs	r3, #192	; 0xc0
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d309      	bcc.n	800b412 <UART_SetConfig+0x332>
 800b3fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b400:	2380      	movs	r3, #128	; 0x80
 800b402:	035b      	lsls	r3, r3, #13
 800b404:	429a      	cmp	r2, r3
 800b406:	d204      	bcs.n	800b412 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b40e:	60da      	str	r2, [r3, #12]
 800b410:	e0ec      	b.n	800b5ec <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800b412:	231a      	movs	r3, #26
 800b414:	2218      	movs	r2, #24
 800b416:	189b      	adds	r3, r3, r2
 800b418:	19db      	adds	r3, r3, r7
 800b41a:	2201      	movs	r2, #1
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	e0e5      	b.n	800b5ec <UART_SetConfig+0x50c>
 800b420:	efff69f3 	.word	0xefff69f3
 800b424:	ffffcfff 	.word	0xffffcfff
 800b428:	40004800 	.word	0x40004800
 800b42c:	fffff4ff 	.word	0xfffff4ff
 800b430:	40013800 	.word	0x40013800
 800b434:	40021000 	.word	0x40021000
 800b438:	40004400 	.word	0x40004400
 800b43c:	40004c00 	.word	0x40004c00
 800b440:	40005000 	.word	0x40005000
 800b444:	003d0900 	.word	0x003d0900
 800b448:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	69da      	ldr	r2, [r3, #28]
 800b450:	2380      	movs	r3, #128	; 0x80
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	429a      	cmp	r2, r3
 800b456:	d000      	beq.n	800b45a <UART_SetConfig+0x37a>
 800b458:	e071      	b.n	800b53e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800b45a:	231b      	movs	r3, #27
 800b45c:	2218      	movs	r2, #24
 800b45e:	189b      	adds	r3, r3, r2
 800b460:	19db      	adds	r3, r3, r7
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b08      	cmp	r3, #8
 800b466:	d822      	bhi.n	800b4ae <UART_SetConfig+0x3ce>
 800b468:	009a      	lsls	r2, r3, #2
 800b46a:	4b68      	ldr	r3, [pc, #416]	; (800b60c <UART_SetConfig+0x52c>)
 800b46c:	18d3      	adds	r3, r2, r3
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b472:	f7ff fa53 	bl	800a91c <HAL_RCC_GetPCLK1Freq>
 800b476:	0003      	movs	r3, r0
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b47a:	e021      	b.n	800b4c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b47c:	f7ff fa64 	bl	800a948 <HAL_RCC_GetPCLK2Freq>
 800b480:	0003      	movs	r3, r0
 800b482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b484:	e01c      	b.n	800b4c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b486:	4b62      	ldr	r3, [pc, #392]	; (800b610 <UART_SetConfig+0x530>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2210      	movs	r2, #16
 800b48c:	4013      	ands	r3, r2
 800b48e:	d002      	beq.n	800b496 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b490:	4b60      	ldr	r3, [pc, #384]	; (800b614 <UART_SetConfig+0x534>)
 800b492:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b494:	e014      	b.n	800b4c0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800b496:	4b60      	ldr	r3, [pc, #384]	; (800b618 <UART_SetConfig+0x538>)
 800b498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b49a:	e011      	b.n	800b4c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b49c:	f7ff f98e 	bl	800a7bc <HAL_RCC_GetSysClockFreq>
 800b4a0:	0003      	movs	r3, r0
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4a4:	e00c      	b.n	800b4c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4a6:	2380      	movs	r3, #128	; 0x80
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ac:	e008      	b.n	800b4c0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4b2:	231a      	movs	r3, #26
 800b4b4:	2218      	movs	r2, #24
 800b4b6:	189b      	adds	r3, r3, r2
 800b4b8:	19db      	adds	r3, r3, r7
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	701a      	strb	r2, [r3, #0]
        break;
 800b4be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d100      	bne.n	800b4c8 <UART_SetConfig+0x3e8>
 800b4c6:	e091      	b.n	800b5ec <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	005a      	lsls	r2, r3, #1
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	085b      	lsrs	r3, r3, #1
 800b4d2:	18d2      	adds	r2, r2, r3
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	0019      	movs	r1, r3
 800b4da:	0010      	movs	r0, r2
 800b4dc:	f7fc fe14 	bl	8008108 <__udivsi3>
 800b4e0:	0003      	movs	r3, r0
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	2b0f      	cmp	r3, #15
 800b4ea:	d921      	bls.n	800b530 <UART_SetConfig+0x450>
 800b4ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ee:	2380      	movs	r3, #128	; 0x80
 800b4f0:	025b      	lsls	r3, r3, #9
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d21c      	bcs.n	800b530 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	200e      	movs	r0, #14
 800b4fc:	2418      	movs	r4, #24
 800b4fe:	1903      	adds	r3, r0, r4
 800b500:	19db      	adds	r3, r3, r7
 800b502:	210f      	movs	r1, #15
 800b504:	438a      	bics	r2, r1
 800b506:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	085b      	lsrs	r3, r3, #1
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2207      	movs	r2, #7
 800b510:	4013      	ands	r3, r2
 800b512:	b299      	uxth	r1, r3
 800b514:	1903      	adds	r3, r0, r4
 800b516:	19db      	adds	r3, r3, r7
 800b518:	1902      	adds	r2, r0, r4
 800b51a:	19d2      	adds	r2, r2, r7
 800b51c:	8812      	ldrh	r2, [r2, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	1902      	adds	r2, r0, r4
 800b528:	19d2      	adds	r2, r2, r7
 800b52a:	8812      	ldrh	r2, [r2, #0]
 800b52c:	60da      	str	r2, [r3, #12]
 800b52e:	e05d      	b.n	800b5ec <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800b530:	231a      	movs	r3, #26
 800b532:	2218      	movs	r2, #24
 800b534:	189b      	adds	r3, r3, r2
 800b536:	19db      	adds	r3, r3, r7
 800b538:	2201      	movs	r2, #1
 800b53a:	701a      	strb	r2, [r3, #0]
 800b53c:	e056      	b.n	800b5ec <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b53e:	231b      	movs	r3, #27
 800b540:	2218      	movs	r2, #24
 800b542:	189b      	adds	r3, r3, r2
 800b544:	19db      	adds	r3, r3, r7
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b08      	cmp	r3, #8
 800b54a:	d822      	bhi.n	800b592 <UART_SetConfig+0x4b2>
 800b54c:	009a      	lsls	r2, r3, #2
 800b54e:	4b33      	ldr	r3, [pc, #204]	; (800b61c <UART_SetConfig+0x53c>)
 800b550:	18d3      	adds	r3, r2, r3
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b556:	f7ff f9e1 	bl	800a91c <HAL_RCC_GetPCLK1Freq>
 800b55a:	0003      	movs	r3, r0
 800b55c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b55e:	e021      	b.n	800b5a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b560:	f7ff f9f2 	bl	800a948 <HAL_RCC_GetPCLK2Freq>
 800b564:	0003      	movs	r3, r0
 800b566:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b568:	e01c      	b.n	800b5a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b56a:	4b29      	ldr	r3, [pc, #164]	; (800b610 <UART_SetConfig+0x530>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2210      	movs	r2, #16
 800b570:	4013      	ands	r3, r2
 800b572:	d002      	beq.n	800b57a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b574:	4b27      	ldr	r3, [pc, #156]	; (800b614 <UART_SetConfig+0x534>)
 800b576:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b578:	e014      	b.n	800b5a4 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800b57a:	4b27      	ldr	r3, [pc, #156]	; (800b618 <UART_SetConfig+0x538>)
 800b57c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b57e:	e011      	b.n	800b5a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b580:	f7ff f91c 	bl	800a7bc <HAL_RCC_GetSysClockFreq>
 800b584:	0003      	movs	r3, r0
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b588:	e00c      	b.n	800b5a4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b58a:	2380      	movs	r3, #128	; 0x80
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b590:	e008      	b.n	800b5a4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b596:	231a      	movs	r3, #26
 800b598:	2218      	movs	r2, #24
 800b59a:	189b      	adds	r3, r3, r2
 800b59c:	19db      	adds	r3, r3, r7
 800b59e:	2201      	movs	r2, #1
 800b5a0:	701a      	strb	r2, [r3, #0]
        break;
 800b5a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d020      	beq.n	800b5ec <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	085a      	lsrs	r2, r3, #1
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	18d2      	adds	r2, r2, r3
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	0019      	movs	r1, r3
 800b5ba:	0010      	movs	r0, r2
 800b5bc:	f7fc fda4 	bl	8008108 <__udivsi3>
 800b5c0:	0003      	movs	r3, r0
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c8:	2b0f      	cmp	r3, #15
 800b5ca:	d909      	bls.n	800b5e0 <UART_SetConfig+0x500>
 800b5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ce:	2380      	movs	r3, #128	; 0x80
 800b5d0:	025b      	lsls	r3, r3, #9
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d204      	bcs.n	800b5e0 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5dc:	60da      	str	r2, [r3, #12]
 800b5de:	e005      	b.n	800b5ec <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800b5e0:	231a      	movs	r3, #26
 800b5e2:	2218      	movs	r2, #24
 800b5e4:	189b      	adds	r3, r3, r2
 800b5e6:	19db      	adds	r3, r3, r7
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b5f8:	231a      	movs	r3, #26
 800b5fa:	2218      	movs	r2, #24
 800b5fc:	189b      	adds	r3, r3, r2
 800b5fe:	19db      	adds	r3, r3, r7
 800b600:	781b      	ldrb	r3, [r3, #0]
}
 800b602:	0018      	movs	r0, r3
 800b604:	46bd      	mov	sp, r7
 800b606:	b00e      	add	sp, #56	; 0x38
 800b608:	bdb0      	pop	{r4, r5, r7, pc}
 800b60a:	46c0      	nop			; (mov r8, r8)
 800b60c:	0800bd50 	.word	0x0800bd50
 800b610:	40021000 	.word	0x40021000
 800b614:	003d0900 	.word	0x003d0900
 800b618:	00f42400 	.word	0x00f42400
 800b61c:	0800bd74 	.word	0x0800bd74

0800b620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	2201      	movs	r2, #1
 800b62e:	4013      	ands	r3, r2
 800b630:	d00b      	beq.n	800b64a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	4a4a      	ldr	r2, [pc, #296]	; (800b764 <UART_AdvFeatureConfig+0x144>)
 800b63a:	4013      	ands	r3, r2
 800b63c:	0019      	movs	r1, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	2202      	movs	r2, #2
 800b650:	4013      	ands	r3, r2
 800b652:	d00b      	beq.n	800b66c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	4a43      	ldr	r2, [pc, #268]	; (800b768 <UART_AdvFeatureConfig+0x148>)
 800b65c:	4013      	ands	r3, r2
 800b65e:	0019      	movs	r1, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	430a      	orrs	r2, r1
 800b66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2204      	movs	r2, #4
 800b672:	4013      	ands	r3, r2
 800b674:	d00b      	beq.n	800b68e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	4a3b      	ldr	r2, [pc, #236]	; (800b76c <UART_AdvFeatureConfig+0x14c>)
 800b67e:	4013      	ands	r3, r2
 800b680:	0019      	movs	r1, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	2208      	movs	r2, #8
 800b694:	4013      	ands	r3, r2
 800b696:	d00b      	beq.n	800b6b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	4a34      	ldr	r2, [pc, #208]	; (800b770 <UART_AdvFeatureConfig+0x150>)
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	0019      	movs	r1, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2210      	movs	r2, #16
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	d00b      	beq.n	800b6d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	4a2c      	ldr	r2, [pc, #176]	; (800b774 <UART_AdvFeatureConfig+0x154>)
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	0019      	movs	r1, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	4013      	ands	r3, r2
 800b6da:	d00b      	beq.n	800b6f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	4a25      	ldr	r2, [pc, #148]	; (800b778 <UART_AdvFeatureConfig+0x158>)
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	0019      	movs	r1, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	2240      	movs	r2, #64	; 0x40
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	d01d      	beq.n	800b73a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	4a1d      	ldr	r2, [pc, #116]	; (800b77c <UART_AdvFeatureConfig+0x15c>)
 800b706:	4013      	ands	r3, r2
 800b708:	0019      	movs	r1, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b71a:	2380      	movs	r3, #128	; 0x80
 800b71c:	035b      	lsls	r3, r3, #13
 800b71e:	429a      	cmp	r2, r3
 800b720:	d10b      	bne.n	800b73a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	4a15      	ldr	r2, [pc, #84]	; (800b780 <UART_AdvFeatureConfig+0x160>)
 800b72a:	4013      	ands	r3, r2
 800b72c:	0019      	movs	r1, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	430a      	orrs	r2, r1
 800b738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	2280      	movs	r2, #128	; 0x80
 800b740:	4013      	ands	r3, r2
 800b742:	d00b      	beq.n	800b75c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	4a0e      	ldr	r2, [pc, #56]	; (800b784 <UART_AdvFeatureConfig+0x164>)
 800b74c:	4013      	ands	r3, r2
 800b74e:	0019      	movs	r1, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	430a      	orrs	r2, r1
 800b75a:	605a      	str	r2, [r3, #4]
  }
}
 800b75c:	46c0      	nop			; (mov r8, r8)
 800b75e:	46bd      	mov	sp, r7
 800b760:	b002      	add	sp, #8
 800b762:	bd80      	pop	{r7, pc}
 800b764:	fffdffff 	.word	0xfffdffff
 800b768:	fffeffff 	.word	0xfffeffff
 800b76c:	fffbffff 	.word	0xfffbffff
 800b770:	ffff7fff 	.word	0xffff7fff
 800b774:	ffffefff 	.word	0xffffefff
 800b778:	ffffdfff 	.word	0xffffdfff
 800b77c:	ffefffff 	.word	0xffefffff
 800b780:	ff9fffff 	.word	0xff9fffff
 800b784:	fff7ffff 	.word	0xfff7ffff

0800b788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b086      	sub	sp, #24
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2280      	movs	r2, #128	; 0x80
 800b794:	2100      	movs	r1, #0
 800b796:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b798:	f7fe f85a 	bl	8009850 <HAL_GetTick>
 800b79c:	0003      	movs	r3, r0
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2208      	movs	r2, #8
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	2b08      	cmp	r3, #8
 800b7ac:	d10c      	bne.n	800b7c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2280      	movs	r2, #128	; 0x80
 800b7b2:	0391      	lsls	r1, r2, #14
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	4a17      	ldr	r2, [pc, #92]	; (800b814 <UART_CheckIdleState+0x8c>)
 800b7b8:	9200      	str	r2, [sp, #0]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f000 f82c 	bl	800b818 <UART_WaitOnFlagUntilTimeout>
 800b7c0:	1e03      	subs	r3, r0, #0
 800b7c2:	d001      	beq.n	800b7c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e021      	b.n	800b80c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2204      	movs	r2, #4
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d10c      	bne.n	800b7f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2280      	movs	r2, #128	; 0x80
 800b7da:	03d1      	lsls	r1, r2, #15
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	4a0d      	ldr	r2, [pc, #52]	; (800b814 <UART_CheckIdleState+0x8c>)
 800b7e0:	9200      	str	r2, [sp, #0]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f000 f818 	bl	800b818 <UART_WaitOnFlagUntilTimeout>
 800b7e8:	1e03      	subs	r3, r0, #0
 800b7ea:	d001      	beq.n	800b7f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e00d      	b.n	800b80c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2274      	movs	r2, #116	; 0x74
 800b806:	2100      	movs	r1, #0
 800b808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	0018      	movs	r0, r3
 800b80e:	46bd      	mov	sp, r7
 800b810:	b004      	add	sp, #16
 800b812:	bd80      	pop	{r7, pc}
 800b814:	01ffffff 	.word	0x01ffffff

0800b818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b094      	sub	sp, #80	; 0x50
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	1dfb      	adds	r3, r7, #7
 800b826:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b828:	e0a3      	b.n	800b972 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b82c:	3301      	adds	r3, #1
 800b82e:	d100      	bne.n	800b832 <UART_WaitOnFlagUntilTimeout+0x1a>
 800b830:	e09f      	b.n	800b972 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b832:	f7fe f80d 	bl	8009850 <HAL_GetTick>
 800b836:	0002      	movs	r2, r0
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b83e:	429a      	cmp	r2, r3
 800b840:	d302      	bcc.n	800b848 <UART_WaitOnFlagUntilTimeout+0x30>
 800b842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b844:	2b00      	cmp	r3, #0
 800b846:	d13d      	bne.n	800b8c4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b848:	f3ef 8310 	mrs	r3, PRIMASK
 800b84c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b850:	647b      	str	r3, [r7, #68]	; 0x44
 800b852:	2301      	movs	r3, #1
 800b854:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	f383 8810 	msr	PRIMASK, r3
}
 800b85c:	46c0      	nop			; (mov r8, r8)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	494c      	ldr	r1, [pc, #304]	; (800b99c <UART_WaitOnFlagUntilTimeout+0x184>)
 800b86a:	400a      	ands	r2, r1
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b870:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	f383 8810 	msr	PRIMASK, r3
}
 800b878:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b87a:	f3ef 8310 	mrs	r3, PRIMASK
 800b87e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b882:	643b      	str	r3, [r7, #64]	; 0x40
 800b884:	2301      	movs	r3, #1
 800b886:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	f383 8810 	msr	PRIMASK, r3
}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	689a      	ldr	r2, [r3, #8]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2101      	movs	r1, #1
 800b89c:	438a      	bics	r2, r1
 800b89e:	609a      	str	r2, [r3, #8]
 800b8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a6:	f383 8810 	msr	PRIMASK, r3
}
 800b8aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2220      	movs	r2, #32
 800b8b6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2274      	movs	r2, #116	; 0x74
 800b8bc:	2100      	movs	r1, #0
 800b8be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e067      	b.n	800b994 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2204      	movs	r2, #4
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	d050      	beq.n	800b972 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	69da      	ldr	r2, [r3, #28]
 800b8d6:	2380      	movs	r3, #128	; 0x80
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	401a      	ands	r2, r3
 800b8dc:	2380      	movs	r3, #128	; 0x80
 800b8de:	011b      	lsls	r3, r3, #4
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d146      	bne.n	800b972 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2280      	movs	r2, #128	; 0x80
 800b8ea:	0112      	lsls	r2, r2, #4
 800b8ec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b8f2:	613b      	str	r3, [r7, #16]
  return(result);
 800b8f4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f383 8810 	msr	PRIMASK, r3
}
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4923      	ldr	r1, [pc, #140]	; (800b99c <UART_WaitOnFlagUntilTimeout+0x184>)
 800b910:	400a      	ands	r2, r1
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b916:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	f383 8810 	msr	PRIMASK, r3
}
 800b91e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b920:	f3ef 8310 	mrs	r3, PRIMASK
 800b924:	61fb      	str	r3, [r7, #28]
  return(result);
 800b926:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b928:	64bb      	str	r3, [r7, #72]	; 0x48
 800b92a:	2301      	movs	r3, #1
 800b92c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	f383 8810 	msr	PRIMASK, r3
}
 800b934:	46c0      	nop			; (mov r8, r8)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2101      	movs	r1, #1
 800b942:	438a      	bics	r2, r1
 800b944:	609a      	str	r2, [r3, #8]
 800b946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b948:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	f383 8810 	msr	PRIMASK, r3
}
 800b950:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2220      	movs	r2, #32
 800b956:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2220      	movs	r2, #32
 800b95c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2280      	movs	r2, #128	; 0x80
 800b962:	2120      	movs	r1, #32
 800b964:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2274      	movs	r2, #116	; 0x74
 800b96a:	2100      	movs	r1, #0
 800b96c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b96e:	2303      	movs	r3, #3
 800b970:	e010      	b.n	800b994 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	4013      	ands	r3, r2
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	425a      	negs	r2, r3
 800b982:	4153      	adcs	r3, r2
 800b984:	b2db      	uxtb	r3, r3
 800b986:	001a      	movs	r2, r3
 800b988:	1dfb      	adds	r3, r7, #7
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d100      	bne.n	800b992 <UART_WaitOnFlagUntilTimeout+0x17a>
 800b990:	e74b      	b.n	800b82a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	0018      	movs	r0, r3
 800b996:	46bd      	mov	sp, r7
 800b998:	b014      	add	sp, #80	; 0x50
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	fffffe5f 	.word	0xfffffe5f

0800b9a0 <__libc_init_array>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	2600      	movs	r6, #0
 800b9a4:	4d0c      	ldr	r5, [pc, #48]	; (800b9d8 <__libc_init_array+0x38>)
 800b9a6:	4c0d      	ldr	r4, [pc, #52]	; (800b9dc <__libc_init_array+0x3c>)
 800b9a8:	1b64      	subs	r4, r4, r5
 800b9aa:	10a4      	asrs	r4, r4, #2
 800b9ac:	42a6      	cmp	r6, r4
 800b9ae:	d109      	bne.n	800b9c4 <__libc_init_array+0x24>
 800b9b0:	2600      	movs	r6, #0
 800b9b2:	f000 f87d 	bl	800bab0 <_init>
 800b9b6:	4d0a      	ldr	r5, [pc, #40]	; (800b9e0 <__libc_init_array+0x40>)
 800b9b8:	4c0a      	ldr	r4, [pc, #40]	; (800b9e4 <__libc_init_array+0x44>)
 800b9ba:	1b64      	subs	r4, r4, r5
 800b9bc:	10a4      	asrs	r4, r4, #2
 800b9be:	42a6      	cmp	r6, r4
 800b9c0:	d105      	bne.n	800b9ce <__libc_init_array+0x2e>
 800b9c2:	bd70      	pop	{r4, r5, r6, pc}
 800b9c4:	00b3      	lsls	r3, r6, #2
 800b9c6:	58eb      	ldr	r3, [r5, r3]
 800b9c8:	4798      	blx	r3
 800b9ca:	3601      	adds	r6, #1
 800b9cc:	e7ee      	b.n	800b9ac <__libc_init_array+0xc>
 800b9ce:	00b3      	lsls	r3, r6, #2
 800b9d0:	58eb      	ldr	r3, [r5, r3]
 800b9d2:	4798      	blx	r3
 800b9d4:	3601      	adds	r6, #1
 800b9d6:	e7f2      	b.n	800b9be <__libc_init_array+0x1e>
 800b9d8:	0800bdc8 	.word	0x0800bdc8
 800b9dc:	0800bdc8 	.word	0x0800bdc8
 800b9e0:	0800bdc8 	.word	0x0800bdc8
 800b9e4:	0800bdcc 	.word	0x0800bdcc

0800b9e8 <__itoa>:
 800b9e8:	1e93      	subs	r3, r2, #2
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	000c      	movs	r4, r1
 800b9ee:	2b22      	cmp	r3, #34	; 0x22
 800b9f0:	d904      	bls.n	800b9fc <__itoa+0x14>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	001c      	movs	r4, r3
 800b9f6:	700b      	strb	r3, [r1, #0]
 800b9f8:	0020      	movs	r0, r4
 800b9fa:	bd10      	pop	{r4, pc}
 800b9fc:	2a0a      	cmp	r2, #10
 800b9fe:	d109      	bne.n	800ba14 <__itoa+0x2c>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	da07      	bge.n	800ba14 <__itoa+0x2c>
 800ba04:	232d      	movs	r3, #45	; 0x2d
 800ba06:	700b      	strb	r3, [r1, #0]
 800ba08:	2101      	movs	r1, #1
 800ba0a:	4240      	negs	r0, r0
 800ba0c:	1861      	adds	r1, r4, r1
 800ba0e:	f000 f80f 	bl	800ba30 <__utoa>
 800ba12:	e7f1      	b.n	800b9f8 <__itoa+0x10>
 800ba14:	2100      	movs	r1, #0
 800ba16:	e7f9      	b.n	800ba0c <__itoa+0x24>

0800ba18 <itoa>:
 800ba18:	b510      	push	{r4, lr}
 800ba1a:	f7ff ffe5 	bl	800b9e8 <__itoa>
 800ba1e:	bd10      	pop	{r4, pc}

0800ba20 <memset>:
 800ba20:	0003      	movs	r3, r0
 800ba22:	1882      	adds	r2, r0, r2
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d100      	bne.n	800ba2a <memset+0xa>
 800ba28:	4770      	bx	lr
 800ba2a:	7019      	strb	r1, [r3, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	e7f9      	b.n	800ba24 <memset+0x4>

0800ba30 <__utoa>:
 800ba30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba32:	000c      	movs	r4, r1
 800ba34:	0016      	movs	r6, r2
 800ba36:	b08d      	sub	sp, #52	; 0x34
 800ba38:	2225      	movs	r2, #37	; 0x25
 800ba3a:	0007      	movs	r7, r0
 800ba3c:	4916      	ldr	r1, [pc, #88]	; (800ba98 <__utoa+0x68>)
 800ba3e:	a802      	add	r0, sp, #8
 800ba40:	f000 f82c 	bl	800ba9c <memcpy>
 800ba44:	1e62      	subs	r2, r4, #1
 800ba46:	9200      	str	r2, [sp, #0]
 800ba48:	1eb3      	subs	r3, r6, #2
 800ba4a:	aa02      	add	r2, sp, #8
 800ba4c:	2500      	movs	r5, #0
 800ba4e:	9201      	str	r2, [sp, #4]
 800ba50:	2b22      	cmp	r3, #34	; 0x22
 800ba52:	d904      	bls.n	800ba5e <__utoa+0x2e>
 800ba54:	7025      	strb	r5, [r4, #0]
 800ba56:	002c      	movs	r4, r5
 800ba58:	0020      	movs	r0, r4
 800ba5a:	b00d      	add	sp, #52	; 0x34
 800ba5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba5e:	0038      	movs	r0, r7
 800ba60:	0031      	movs	r1, r6
 800ba62:	f7fc fbd7 	bl	8008214 <__aeabi_uidivmod>
 800ba66:	000b      	movs	r3, r1
 800ba68:	9a01      	ldr	r2, [sp, #4]
 800ba6a:	0029      	movs	r1, r5
 800ba6c:	5cd3      	ldrb	r3, [r2, r3]
 800ba6e:	9a00      	ldr	r2, [sp, #0]
 800ba70:	3501      	adds	r5, #1
 800ba72:	5553      	strb	r3, [r2, r5]
 800ba74:	003b      	movs	r3, r7
 800ba76:	0007      	movs	r7, r0
 800ba78:	429e      	cmp	r6, r3
 800ba7a:	d9f0      	bls.n	800ba5e <__utoa+0x2e>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	0022      	movs	r2, r4
 800ba80:	5563      	strb	r3, [r4, r5]
 800ba82:	000b      	movs	r3, r1
 800ba84:	1ac8      	subs	r0, r1, r3
 800ba86:	4283      	cmp	r3, r0
 800ba88:	dde6      	ble.n	800ba58 <__utoa+0x28>
 800ba8a:	7810      	ldrb	r0, [r2, #0]
 800ba8c:	5ce5      	ldrb	r5, [r4, r3]
 800ba8e:	7015      	strb	r5, [r2, #0]
 800ba90:	54e0      	strb	r0, [r4, r3]
 800ba92:	3201      	adds	r2, #1
 800ba94:	3b01      	subs	r3, #1
 800ba96:	e7f5      	b.n	800ba84 <__utoa+0x54>
 800ba98:	0800bd98 	.word	0x0800bd98

0800ba9c <memcpy>:
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d100      	bne.n	800baa6 <memcpy+0xa>
 800baa4:	bd10      	pop	{r4, pc}
 800baa6:	5ccc      	ldrb	r4, [r1, r3]
 800baa8:	54c4      	strb	r4, [r0, r3]
 800baaa:	3301      	adds	r3, #1
 800baac:	e7f8      	b.n	800baa0 <memcpy+0x4>
	...

0800bab0 <_init>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	46c0      	nop			; (mov r8, r8)
 800bab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab6:	bc08      	pop	{r3}
 800bab8:	469e      	mov	lr, r3
 800baba:	4770      	bx	lr

0800babc <_fini>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac2:	bc08      	pop	{r3}
 800bac4:	469e      	mov	lr, r3
 800bac6:	4770      	bx	lr
